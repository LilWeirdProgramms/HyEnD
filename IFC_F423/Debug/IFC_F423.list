
IFC_F423.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  08009ea4  08009ea4  00019ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1e8  0800a1e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1e8  0800a1e8  0001a1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1f0  0800a1f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1f0  0800a1f0  0001a1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1f4  0800a1f4  0001a1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a1f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b70  20000070  0800a268  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004be0  0800a268  00024be0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e70e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005688  00000000  00000000  0004e7ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001980  00000000  00000000  00053e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016e8  00000000  00000000  000557b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028ab3  00000000  00000000  00056ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020eb7  00000000  00000000  0007f953  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d94f6  00000000  00000000  000a080a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00179d00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006958  00000000  00000000  00179d7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009e8c 	.word	0x08009e8c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08009e8c 	.word	0x08009e8c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_CAN1_Init+0x64>)
 80005c6:	4a18      	ldr	r2, [pc, #96]	; (8000628 <MX_CAN1_Init+0x68>)
 80005c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_CAN1_Init+0x64>)
 80005cc:	2206      	movs	r2, #6
 80005ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_CAN1_Init+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_CAN1_Init+0x64>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_CAN1_Init+0x64>)
 80005de:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80005e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_CAN1_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_CAN1_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_CAN1_Init+0x64>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_CAN1_Init+0x64>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_CAN1_Init+0x64>)
 80005fe:	2200      	movs	r2, #0
 8000600:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_CAN1_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_CAN1_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_CAN1_Init+0x64>)
 8000610:	f000 fe2e 	bl	8001270 <HAL_CAN_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800061a:	f000 fae1 	bl	8000be0 <Error_Handler>
  }

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20001154 	.word	0x20001154
 8000628:	40006400 	.word	0x40006400

0800062c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8000630:	4b17      	ldr	r3, [pc, #92]	; (8000690 <MX_CAN2_Init+0x64>)
 8000632:	4a18      	ldr	r2, [pc, #96]	; (8000694 <MX_CAN2_Init+0x68>)
 8000634:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_CAN2_Init+0x64>)
 8000638:	2206      	movs	r2, #6
 800063a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_CAN2_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_CAN2_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_CAN2_Init+0x64>)
 800064a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800064e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_CAN2_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_CAN2_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_CAN2_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_CAN2_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_CAN2_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_CAN2_Init+0x64>)
 8000670:	2200      	movs	r2, #0
 8000672:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_CAN2_Init+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_CAN2_Init+0x64>)
 800067c:	f000 fdf8 	bl	8001270 <HAL_CAN_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000686:	f000 faab 	bl	8000be0 <Error_Handler>
  }

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000112c 	.word	0x2000112c
 8000694:	40006800 	.word	0x40006800

08000698 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  hcan3.Instance = CAN3;
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_CAN3_Init+0x64>)
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <MX_CAN3_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_CAN3_Init+0x64>)
 80006a4:	2206      	movs	r2, #6
 80006a6:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_CAN3_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_CAN3_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_6TQ;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_CAN3_Init+0x64>)
 80006b6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80006ba:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_CAN3_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_CAN3_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_CAN3_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_CAN3_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_CAN3_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_CAN3_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_CAN3_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_CAN3_Init+0x64>)
 80006e8:	f000 fdc2 	bl	8001270 <HAL_CAN_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_CAN3_Init+0x5e>
  {
    Error_Handler();
 80006f2:	f000 fa75 	bl	8000be0 <Error_Handler>
  }

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20001104 	.word	0x20001104
 8000700:	40006c00 	.word	0x40006c00

08000704 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08e      	sub	sp, #56	; 0x38
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a58      	ldr	r2, [pc, #352]	; (8000884 <HAL_CAN_MspInit+0x180>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d135      	bne.n	8000792 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
 800072a:	4b57      	ldr	r3, [pc, #348]	; (8000888 <HAL_CAN_MspInit+0x184>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	4a56      	ldr	r2, [pc, #344]	; (8000888 <HAL_CAN_MspInit+0x184>)
 8000730:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000734:	6413      	str	r3, [r2, #64]	; 0x40
 8000736:	4b54      	ldr	r3, [pc, #336]	; (8000888 <HAL_CAN_MspInit+0x184>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800073e:	623b      	str	r3, [r7, #32]
 8000740:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
 8000746:	4b50      	ldr	r3, [pc, #320]	; (8000888 <HAL_CAN_MspInit+0x184>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a4f      	ldr	r2, [pc, #316]	; (8000888 <HAL_CAN_MspInit+0x184>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b4d      	ldr	r3, [pc, #308]	; (8000888 <HAL_CAN_MspInit+0x184>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	61fb      	str	r3, [r7, #28]
 800075c:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800075e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN1;
 8000770:	2308      	movs	r3, #8
 8000772:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000778:	4619      	mov	r1, r3
 800077a:	4844      	ldr	r0, [pc, #272]	; (800088c <HAL_CAN_MspInit+0x188>)
 800077c:	f001 fcfc 	bl	8002178 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2103      	movs	r1, #3
 8000784:	2014      	movs	r0, #20
 8000786:	f001 fcc0 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800078a:	2014      	movs	r0, #20
 800078c:	f001 fcd9 	bl	8002142 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8000790:	e074      	b.n	800087c <HAL_CAN_MspInit+0x178>
  else if(canHandle->Instance==CAN2)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a3e      	ldr	r2, [pc, #248]	; (8000890 <HAL_CAN_MspInit+0x18c>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d135      	bne.n	8000808 <HAL_CAN_MspInit+0x104>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	4b39      	ldr	r3, [pc, #228]	; (8000888 <HAL_CAN_MspInit+0x184>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a38      	ldr	r2, [pc, #224]	; (8000888 <HAL_CAN_MspInit+0x184>)
 80007a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b36      	ldr	r3, [pc, #216]	; (8000888 <HAL_CAN_MspInit+0x184>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	4b32      	ldr	r3, [pc, #200]	; (8000888 <HAL_CAN_MspInit+0x184>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	4a31      	ldr	r2, [pc, #196]	; (8000888 <HAL_CAN_MspInit+0x184>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	6313      	str	r3, [r2, #48]	; 0x30
 80007c8:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <HAL_CAN_MspInit+0x184>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	f003 0302 	and.w	r3, r3, #2
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80007d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80007e6:	2309      	movs	r3, #9
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4826      	ldr	r0, [pc, #152]	; (800088c <HAL_CAN_MspInit+0x188>)
 80007f2:	f001 fcc1 	bl	8002178 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 3, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2103      	movs	r1, #3
 80007fa:	2040      	movs	r0, #64	; 0x40
 80007fc:	f001 fc85 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000800:	2040      	movs	r0, #64	; 0x40
 8000802:	f001 fc9e 	bl	8002142 <HAL_NVIC_EnableIRQ>
}
 8000806:	e039      	b.n	800087c <HAL_CAN_MspInit+0x178>
  else if(canHandle->Instance==CAN3)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <HAL_CAN_MspInit+0x190>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d134      	bne.n	800087c <HAL_CAN_MspInit+0x178>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <HAL_CAN_MspInit+0x184>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <HAL_CAN_MspInit+0x184>)
 800081c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <HAL_CAN_MspInit+0x184>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_CAN_MspInit+0x184>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <HAL_CAN_MspInit+0x184>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_CAN_MspInit+0x184>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800084a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800085c:	230b      	movs	r3, #11
 800085e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000864:	4619      	mov	r1, r3
 8000866:	480c      	ldr	r0, [pc, #48]	; (8000898 <HAL_CAN_MspInit+0x194>)
 8000868:	f001 fc86 	bl	8002178 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 3, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2103      	movs	r1, #3
 8000870:	204b      	movs	r0, #75	; 0x4b
 8000872:	f001 fc4a 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8000876:	204b      	movs	r0, #75	; 0x4b
 8000878:	f001 fc63 	bl	8002142 <HAL_NVIC_EnableIRQ>
}
 800087c:	bf00      	nop
 800087e:	3738      	adds	r7, #56	; 0x38
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40006400 	.word	0x40006400
 8000888:	40023800 	.word	0x40023800
 800088c:	40020400 	.word	0x40020400
 8000890:	40006800 	.word	0x40006800
 8000894:	40006c00 	.word	0x40006c00
 8000898:	40020000 	.word	0x40020000

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b4d      	ldr	r3, [pc, #308]	; (80009ec <MX_GPIO_Init+0x150>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a4c      	ldr	r2, [pc, #304]	; (80009ec <MX_GPIO_Init+0x150>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b4a      	ldr	r3, [pc, #296]	; (80009ec <MX_GPIO_Init+0x150>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b46      	ldr	r3, [pc, #280]	; (80009ec <MX_GPIO_Init+0x150>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a45      	ldr	r2, [pc, #276]	; (80009ec <MX_GPIO_Init+0x150>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b43      	ldr	r3, [pc, #268]	; (80009ec <MX_GPIO_Init+0x150>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b3f      	ldr	r3, [pc, #252]	; (80009ec <MX_GPIO_Init+0x150>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a3e      	ldr	r2, [pc, #248]	; (80009ec <MX_GPIO_Init+0x150>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <MX_GPIO_Init+0x150>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b38      	ldr	r3, [pc, #224]	; (80009ec <MX_GPIO_Init+0x150>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a37      	ldr	r2, [pc, #220]	; (80009ec <MX_GPIO_Init+0x150>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b35      	ldr	r3, [pc, #212]	; (80009ec <MX_GPIO_Init+0x150>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b31      	ldr	r3, [pc, #196]	; (80009ec <MX_GPIO_Init+0x150>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a30      	ldr	r2, [pc, #192]	; (80009ec <MX_GPIO_Init+0x150>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <MX_GPIO_Init+0x150>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ORANGE_LED_GPIO_Port, ORANGE_LED_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2104      	movs	r1, #4
 8000942:	482b      	ldr	r0, [pc, #172]	; (80009f0 <MX_GPIO_Init+0x154>)
 8000944:	f001 fdaa 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHUTDOWN_AS10_Pin|CS_AS10_Pin, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2118      	movs	r1, #24
 800094c:	4829      	ldr	r0, [pc, #164]	; (80009f4 <MX_GPIO_Init+0x158>)
 800094e:	f001 fda5 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAN2_STBY_Pin|CAN3_STBY_Pin|CAN1_STBY_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 4189 	mov.w	r1, #17536	; 0x4480
 8000958:	4827      	ldr	r0, [pc, #156]	; (80009f8 <MX_GPIO_Init+0x15c>)
 800095a:	f001 fd9f 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ORANGE_LED_Pin;
 800095e:	2304      	movs	r3, #4
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ORANGE_LED_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	481e      	ldr	r0, [pc, #120]	; (80009f0 <MX_GPIO_Init+0x154>)
 8000976:	f001 fbff 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SHUTDOWN_AS10_Pin|CS_AS10_Pin;
 800097a:	2318      	movs	r3, #24
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4818      	ldr	r0, [pc, #96]	; (80009f4 <MX_GPIO_Init+0x158>)
 8000992:	f001 fbf1 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLEAR_TO_SEND_AS10_Pin;
 8000996:	2310      	movs	r3, #16
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLEAR_TO_SEND_AS10_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4811      	ldr	r0, [pc, #68]	; (80009f0 <MX_GPIO_Init+0x154>)
 80009aa:	f001 fbe5 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INTERRUPT_AS10_Pin;
 80009ae:	2320      	movs	r3, #32
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_GPIO_Init+0x160>)
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTERRUPT_AS10_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <MX_GPIO_Init+0x154>)
 80009c2:	f001 fbd9 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_STBY_Pin|CAN3_STBY_Pin|CAN1_STBY_Pin;
 80009c6:	f44f 4389 	mov.w	r3, #17536	; 0x4480
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_GPIO_Init+0x15c>)
 80009e0:	f001 fbca 	bl	8002178 <HAL_GPIO_Init>

}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40020400 	.word	0x40020400
 80009fc:	10110000 	.word	0x10110000

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 fb9f 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f855 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f7ff ff45 	bl	800089c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000a12:	f7ff fdd5 	bl	80005c0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000a16:	f7ff fe09 	bl	800062c <MX_CAN2_Init>
  MX_CAN3_Init();
 8000a1a:	f7ff fe3d 	bl	8000698 <MX_CAN3_Init>
  MX_SDIO_SD_Init();
 8000a1e:	f000 f8e3 	bl	8000be8 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000a22:	f000 f9ad 	bl	8000d80 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000a26:	f004 fbcb 	bl	80051c0 <MX_FATFS_Init>
  MX_TIM6_Init();
 8000a2a:	f000 fb05 	bl	8001038 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

    ifc.busSys = &hcan1;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <main+0xa4>)
 8000a30:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <main+0xa8>)
 8000a32:	605a      	str	r2, [r3, #4]
	ifc.busGSE = &hcan3;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <main+0xa4>)
 8000a36:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <main+0xac>)
 8000a38:	601a      	str	r2, [r3, #0]
//	ifc.serialDebug = &huart2;
	ifc.htim = &htim6;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <main+0xa4>)
 8000a3c:	4a1c      	ldr	r2, [pc, #112]	; (8000ab0 <main+0xb0>)
 8000a3e:	609a      	str	r2, [r3, #8]

	ifc.LD1.port = ORANGE_LED_GPIO_Port;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <main+0xa4>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <main+0xb4>)
 8000a44:	619a      	str	r2, [r3, #24]
	ifc.LD1.pin = ORANGE_LED_Pin;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <main+0xa4>)
 8000a48:	2204      	movs	r2, #4
 8000a4a:	839a      	strh	r2, [r3, #28]

	initMicrocontroller();
 8000a4c:	f005 f966 	bl	8005d1c <initMicrocontroller>
	HYOS_start();
 8000a50:	f006 fb2c 	bl	80070ac <HYOS_start>
	IFC_init(&ifc);
 8000a54:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <main+0xa4>)
 8000a56:	f006 f8ab 	bl	8006bb0 <IFC_init>
	HYOS_start();
 8000a5a:	f006 fb27 	bl	80070ac <HYOS_start>

//	IFC_DH_sendTransition(IDLE);
//	IFC_DH_sendTransition(FUELING);
//	IFC_DH_sendTransition(RDY_SET);
//	IFC_DH_sendTransition(FLIGHT);
	uint8_t flag = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getTasks()->whileHandle();
 8000a62:	f005 f98d 	bl	8005d80 <getTasks>
 8000a66:	4603      	mov	r3, r0
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	4798      	blx	r3

	  if (flag == 1) {
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d103      	bne.n	8000a7a <main+0x7a>
			IFC_DH_sendTransition(IDLE);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f006 fa60 	bl	8006f38 <IFC_DH_sendTransition>
 8000a78:	e7f3      	b.n	8000a62 <main+0x62>
	  } else if (flag == 2) {
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d103      	bne.n	8000a88 <main+0x88>
			IFC_DH_sendTransition(FUELING);
 8000a80:	2007      	movs	r0, #7
 8000a82:	f006 fa59 	bl	8006f38 <IFC_DH_sendTransition>
 8000a86:	e7ec      	b.n	8000a62 <main+0x62>
	  } else if (flag == 3) {
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d103      	bne.n	8000a96 <main+0x96>
			IFC_DH_sendTransition(RDY_SET);
 8000a8e:	2008      	movs	r0, #8
 8000a90:	f006 fa52 	bl	8006f38 <IFC_DH_sendTransition>
 8000a94:	e7e5      	b.n	8000a62 <main+0x62>
	  } else if (flag == 4) {
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	d1e2      	bne.n	8000a62 <main+0x62>
			IFC_DH_sendTransition(FLIGHT);
 8000a9c:	2009      	movs	r0, #9
 8000a9e:	f006 fa4b 	bl	8006f38 <IFC_DH_sendTransition>
	  getTasks()->whileHandle();
 8000aa2:	e7de      	b.n	8000a62 <main+0x62>
 8000aa4:	200011f8 	.word	0x200011f8
 8000aa8:	20001154 	.word	0x20001154
 8000aac:	20001104 	.word	0x20001104
 8000ab0:	20001928 	.word	0x20001928
 8000ab4:	40020800 	.word	0x40020800

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b0aa      	sub	sp, #168	; 0xa8
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ac2:	2234      	movs	r2, #52	; 0x34
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f008 fdbe 	bl	8009648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	2258      	movs	r2, #88	; 0x58
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 fdaf 	bl	8009648 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <SystemClock_Config+0x10c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a34      	ldr	r2, [pc, #208]	; (8000bc4 <SystemClock_Config+0x10c>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <SystemClock_Config+0x10c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <SystemClock_Config+0x110>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a2e      	ldr	r2, [pc, #184]	; (8000bc8 <SystemClock_Config+0x110>)
 8000b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <SystemClock_Config+0x110>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b22:	2301      	movs	r3, #1
 8000b24:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b40:	23c0      	movs	r3, #192	; 0xc0
 8000b42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b46:	2302      	movs	r3, #2
 8000b48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f002 f91b 	bl	8002d98 <HAL_RCC_OscConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b68:	f000 f83a 	bl	8000be0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b70:	2302      	movs	r3, #2
 8000b72:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b82:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b84:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b88:	2103      	movs	r1, #3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 fcba 	bl	8002504 <HAL_RCC_ClockConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000b96:	f000 f823 	bl	8000be0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000b9a:	2360      	movs	r3, #96	; 0x60
 8000b9c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fe68 	bl	8002880 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000bb6:	f000 f813 	bl	8000be0 <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	37a8      	adds	r7, #168	; 0xa8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	IFC_BOARD_tick();
 8000bd4:	f006 f8d6 	bl	8006d84 <IFC_BOARD_tick>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <Error_Handler+0x6>

08000be8 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_SDIO_SD_Init+0x38>)
 8000bee:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <MX_SDIO_SD_Init+0x3c>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <MX_SDIO_SD_Init+0x38>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_SDIO_SD_Init+0x38>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <MX_SDIO_SD_Init+0x38>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_SDIO_SD_Init+0x38>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <MX_SDIO_SD_Init+0x38>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 15;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <MX_SDIO_SD_Init+0x38>)
 8000c12:	220f      	movs	r2, #15
 8000c14:	619a      	str	r2, [r3, #24]

}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	2000184c 	.word	0x2000184c
 8000c24:	40012c00 	.word	0x40012c00

08000c28 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	; 0x30
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a48      	ldr	r2, [pc, #288]	; (8000d68 <HAL_SD_MspInit+0x140>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	f040 8089 	bne.w	8000d5e <HAL_SD_MspInit+0x136>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c54:	4a45      	ldr	r2, [pc, #276]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000c56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c5a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5c:	4b43      	ldr	r3, [pc, #268]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c64:	61bb      	str	r3, [r7, #24]
 8000c66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4a3e      	ldr	r2, [pc, #248]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	4b3c      	ldr	r3, [pc, #240]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a37      	ldr	r2, [pc, #220]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b35      	ldr	r3, [pc, #212]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a30      	ldr	r2, [pc, #192]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	4a29      	ldr	r2, [pc, #164]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000cc6:	f043 0308 	orr.w	r3, r3, #8
 8000cca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ccc:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <HAL_SD_MspInit+0x144>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cea:	230c      	movs	r3, #12
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	481e      	ldr	r0, [pc, #120]	; (8000d70 <HAL_SD_MspInit+0x148>)
 8000cf6:	f001 fa3f 	bl	8002178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8000cfa:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4817      	ldr	r0, [pc, #92]	; (8000d74 <HAL_SD_MspInit+0x14c>)
 8000d18:	f001 fa2e 	bl	8002178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	480f      	ldr	r0, [pc, #60]	; (8000d78 <HAL_SD_MspInit+0x150>)
 8000d3a:	f001 fa1d 	bl	8002178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d4e:	230c      	movs	r3, #12
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4808      	ldr	r0, [pc, #32]	; (8000d7c <HAL_SD_MspInit+0x154>)
 8000d5a:	f001 fa0d 	bl	8002178 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3730      	adds	r7, #48	; 0x30
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40012c00 	.word	0x40012c00
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020400 	.word	0x40020400
 8000d74:	40020800 	.word	0x40020800
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	40020c00 	.word	0x40020c00

08000d80 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_SPI1_Init+0x64>)
 8000d86:	4a18      	ldr	r2, [pc, #96]	; (8000de8 <MX_SPI1_Init+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_SPI1_Init+0x64>)
 8000d8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_SPI1_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_SPI1_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_SPI1_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_SPI1_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_SPI1_Init+0x64>)
 8000dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_SPI1_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_SPI1_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_SPI1_Init+0x64>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_SPI1_Init+0x64>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_SPI1_Init+0x64>)
 8000dcc:	220a      	movs	r2, #10
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_SPI1_Init+0x64>)
 8000dd2:	f003 f9bf 	bl	8004154 <HAL_SPI_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ddc:	f7ff ff00 	bl	8000be0 <Error_Handler>
  }

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200018d0 	.word	0x200018d0
 8000de8:	40013000 	.word	0x40013000

08000dec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <HAL_SPI_MspInit+0x84>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d12b      	bne.n	8000e66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <HAL_SPI_MspInit+0x88>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <HAL_SPI_MspInit+0x88>)
 8000e18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_SPI_MspInit+0x88>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_SPI_MspInit+0x88>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <HAL_SPI_MspInit+0x88>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_SPI_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e46:	23e0      	movs	r3, #224	; 0xe0
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e56:	2305      	movs	r3, #5
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_SPI_MspInit+0x8c>)
 8000e62:	f001 f989 	bl	8002178 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e66:	bf00      	nop
 8000e68:	3728      	adds	r7, #40	; 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40013000 	.word	0x40013000
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 f968 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	getTasks()->canHandle(&bus1);
 8000f24:	f004 ff2c 	bl	8005d80 <getTasks>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <CAN1_RX0_IRQHandler+0x1c>)
 8000f2e:	4798      	blx	r3
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <CAN1_RX0_IRQHandler+0x20>)
 8000f32:	f000 fddc 	bl	8001aee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20001568 	.word	0x20001568
 8000f40:	20001154 	.word	0x20001154

08000f44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM6_DAC_IRQHandler+0x10>)
 8000f4a:	f003 f9b6 	bl	80042ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20001928 	.word	0x20001928

08000f58 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	getTasks()->canHandle(&bus2);
 8000f5c:	f004 ff10 	bl	8005d80 <getTasks>
 8000f60:	4603      	mov	r3, r0
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <CAN2_RX0_IRQHandler+0x1c>)
 8000f66:	4798      	blx	r3
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <CAN2_RX0_IRQHandler+0x20>)
 8000f6a:	f000 fdc0 	bl	8001aee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000117c 	.word	0x2000117c
 8000f78:	2000112c 	.word	0x2000112c

08000f7c <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupts.
  */
void CAN3_RX0_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */
	getTasks()->canHandle(&bus3);
 8000f80:	f004 fefe 	bl	8005d80 <getTasks>
 8000f84:	4603      	mov	r3, r0
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <CAN3_RX0_IRQHandler+0x1c>)
 8000f8a:	4798      	blx	r3
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <CAN3_RX0_IRQHandler+0x20>)
 8000f8e:	f000 fdae 	bl	8001aee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200017d0 	.word	0x200017d0
 8000f9c:	20001104 	.word	0x20001104

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f008 fb10 	bl	80095f4 <__errno>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20050000 	.word	0x20050000
 8001000:	00000400 	.word	0x00000400
 8001004:	2000008c 	.word	0x2000008c
 8001008:	20004be0 	.word	0x20004be0

0800100c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <SystemInit+0x28>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <SystemInit+0x28>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <SystemInit+0x28>)
 8001022:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001026:	609a      	str	r2, [r3, #8]
#endif
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_TIM6_Init+0x64>)
 8001048:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <MX_TIM6_Init+0x68>)
 800104a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 96 -1;
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_TIM6_Init+0x64>)
 800104e:	225f      	movs	r2, #95	; 0x5f
 8001050:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_TIM6_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_TIM6_Init+0x64>)
 800105a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800105e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_TIM6_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_TIM6_Init+0x64>)
 8001068:	f003 f8d8 	bl	800421c <HAL_TIM_Base_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001072:	f7ff fdb5 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <MX_TIM6_Init+0x64>)
 8001084:	f003 faea 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800108e:	f7ff fda7 	bl	8000be0 <Error_Handler>
  }

}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20001928 	.word	0x20001928
 80010a0:	40001000 	.word	0x40001000

080010a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <HAL_TIM_Base_MspInit+0x48>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d115      	bne.n	80010e2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <HAL_TIM_Base_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <HAL_TIM_Base_MspInit+0x4c>)
 80010c0:	f043 0310 	orr.w	r3, r3, #16
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_TIM_Base_MspInit+0x4c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 0310 	and.w	r3, r3, #16
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2036      	movs	r0, #54	; 0x36
 80010d8:	f001 f817 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010dc:	2036      	movs	r0, #54	; 0x36
 80010de:	f001 f830 	bl	8002142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40001000 	.word	0x40001000
 80010f0:	40023800 	.word	0x40023800

080010f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800112c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80010f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010fa:	e003      	b.n	8001104 <LoopCopyDataInit>

080010fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001100:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001102:	3104      	adds	r1, #4

08001104 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001108:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800110a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800110c:	d3f6      	bcc.n	80010fc <CopyDataInit>
  ldr  r2, =_sbss
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001110:	e002      	b.n	8001118 <LoopFillZerobss>

08001112 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001112:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001114:	f842 3b04 	str.w	r3, [r2], #4

08001118 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800111a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800111c:	d3f9      	bcc.n	8001112 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800111e:	f7ff ff75 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001122:	f008 fa6d 	bl	8009600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001126:	f7ff fc6b 	bl	8000a00 <main>
  bx  lr    
 800112a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800112c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001130:	0800a1f8 	.word	0x0800a1f8
  ldr  r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001138:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800113c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001140:	20004be0 	.word	0x20004be0

08001144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC_IRQHandler>
	...

08001148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <HAL_Init+0x40>)
 8001152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_Init+0x40>)
 800115e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_Init+0x40>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 ffbf 	bl	80020f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f808 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f7ff fe7e 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023c00 	.word	0x40023c00

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x54>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x58>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 ffd7 	bl	800215e <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00e      	b.n	80011d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d80a      	bhi.n	80011d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f000 ff9f 	bl	800210a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011cc:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <HAL_InitTick+0x5c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e000      	b.n	80011d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000004 	.word	0x20000004

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	20001968 	.word	0x20001968

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20001968 	.word	0x20001968

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff ffee 	bl	8001214 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_Delay+0x40>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffde 	bl	8001214 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000008 	.word	0x20000008

08001270 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e0ed      	b.n	800145e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fa38 	bl	8000704 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0202 	bic.w	r2, r2, #2
 80012a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a4:	f7ff ffb6 	bl	8001214 <HAL_GetTick>
 80012a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012aa:	e012      	b.n	80012d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012ac:	f7ff ffb2 	bl	8001214 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b0a      	cmp	r3, #10
 80012b8:	d90b      	bls.n	80012d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2205      	movs	r2, #5
 80012ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e0c5      	b.n	800145e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1e5      	bne.n	80012ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0201 	orr.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012f0:	f7ff ff90 	bl	8001214 <HAL_GetTick>
 80012f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012f6:	e012      	b.n	800131e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012f8:	f7ff ff8c 	bl	8001214 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b0a      	cmp	r3, #10
 8001304:	d90b      	bls.n	800131e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2205      	movs	r2, #5
 8001316:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e09f      	b.n	800145e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0e5      	beq.n	80012f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7e1b      	ldrb	r3, [r3, #24]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d108      	bne.n	8001346 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	e007      	b.n	8001356 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7e5b      	ldrb	r3, [r3, #25]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d108      	bne.n	8001370 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	e007      	b.n	8001380 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800137e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7e9b      	ldrb	r3, [r3, #26]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d108      	bne.n	800139a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0220 	orr.w	r2, r2, #32
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e007      	b.n	80013aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0220 	bic.w	r2, r2, #32
 80013a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7edb      	ldrb	r3, [r3, #27]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d108      	bne.n	80013c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0210 	bic.w	r2, r2, #16
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	e007      	b.n	80013d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0210 	orr.w	r2, r2, #16
 80013d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7f1b      	ldrb	r3, [r3, #28]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d108      	bne.n	80013ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0208 	orr.w	r2, r2, #8
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e007      	b.n	80013fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0208 	bic.w	r2, r2, #8
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7f5b      	ldrb	r3, [r3, #29]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d108      	bne.n	8001418 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f042 0204 	orr.w	r2, r2, #4
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e007      	b.n	8001428 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0204 	bic.w	r2, r2, #4
 8001426:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	ea42 0103 	orr.w	r1, r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	1e5a      	subs	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001480:	7cfb      	ldrb	r3, [r7, #19]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d003      	beq.n	800148e <HAL_CAN_ConfigFilter+0x26>
 8001486:	7cfb      	ldrb	r3, [r7, #19]
 8001488:	2b02      	cmp	r3, #2
 800148a:	f040 80c7 	bne.w	800161c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a69      	ldr	r2, [pc, #420]	; (8001638 <HAL_CAN_ConfigFilter+0x1d0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d001      	beq.n	800149c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001498:	4b68      	ldr	r3, [pc, #416]	; (800163c <HAL_CAN_ConfigFilter+0x1d4>)
 800149a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014a2:	f043 0201 	orr.w	r2, r3, #1
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	4a63      	ldr	r2, [pc, #396]	; (800163c <HAL_CAN_ConfigFilter+0x1d4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d111      	bne.n	80014d8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014ba:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	431a      	orrs	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	2201      	movs	r2, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d123      	bne.n	800154a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43db      	mvns	r3, r3
 800150c:	401a      	ands	r2, r3
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001524:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3248      	adds	r2, #72	; 0x48
 800152a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800153e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001540:	6979      	ldr	r1, [r7, #20]
 8001542:	3348      	adds	r3, #72	; 0x48
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d122      	bne.n	8001598 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	431a      	orrs	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001572:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3248      	adds	r2, #72	; 0x48
 8001578:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800158c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800158e:	6979      	ldr	r1, [r7, #20]
 8001590:	3348      	adds	r3, #72	; 0x48
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d109      	bne.n	80015b4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015b2:	e007      	b.n	80015c4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	431a      	orrs	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80015de:	e007      	b.n	80015f0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d107      	bne.n	8001608 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	431a      	orrs	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800160e:	f023 0201 	bic.w	r2, r3, #1
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	e006      	b.n	800162a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
  }
}
 800162a:	4618      	mov	r0, r3
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40006c00 	.word	0x40006c00
 800163c:	40006400 	.word	0x40006400

08001640 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b01      	cmp	r3, #1
 8001652:	d12e      	bne.n	80016b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2202      	movs	r2, #2
 8001658:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800166c:	f7ff fdd2 	bl	8001214 <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001672:	e012      	b.n	800169a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001674:	f7ff fdce 	bl	8001214 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b0a      	cmp	r3, #10
 8001680:	d90b      	bls.n	800169a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2205      	movs	r2, #5
 8001692:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e012      	b.n	80016c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1e5      	bne.n	8001674 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e006      	b.n	80016c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
  }
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016e6:	7ffb      	ldrb	r3, [r7, #31]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d003      	beq.n	80016f4 <HAL_CAN_AddTxMessage+0x2c>
 80016ec:	7ffb      	ldrb	r3, [r7, #31]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	f040 80b8 	bne.w	8001864 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10a      	bne.n	8001714 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80a0 	beq.w	8001854 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	0e1b      	lsrs	r3, r3, #24
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d907      	bls.n	8001734 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e09e      	b.n	8001872 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001734:	2201      	movs	r2, #1
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	409a      	lsls	r2, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10d      	bne.n	8001762 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001750:	68f9      	ldr	r1, [r7, #12]
 8001752:	6809      	ldr	r1, [r1, #0]
 8001754:	431a      	orrs	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3318      	adds	r3, #24
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	440b      	add	r3, r1
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	e00f      	b.n	8001782 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800176c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001772:	68f9      	ldr	r1, [r7, #12]
 8001774:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001776:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3318      	adds	r3, #24
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	440b      	add	r3, r1
 8001780:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6819      	ldr	r1, [r3, #0]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	691a      	ldr	r2, [r3, #16]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3318      	adds	r3, #24
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	440b      	add	r3, r1
 8001792:	3304      	adds	r3, #4
 8001794:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	7d1b      	ldrb	r3, [r3, #20]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d111      	bne.n	80017c2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3318      	adds	r3, #24
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	4413      	add	r3, r2
 80017aa:	3304      	adds	r3, #4
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	6811      	ldr	r1, [r2, #0]
 80017b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3318      	adds	r3, #24
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	440b      	add	r3, r1
 80017be:	3304      	adds	r3, #4
 80017c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3307      	adds	r3, #7
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	061a      	lsls	r2, r3, #24
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3306      	adds	r3, #6
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3305      	adds	r3, #5
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	4313      	orrs	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	3204      	adds	r2, #4
 80017e2:	7812      	ldrb	r2, [r2, #0]
 80017e4:	4610      	mov	r0, r2
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	6811      	ldr	r1, [r2, #0]
 80017ea:	ea43 0200 	orr.w	r2, r3, r0
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	440b      	add	r3, r1
 80017f4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80017f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3303      	adds	r3, #3
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	061a      	lsls	r2, r3, #24
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3302      	adds	r3, #2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	041b      	lsls	r3, r3, #16
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3301      	adds	r3, #1
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	4313      	orrs	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	4610      	mov	r0, r2
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	6811      	ldr	r1, [r2, #0]
 8001820:	ea43 0200 	orr.w	r2, r3, r0
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	440b      	add	r3, r1
 800182a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800182e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3318      	adds	r3, #24
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	4413      	add	r3, r2
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	6811      	ldr	r1, [r2, #0]
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3318      	adds	r3, #24
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	440b      	add	r3, r1
 800184e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	e00e      	b.n	8001872 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e006      	b.n	8001872 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
  }
}
 8001872:	4618      	mov	r0, r3
 8001874:	3724      	adds	r7, #36	; 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800187e:	b480      	push	{r7}
 8001880:	b087      	sub	sp, #28
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001892:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d003      	beq.n	80018a2 <HAL_CAN_GetRxMessage+0x24>
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	2b02      	cmp	r3, #2
 800189e:	f040 80f3 	bne.w	8001a88 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10e      	bne.n	80018c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d116      	bne.n	80018e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0e7      	b.n	8001a96 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d107      	bne.n	80018e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0d8      	b.n	8001a96 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	331b      	adds	r3, #27
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	4413      	add	r3, r2
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0204 	and.w	r2, r3, #4
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10c      	bne.n	800191c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	331b      	adds	r3, #27
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	4413      	add	r3, r2
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0d5b      	lsrs	r3, r3, #21
 8001912:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e00b      	b.n	8001934 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	331b      	adds	r3, #27
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	4413      	add	r3, r2
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	08db      	lsrs	r3, r3, #3
 800192c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	331b      	adds	r3, #27
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	4413      	add	r3, r2
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0202 	and.w	r2, r3, #2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	331b      	adds	r3, #27
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	4413      	add	r3, r2
 8001956:	3304      	adds	r3, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 020f 	and.w	r2, r3, #15
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	331b      	adds	r3, #27
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	4413      	add	r3, r2
 800196e:	3304      	adds	r3, #4
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	b2da      	uxtb	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	331b      	adds	r3, #27
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	4413      	add	r3, r2
 8001986:	3304      	adds	r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0c1b      	lsrs	r3, r3, #16
 800198c:	b29a      	uxth	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	4413      	add	r3, r2
 800199c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0a1a      	lsrs	r2, r3, #8
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	0c1a      	lsrs	r2, r3, #16
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	3302      	adds	r3, #2
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0e1a      	lsrs	r2, r3, #24
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	3303      	adds	r3, #3
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	4413      	add	r3, r2
 8001a00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0a1a      	lsrs	r2, r3, #8
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	3305      	adds	r3, #5
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0c1a      	lsrs	r2, r3, #16
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	3306      	adds	r3, #6
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0e1a      	lsrs	r2, r3, #24
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	3307      	adds	r3, #7
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d108      	bne.n	8001a74 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0220 	orr.w	r2, r2, #32
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	e007      	b.n	8001a84 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0220 	orr.w	r2, r2, #32
 8001a82:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e006      	b.n	8001a96 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
  }
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b085      	sub	sp, #20
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d002      	beq.n	8001ac0 <HAL_CAN_ActivateNotification+0x1e>
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d109      	bne.n	8001ad4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6959      	ldr	r1, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e006      	b.n	8001ae2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
  }
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b08a      	sub	sp, #40	; 0x28
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d07c      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d023      	beq.n	8001b86 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2201      	movs	r2, #1
 8001b44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f97d 	bl	8001e50 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b56:	e016      	b.n	8001b86 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6a:	e00c      	b.n	8001b86 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7e:	e002      	b.n	8001b86 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f983 	bl	8001e8c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d024      	beq.n	8001bda <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f95d 	bl	8001e64 <HAL_CAN_TxMailbox1CompleteCallback>
 8001baa:	e016      	b.n	8001bda <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d004      	beq.n	8001bc0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbe:	e00c      	b.n	8001bda <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d004      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd2:	e002      	b.n	8001bda <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f963 	bl	8001ea0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d024      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f93d 	bl	8001e78 <HAL_CAN_TxMailbox2CompleteCallback>
 8001bfe:	e016      	b.n	8001c2e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d004      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
 8001c12:	e00c      	b.n	8001c2e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d004      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
 8001c26:	e002      	b.n	8001c2e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f943 	bl	8001eb4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00c      	beq.n	8001c52 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2210      	movs	r2, #16
 8001c50:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00b      	beq.n	8001c74 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d006      	beq.n	8001c74 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f934 	bl	8001edc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f91b 	bl	8001ec8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00c      	beq.n	8001cb6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00b      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2208      	movs	r2, #8
 8001cd0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f916 	bl	8001f04 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f8fd 	bl	8001ef0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00b      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d006      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2210      	movs	r2, #16
 8001d10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f900 	bl	8001f18 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2208      	movs	r2, #8
 8001d32:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8f9 	bl	8001f2c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d075      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d06c      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d03d      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d038      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dbc:	2b30      	cmp	r3, #48	; 0x30
 8001dbe:	d017      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x302>
 8001dc0:	2b30      	cmp	r3, #48	; 0x30
 8001dc2:	d804      	bhi.n	8001dce <HAL_CAN_IRQHandler+0x2e0>
 8001dc4:	2b10      	cmp	r3, #16
 8001dc6:	d009      	beq.n	8001ddc <HAL_CAN_IRQHandler+0x2ee>
 8001dc8:	2b20      	cmp	r3, #32
 8001dca:	d00c      	beq.n	8001de6 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001dcc:	e024      	b.n	8001e18 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001dce:	2b50      	cmp	r3, #80	; 0x50
 8001dd0:	d018      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x316>
 8001dd2:	2b60      	cmp	r3, #96	; 0x60
 8001dd4:	d01b      	beq.n	8001e0e <HAL_CAN_IRQHandler+0x320>
 8001dd6:	2b40      	cmp	r3, #64	; 0x40
 8001dd8:	d00f      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x30c>
            break;
 8001dda:	e01d      	b.n	8001e18 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001de4:	e018      	b.n	8001e18 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	f043 0310 	orr.w	r3, r3, #16
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dee:	e013      	b.n	8001e18 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	f043 0320 	orr.w	r3, r3, #32
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001df8:	e00e      	b.n	8001e18 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e02:	e009      	b.n	8001e18 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e0c:	e004      	b.n	8001e18 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e16:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e26:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f87c 	bl	8001f40 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3728      	adds	r7, #40	; 0x28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4907      	ldr	r1, [pc, #28]	; (8001ff0 <__NVIC_EnableIRQ+0x38>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	; (8002040 <__NVIC_SetPriority+0x4c>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4908      	ldr	r1, [pc, #32]	; (8002044 <__NVIC_SetPriority+0x50>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	f04f 32ff 	mov.w	r2, #4294967295
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43d9      	mvns	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
         );
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c0:	d301      	bcc.n	80020c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00f      	b.n	80020e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <SysTick_Config+0x40>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ce:	210f      	movs	r1, #15
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	f7ff ff8e 	bl	8001ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <SysTick_Config+0x40>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <SysTick_Config+0x40>)
 80020e0:	2207      	movs	r2, #7
 80020e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	e000e010 	.word	0xe000e010

080020f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff29 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800211c:	f7ff ff3e 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 8002120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7ff ff8e 	bl	8002048 <NVIC_EncodePriority>
 800212c:	4602      	mov	r2, r0
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff5d 	bl	8001ff4 <__NVIC_SetPriority>
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff31 	bl	8001fb8 <__NVIC_EnableIRQ>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffa2 	bl	80020b0 <SysTick_Config>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	; 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	e165      	b.n	8002460 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002194:	2201      	movs	r2, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	f040 8154 	bne.w	800245a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d00b      	beq.n	80021d2 <HAL_GPIO_Init+0x5a>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d007      	beq.n	80021d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c6:	2b11      	cmp	r3, #17
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b12      	cmp	r3, #18
 80021d0:	d130      	bne.n	8002234 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 0201 	and.w	r2, r3, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0xfc>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b12      	cmp	r3, #18
 8002272:	d123      	bne.n	80022bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	08da      	lsrs	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3208      	adds	r2, #8
 800227c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	220f      	movs	r2, #15
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	08da      	lsrs	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3208      	adds	r2, #8
 80022b6:	69b9      	ldr	r1, [r7, #24]
 80022b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0203 	and.w	r2, r3, #3
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80ae 	beq.w	800245a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b5c      	ldr	r3, [pc, #368]	; (8002474 <HAL_GPIO_Init+0x2fc>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	4a5b      	ldr	r2, [pc, #364]	; (8002474 <HAL_GPIO_Init+0x2fc>)
 8002308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800230c:	6453      	str	r3, [r2, #68]	; 0x44
 800230e:	4b59      	ldr	r3, [pc, #356]	; (8002474 <HAL_GPIO_Init+0x2fc>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800231a:	4a57      	ldr	r2, [pc, #348]	; (8002478 <HAL_GPIO_Init+0x300>)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	3302      	adds	r3, #2
 8002322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	220f      	movs	r2, #15
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4e      	ldr	r2, [pc, #312]	; (800247c <HAL_GPIO_Init+0x304>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d025      	beq.n	8002392 <HAL_GPIO_Init+0x21a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4d      	ldr	r2, [pc, #308]	; (8002480 <HAL_GPIO_Init+0x308>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d01f      	beq.n	800238e <HAL_GPIO_Init+0x216>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4c      	ldr	r2, [pc, #304]	; (8002484 <HAL_GPIO_Init+0x30c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d019      	beq.n	800238a <HAL_GPIO_Init+0x212>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4b      	ldr	r2, [pc, #300]	; (8002488 <HAL_GPIO_Init+0x310>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_GPIO_Init+0x20e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4a      	ldr	r2, [pc, #296]	; (800248c <HAL_GPIO_Init+0x314>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00d      	beq.n	8002382 <HAL_GPIO_Init+0x20a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a49      	ldr	r2, [pc, #292]	; (8002490 <HAL_GPIO_Init+0x318>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d007      	beq.n	800237e <HAL_GPIO_Init+0x206>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a48      	ldr	r2, [pc, #288]	; (8002494 <HAL_GPIO_Init+0x31c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d101      	bne.n	800237a <HAL_GPIO_Init+0x202>
 8002376:	2306      	movs	r3, #6
 8002378:	e00c      	b.n	8002394 <HAL_GPIO_Init+0x21c>
 800237a:	2307      	movs	r3, #7
 800237c:	e00a      	b.n	8002394 <HAL_GPIO_Init+0x21c>
 800237e:	2305      	movs	r3, #5
 8002380:	e008      	b.n	8002394 <HAL_GPIO_Init+0x21c>
 8002382:	2304      	movs	r3, #4
 8002384:	e006      	b.n	8002394 <HAL_GPIO_Init+0x21c>
 8002386:	2303      	movs	r3, #3
 8002388:	e004      	b.n	8002394 <HAL_GPIO_Init+0x21c>
 800238a:	2302      	movs	r3, #2
 800238c:	e002      	b.n	8002394 <HAL_GPIO_Init+0x21c>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_GPIO_Init+0x21c>
 8002392:	2300      	movs	r3, #0
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	f002 0203 	and.w	r2, r2, #3
 800239a:	0092      	lsls	r2, r2, #2
 800239c:	4093      	lsls	r3, r2
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a4:	4934      	ldr	r1, [pc, #208]	; (8002478 <HAL_GPIO_Init+0x300>)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	3302      	adds	r3, #2
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b2:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_GPIO_Init+0x320>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d6:	4a30      	ldr	r2, [pc, #192]	; (8002498 <HAL_GPIO_Init+0x320>)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023dc:	4b2e      	ldr	r3, [pc, #184]	; (8002498 <HAL_GPIO_Init+0x320>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002400:	4a25      	ldr	r2, [pc, #148]	; (8002498 <HAL_GPIO_Init+0x320>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <HAL_GPIO_Init+0x320>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800242a:	4a1b      	ldr	r2, [pc, #108]	; (8002498 <HAL_GPIO_Init+0x320>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_GPIO_Init+0x320>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002454:	4a10      	ldr	r2, [pc, #64]	; (8002498 <HAL_GPIO_Init+0x320>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3301      	adds	r3, #1
 800245e:	61fb      	str	r3, [r7, #28]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b0f      	cmp	r3, #15
 8002464:	f67f ae96 	bls.w	8002194 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002468:	bf00      	nop
 800246a:	3724      	adds	r7, #36	; 0x24
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40023800 	.word	0x40023800
 8002478:	40013800 	.word	0x40013800
 800247c:	40020000 	.word	0x40020000
 8002480:	40020400 	.word	0x40020400
 8002484:	40020800 	.word	0x40020800
 8002488:	40020c00 	.word	0x40020c00
 800248c:	40021000 	.word	0x40021000
 8002490:	40021400 	.word	0x40021400
 8002494:	40021800 	.word	0x40021800
 8002498:	40013c00 	.word	0x40013c00

0800249c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
 80024a8:	4613      	mov	r3, r2
 80024aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ac:	787b      	ldrb	r3, [r7, #1]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b8:	e003      	b.n	80024c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ba:	887b      	ldrh	r3, [r7, #2]
 80024bc:	041a      	lsls	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	619a      	str	r2, [r3, #24]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	401a      	ands	r2, r3
 80024e2:	887b      	ldrh	r3, [r7, #2]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d104      	bne.n	80024f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024e8:	887b      	ldrh	r3, [r7, #2]
 80024ea:	041a      	lsls	r2, r3, #16
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80024f0:	e002      	b.n	80024f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	619a      	str	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0cc      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002518:	4b68      	ldr	r3, [pc, #416]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d90c      	bls.n	8002540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b65      	ldr	r3, [pc, #404]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b63      	ldr	r3, [pc, #396]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0b8      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002558:	4b59      	ldr	r3, [pc, #356]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a58      	ldr	r2, [pc, #352]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002562:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002570:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a52      	ldr	r2, [pc, #328]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800257a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	494d      	ldr	r1, [pc, #308]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d044      	beq.n	8002624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d119      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e07f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d003      	beq.n	80025c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c2:	4b3f      	ldr	r3, [pc, #252]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d2:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e067      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e2:	4b37      	ldr	r3, [pc, #220]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f023 0203 	bic.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4934      	ldr	r1, [pc, #208]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f4:	f7fe fe0e 	bl	8001214 <HAL_GetTick>
 80025f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fc:	f7fe fe0a 	bl	8001214 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	; 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e04f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 020c 	and.w	r2, r3, #12
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	429a      	cmp	r2, r3
 8002622:	d1eb      	bne.n	80025fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d20c      	bcs.n	800264c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b22      	ldr	r3, [pc, #136]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e032      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4916      	ldr	r1, [pc, #88]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	490e      	ldr	r1, [pc, #56]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800268a:	f000 f821 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 800268e:	4601      	mov	r1, r0
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	5cd3      	ldrb	r3, [r2, r3]
 800269e:	fa21 f303 	lsr.w	r3, r1, r3
 80026a2:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fd6e 	bl	800118c <HAL_InitTick>

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023c00 	.word	0x40023c00
 80026c0:	40023800 	.word	0x40023800
 80026c4:	0800a110 	.word	0x0800a110
 80026c8:	20000000 	.word	0x20000000
 80026cc:	20000004 	.word	0x20000004

080026d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e6:	4b63      	ldr	r3, [pc, #396]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d007      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x32>
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d008      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x38>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 80b4 	bne.w	8002864 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026fc:	4b5e      	ldr	r3, [pc, #376]	; (8002878 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026fe:	60bb      	str	r3, [r7, #8]
       break;
 8002700:	e0b3      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002702:	4b5e      	ldr	r3, [pc, #376]	; (800287c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002704:	60bb      	str	r3, [r7, #8]
      break;
 8002706:	e0b0      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002708:	4b5a      	ldr	r3, [pc, #360]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002710:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002712:	4b58      	ldr	r3, [pc, #352]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d04a      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271e:	4b55      	ldr	r3, [pc, #340]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	099b      	lsrs	r3, r3, #6
 8002724:	f04f 0400 	mov.w	r4, #0
 8002728:	f240 11ff 	movw	r1, #511	; 0x1ff
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	ea03 0501 	and.w	r5, r3, r1
 8002734:	ea04 0602 	and.w	r6, r4, r2
 8002738:	4629      	mov	r1, r5
 800273a:	4632      	mov	r2, r6
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	f04f 0400 	mov.w	r4, #0
 8002744:	0154      	lsls	r4, r2, #5
 8002746:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800274a:	014b      	lsls	r3, r1, #5
 800274c:	4619      	mov	r1, r3
 800274e:	4622      	mov	r2, r4
 8002750:	1b49      	subs	r1, r1, r5
 8002752:	eb62 0206 	sbc.w	r2, r2, r6
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	f04f 0400 	mov.w	r4, #0
 800275e:	0194      	lsls	r4, r2, #6
 8002760:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002764:	018b      	lsls	r3, r1, #6
 8002766:	1a5b      	subs	r3, r3, r1
 8002768:	eb64 0402 	sbc.w	r4, r4, r2
 800276c:	f04f 0100 	mov.w	r1, #0
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	00e2      	lsls	r2, r4, #3
 8002776:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800277a:	00d9      	lsls	r1, r3, #3
 800277c:	460b      	mov	r3, r1
 800277e:	4614      	mov	r4, r2
 8002780:	195b      	adds	r3, r3, r5
 8002782:	eb44 0406 	adc.w	r4, r4, r6
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	0262      	lsls	r2, r4, #9
 8002790:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002794:	0259      	lsls	r1, r3, #9
 8002796:	460b      	mov	r3, r1
 8002798:	4614      	mov	r4, r2
 800279a:	4618      	mov	r0, r3
 800279c:	4621      	mov	r1, r4
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f04f 0400 	mov.w	r4, #0
 80027a4:	461a      	mov	r2, r3
 80027a6:	4623      	mov	r3, r4
 80027a8:	f7fd fd8a 	bl	80002c0 <__aeabi_uldivmod>
 80027ac:	4603      	mov	r3, r0
 80027ae:	460c      	mov	r4, r1
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	e049      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b4:	4b2f      	ldr	r3, [pc, #188]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	099b      	lsrs	r3, r3, #6
 80027ba:	f04f 0400 	mov.w	r4, #0
 80027be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	ea03 0501 	and.w	r5, r3, r1
 80027ca:	ea04 0602 	and.w	r6, r4, r2
 80027ce:	4629      	mov	r1, r5
 80027d0:	4632      	mov	r2, r6
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	f04f 0400 	mov.w	r4, #0
 80027da:	0154      	lsls	r4, r2, #5
 80027dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027e0:	014b      	lsls	r3, r1, #5
 80027e2:	4619      	mov	r1, r3
 80027e4:	4622      	mov	r2, r4
 80027e6:	1b49      	subs	r1, r1, r5
 80027e8:	eb62 0206 	sbc.w	r2, r2, r6
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	f04f 0400 	mov.w	r4, #0
 80027f4:	0194      	lsls	r4, r2, #6
 80027f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027fa:	018b      	lsls	r3, r1, #6
 80027fc:	1a5b      	subs	r3, r3, r1
 80027fe:	eb64 0402 	sbc.w	r4, r4, r2
 8002802:	f04f 0100 	mov.w	r1, #0
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	00e2      	lsls	r2, r4, #3
 800280c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002810:	00d9      	lsls	r1, r3, #3
 8002812:	460b      	mov	r3, r1
 8002814:	4614      	mov	r4, r2
 8002816:	195b      	adds	r3, r3, r5
 8002818:	eb44 0406 	adc.w	r4, r4, r6
 800281c:	f04f 0100 	mov.w	r1, #0
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	02a2      	lsls	r2, r4, #10
 8002826:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800282a:	0299      	lsls	r1, r3, #10
 800282c:	460b      	mov	r3, r1
 800282e:	4614      	mov	r4, r2
 8002830:	4618      	mov	r0, r3
 8002832:	4621      	mov	r1, r4
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f04f 0400 	mov.w	r4, #0
 800283a:	461a      	mov	r2, r3
 800283c:	4623      	mov	r3, r4
 800283e:	f7fd fd3f 	bl	80002c0 <__aeabi_uldivmod>
 8002842:	4603      	mov	r3, r0
 8002844:	460c      	mov	r4, r1
 8002846:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	3301      	adds	r3, #1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	60bb      	str	r3, [r7, #8]
      break;
 8002862:	e002      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002866:	60bb      	str	r3, [r7, #8]
      break;
 8002868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800286a:	68bb      	ldr	r3, [r7, #8]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002874:	40023800 	.word	0x40023800
 8002878:	00f42400 	.word	0x00f42400
 800287c:	007a1200 	.word	0x007a1200

08002880 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d010      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80028a4:	4b7a      	ldr	r3, [pc, #488]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80028a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028aa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4977      	ldr	r1, [pc, #476]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80028c2:	2301      	movs	r3, #1
 80028c4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d010      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80028d2:	4b6f      	ldr	r3, [pc, #444]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80028d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028d8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	496b      	ldr	r1, [pc, #428]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80028f0:	2301      	movs	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d022      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8002900:	4b63      	ldr	r3, [pc, #396]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002906:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290e:	4960      	ldr	r1, [pc, #384]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800291e:	2301      	movs	r3, #1
 8002920:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800292a:	d10c      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800292c:	4b58      	ldr	r3, [pc, #352]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800292e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002932:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	3b01      	subs	r3, #1
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	4954      	ldr	r1, [pc, #336]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d022      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8002952:	4b4f      	ldr	r3, [pc, #316]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002958:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002960:	494b      	ldr	r1, [pc, #300]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002970:	2301      	movs	r3, #1
 8002972:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002978:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800297c:	d10c      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800297e:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002984:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	3b01      	subs	r3, #1
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	493f      	ldr	r1, [pc, #252]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 808a 	beq.w	8002aba <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	4a38      	ldr	r2, [pc, #224]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b4:	6413      	str	r3, [r2, #64]	; 0x40
 80029b6:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80029c2:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a33      	ldr	r2, [pc, #204]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029ce:	f7fe fc21 	bl	8001214 <HAL_GetTick>
 80029d2:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029d6:	f7fe fc1d 	bl	8001214 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e1d1      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029e8:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029f4:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fc:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d02f      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d028      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a12:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a1c:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a22:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a28:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d114      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fbeb 	bl	8001214 <HAL_GetTick>
 8002a3e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a42:	f7fe fbe7 	bl	8001214 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e199      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0ee      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a70:	d114      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002a72:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a86:	4902      	ldr	r1, [pc, #8]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	608b      	str	r3, [r1, #8]
 8002a8c:	e00c      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40007000 	.word	0x40007000
 8002a98:	42470e40 	.word	0x42470e40
 8002a9c:	4b89      	ldr	r3, [pc, #548]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a88      	ldr	r2, [pc, #544]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002aa2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002aa6:	6093      	str	r3, [r2, #8]
 8002aa8:	4b86      	ldr	r3, [pc, #536]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002aaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	4983      	ldr	r1, [pc, #524]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002acc:	4b7e      	ldr	r3, [pc, #504]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8002ace:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002adc:	4b79      	ldr	r3, [pc, #484]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	4976      	ldr	r1, [pc, #472]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d011      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002afe:	4b71      	ldr	r3, [pc, #452]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b04:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	496d      	ldr	r1, [pc, #436]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002b2e:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b34:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	4961      	ldr	r1, [pc, #388]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d004      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b80      	cmp	r3, #128	; 0x80
 8002b50:	f040 80c6 	bne.w	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b54:	4b5d      	ldr	r3, [pc, #372]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b5a:	f7fe fb5b 	bl	8001214 <HAL_GetTick>
 8002b5e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b62:	f7fe fb57 	bl	8001214 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e10b      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b74:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f0      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002b80:	4a53      	ldr	r2, [pc, #332]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b86:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d023      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d019      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d004      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bc4:	d00e      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d019      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d115      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002be2:	d110      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	019b      	lsls	r3, r3, #6
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	071b      	lsls	r3, r3, #28
 8002bfe:	4931      	ldr	r1, [pc, #196]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d026      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d122      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c2e:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c34:	0e1b      	lsrs	r3, r3, #24
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	019b      	lsls	r3, r3, #6
 8002c46:	431a      	orrs	r2, r3
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	061b      	lsls	r3, r3, #24
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	071b      	lsls	r3, r3, #28
 8002c54:	491b      	ldr	r1, [pc, #108]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c62:	f023 021f 	bic.w	r2, r3, #31
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	4915      	ldr	r1, [pc, #84]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d010      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	019b      	lsls	r3, r3, #6
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	071b      	lsls	r3, r3, #28
 8002c9a:	490a      	ldr	r1, [pc, #40]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe fab4 	bl	8001214 <HAL_GetTick>
 8002cac:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cae:	e011      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cb0:	f7fe fab0 	bl	8001214 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d90a      	bls.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e064      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	424711e0 	.word	0x424711e0
 8002ccc:	42470068 	.word	0x42470068
 8002cd0:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cd4:	4b2f      	ldr	r3, [pc, #188]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0e7      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cec:	4b29      	ldr	r3, [pc, #164]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfa:	4926      	ldr	r1, [pc, #152]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d14:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	491d      	ldr	r1, [pc, #116]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8002d30:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	4915      	ldr	r1, [pc, #84]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d58:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	490c      	ldr	r1, [pc, #48]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d74:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	4904      	ldr	r1, [pc, #16]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3720      	adds	r7, #32
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40023800 	.word	0x40023800

08002d98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d075      	beq.n	8002e9c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002db0:	4ba2      	ldr	r3, [pc, #648]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d00c      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dbc:	4b9f      	ldr	r3, [pc, #636]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d112      	bne.n	8002dee <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc8:	4b9c      	ldr	r3, [pc, #624]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd4:	d10b      	bne.n	8002dee <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd6:	4b99      	ldr	r3, [pc, #612]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d05b      	beq.n	8002e9a <HAL_RCC_OscConfig+0x102>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d157      	bne.n	8002e9a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e20b      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df6:	d106      	bne.n	8002e06 <HAL_RCC_OscConfig+0x6e>
 8002df8:	4b90      	ldr	r3, [pc, #576]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a8f      	ldr	r2, [pc, #572]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	e01d      	b.n	8002e42 <HAL_RCC_OscConfig+0xaa>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e0e:	d10c      	bne.n	8002e2a <HAL_RCC_OscConfig+0x92>
 8002e10:	4b8a      	ldr	r3, [pc, #552]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a89      	ldr	r2, [pc, #548]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b87      	ldr	r3, [pc, #540]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a86      	ldr	r2, [pc, #536]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	e00b      	b.n	8002e42 <HAL_RCC_OscConfig+0xaa>
 8002e2a:	4b84      	ldr	r3, [pc, #528]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a83      	ldr	r2, [pc, #524]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b81      	ldr	r3, [pc, #516]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a80      	ldr	r2, [pc, #512]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d013      	beq.n	8002e72 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4a:	f7fe f9e3 	bl	8001214 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e52:	f7fe f9df 	bl	8001214 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b64      	cmp	r3, #100	; 0x64
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e1d0      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e64:	4b75      	ldr	r3, [pc, #468]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0xba>
 8002e70:	e014      	b.n	8002e9c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e72:	f7fe f9cf 	bl	8001214 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e7a:	f7fe f9cb 	bl	8001214 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b64      	cmp	r3, #100	; 0x64
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e1bc      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8c:	4b6b      	ldr	r3, [pc, #428]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0xe2>
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d063      	beq.n	8002f70 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ea8:	4b64      	ldr	r3, [pc, #400]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00b      	beq.n	8002ecc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb4:	4b61      	ldr	r3, [pc, #388]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d11c      	bne.n	8002efa <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec0:	4b5e      	ldr	r3, [pc, #376]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d116      	bne.n	8002efa <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ecc:	4b5b      	ldr	r3, [pc, #364]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x14c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e190      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee4:	4b55      	ldr	r3, [pc, #340]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4952      	ldr	r1, [pc, #328]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef8:	e03a      	b.n	8002f70 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d020      	beq.n	8002f44 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f02:	4b4f      	ldr	r3, [pc, #316]	; (8003040 <HAL_RCC_OscConfig+0x2a8>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe f984 	bl	8001214 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f10:	f7fe f980 	bl	8001214 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e171      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f22:	4b46      	ldr	r3, [pc, #280]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2e:	4b43      	ldr	r3, [pc, #268]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	493f      	ldr	r1, [pc, #252]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]
 8002f42:	e015      	b.n	8002f70 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f44:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <HAL_RCC_OscConfig+0x2a8>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4a:	f7fe f963 	bl	8001214 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f52:	f7fe f95f 	bl	8001214 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e150      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f64:	4b35      	ldr	r3, [pc, #212]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f0      	bne.n	8002f52 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d030      	beq.n	8002fde <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d016      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f84:	4b2f      	ldr	r3, [pc, #188]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fe f943 	bl	8001214 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f92:	f7fe f93f 	bl	8001214 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e130      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa4:	4b25      	ldr	r3, [pc, #148]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x1fa>
 8002fb0:	e015      	b.n	8002fde <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe f92c 	bl	8001214 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7fe f928 	bl	8001214 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e119      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 809f 	beq.w	800312a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fec:	2300      	movs	r3, #0
 8002fee:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10f      	bne.n	800301c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	4a0d      	ldr	r2, [pc, #52]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 8003006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300a:	6413      	str	r3, [r2, #64]	; 0x40
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_OscConfig+0x2a4>)
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003018:	2301      	movs	r3, #1
 800301a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_RCC_OscConfig+0x2b0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d120      	bne.n	800306a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003028:	4b07      	ldr	r3, [pc, #28]	; (8003048 <HAL_RCC_OscConfig+0x2b0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a06      	ldr	r2, [pc, #24]	; (8003048 <HAL_RCC_OscConfig+0x2b0>)
 800302e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003032:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003034:	f7fe f8ee 	bl	8001214 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303a:	e010      	b.n	800305e <HAL_RCC_OscConfig+0x2c6>
 800303c:	40023800 	.word	0x40023800
 8003040:	42470000 	.word	0x42470000
 8003044:	42470e80 	.word	0x42470e80
 8003048:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304c:	f7fe f8e2 	bl	8001214 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e0d3      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b6c      	ldr	r3, [pc, #432]	; (8003210 <HAL_RCC_OscConfig+0x478>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x2e8>
 8003072:	4b68      	ldr	r3, [pc, #416]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	4a67      	ldr	r2, [pc, #412]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6713      	str	r3, [r2, #112]	; 0x70
 800307e:	e01c      	b.n	80030ba <HAL_RCC_OscConfig+0x322>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d10c      	bne.n	80030a2 <HAL_RCC_OscConfig+0x30a>
 8003088:	4b62      	ldr	r3, [pc, #392]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	4a61      	ldr	r2, [pc, #388]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 800308e:	f043 0304 	orr.w	r3, r3, #4
 8003092:	6713      	str	r3, [r2, #112]	; 0x70
 8003094:	4b5f      	ldr	r3, [pc, #380]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a5e      	ldr	r2, [pc, #376]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	e00b      	b.n	80030ba <HAL_RCC_OscConfig+0x322>
 80030a2:	4b5c      	ldr	r3, [pc, #368]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a5b      	ldr	r2, [pc, #364]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70
 80030ae:	4b59      	ldr	r3, [pc, #356]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a58      	ldr	r2, [pc, #352]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d015      	beq.n	80030ee <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c2:	f7fe f8a7 	bl	8001214 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fe f8a3 	bl	8001214 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e092      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e0:	4b4c      	ldr	r3, [pc, #304]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ee      	beq.n	80030ca <HAL_RCC_OscConfig+0x332>
 80030ec:	e014      	b.n	8003118 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fe f891 	bl	8001214 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f6:	f7fe f88d 	bl	8001214 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	; 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e07c      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310c:	4b41      	ldr	r3, [pc, #260]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ee      	bne.n	80030f6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003118:	7dfb      	ldrb	r3, [r7, #23]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	4a3c      	ldr	r2, [pc, #240]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003128:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d068      	beq.n	8003204 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003132:	4b38      	ldr	r3, [pc, #224]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b08      	cmp	r3, #8
 800313c:	d060      	beq.n	8003200 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d145      	bne.n	80031d2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b34      	ldr	r3, [pc, #208]	; (8003218 <HAL_RCC_OscConfig+0x480>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe f862 	bl	8001214 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe f85e 	bl	8001214 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e04f      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69da      	ldr	r2, [r3, #28]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	019b      	lsls	r3, r3, #6
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	085b      	lsrs	r3, r3, #1
 800318a:	3b01      	subs	r3, #1
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	071b      	lsls	r3, r3, #28
 800319e:	491d      	ldr	r1, [pc, #116]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a4:	4b1c      	ldr	r3, [pc, #112]	; (8003218 <HAL_RCC_OscConfig+0x480>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031aa:	f7fe f833 	bl	8001214 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b2:	f7fe f82f 	bl	8001214 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e020      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c4:	4b13      	ldr	r3, [pc, #76]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x41a>
 80031d0:	e018      	b.n	8003204 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d2:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_RCC_OscConfig+0x480>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe f81c 	bl	8001214 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e0:	f7fe f818 	bl	8001214 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e009      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <HAL_RCC_OscConfig+0x47c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x448>
 80031fe:	e001      	b.n	8003204 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40007000 	.word	0x40007000
 8003214:	40023800 	.word	0x40023800
 8003218:	42470060 	.word	0x42470060

0800321c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e022      	b.n	8003274 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7fd fcf1 	bl	8000c28 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2203      	movs	r2, #3
 800324a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f814 	bl	800327c <HAL_SD_InitCard>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e00a      	b.n	8003274 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800327c:	b5b0      	push	{r4, r5, r7, lr}
 800327e:	b08e      	sub	sp, #56	; 0x38
 8003280:	af04      	add	r7, sp, #16
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003298:	2376      	movs	r3, #118	; 0x76
 800329a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681d      	ldr	r5, [r3, #0]
 80032a0:	466c      	mov	r4, sp
 80032a2:	f107 0314 	add.w	r3, r7, #20
 80032a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032ae:	f107 0308 	add.w	r3, r7, #8
 80032b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032b4:	4628      	mov	r0, r5
 80032b6:	f001 fa61 	bl	800477c <SDIO_Init>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80032c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e031      	b.n	8003330 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80032cc:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <HAL_SD_InitCard+0xbc>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 fa99 	bl	800480e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80032dc:	4b16      	ldr	r3, [pc, #88]	; (8003338 <HAL_SD_InitCard+0xbc>)
 80032de:	2201      	movs	r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fe80 	bl	8003fe8 <SD_PowerON>
 80032e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00b      	beq.n	8003308 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e013      	b.n	8003330 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fd9f 	bl	8003e4c <SD_InitCard>
 800330e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3728      	adds	r7, #40	; 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	bdb0      	pop	{r4, r5, r7, pc}
 8003338:	422580a0 	.word	0x422580a0

0800333c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b092      	sub	sp, #72	; 0x48
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800334a:	f7fd ff63 	bl	8001214 <HAL_GetTick>
 800334e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d107      	bne.n	800336e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e1d7      	b.n	800371e <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	f040 81ca 	bne.w	8003710 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	441a      	add	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	429a      	cmp	r2, r3
 800338e:	d907      	bls.n	80033a0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e1be      	b.n	800371e <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2203      	movs	r2, #3
 80033a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2200      	movs	r2, #0
 80033ae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d002      	beq.n	80033be <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80033b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ba:	025b      	lsls	r3, r3, #9
 80033bc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033c6:	4618      	mov	r0, r3
 80033c8:	f001 fab4 	bl	8004934 <SDMMC_CmdBlockLength>
 80033cc:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80033ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00f      	beq.n	80033f4 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a9a      	ldr	r2, [pc, #616]	; (8003644 <HAL_SD_ReadBlocks+0x308>)
 80033da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e2:	431a      	orrs	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e194      	b.n	800371e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80033f4:	f04f 33ff 	mov.w	r3, #4294967295
 80033f8:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	025b      	lsls	r3, r3, #9
 80033fe:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003400:	2390      	movs	r3, #144	; 0x90
 8003402:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003404:	2302      	movs	r3, #2
 8003406:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003408:	2300      	movs	r3, #0
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800340c:	2301      	movs	r3, #1
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f107 0214 	add.w	r2, r7, #20
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f001 fa5e 	bl	80048dc <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d90a      	bls.n	800343c <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2202      	movs	r2, #2
 800342a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003432:	4618      	mov	r0, r3
 8003434:	f001 fac2 	bl	80049bc <SDMMC_CmdReadMultiBlock>
 8003438:	6478      	str	r0, [r7, #68]	; 0x44
 800343a:	e009      	b.n	8003450 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003448:	4618      	mov	r0, r3
 800344a:	f001 fa95 	bl	8004978 <SDMMC_CmdReadSingleBlock>
 800344e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003452:	2b00      	cmp	r3, #0
 8003454:	d012      	beq.n	800347c <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7a      	ldr	r2, [pc, #488]	; (8003644 <HAL_SD_ReadBlocks+0x308>)
 800345c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003464:	431a      	orrs	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e150      	b.n	800371e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003480:	e061      	b.n	8003546 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d03c      	beq.n	800350a <HAL_SD_ReadBlocks+0x1ce>
 8003490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d039      	beq.n	800350a <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003496:	2300      	movs	r3, #0
 8003498:	643b      	str	r3, [r7, #64]	; 0x40
 800349a:	e033      	b.n	8003504 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 f996 	bl	80047d2 <SDIO_ReadFIFO>
 80034a6:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b2:	3301      	adds	r3, #1
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b8:	3b01      	subs	r3, #1
 80034ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80034bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c8:	3301      	adds	r3, #1
 80034ca:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ce:	3b01      	subs	r3, #1
 80034d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034de:	3301      	adds	r3, #1
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e4:	3b01      	subs	r3, #1
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	0e1b      	lsrs	r3, r3, #24
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f4:	3301      	adds	r3, #1
 80034f6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fa:	3b01      	subs	r3, #1
 80034fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80034fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003500:	3301      	adds	r3, #1
 8003502:	643b      	str	r3, [r7, #64]	; 0x40
 8003504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003506:	2b07      	cmp	r3, #7
 8003508:	d9c8      	bls.n	800349c <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800350a:	f7fd fe83 	bl	8001214 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003516:	429a      	cmp	r2, r3
 8003518:	d902      	bls.n	8003520 <HAL_SD_ReadBlocks+0x1e4>
 800351a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800351c:	2b00      	cmp	r3, #0
 800351e:	d112      	bne.n	8003546 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a47      	ldr	r2, [pc, #284]	; (8003644 <HAL_SD_ReadBlocks+0x308>)
 8003526:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0eb      	b.n	800371e <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003550:	2b00      	cmp	r3, #0
 8003552:	d096      	beq.n	8003482 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d022      	beq.n	80035a8 <HAL_SD_ReadBlocks+0x26c>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d91f      	bls.n	80035a8 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	2b03      	cmp	r3, #3
 800356e:	d01b      	beq.n	80035a8 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f001 fa87 	bl	8004a88 <SDMMC_CmdStopTransfer>
 800357a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800357c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357e:	2b00      	cmp	r3, #0
 8003580:	d012      	beq.n	80035a8 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a2f      	ldr	r2, [pc, #188]	; (8003644 <HAL_SD_ReadBlocks+0x308>)
 8003588:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003590:	431a      	orrs	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0ba      	b.n	800371e <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d012      	beq.n	80035dc <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a22      	ldr	r2, [pc, #136]	; (8003644 <HAL_SD_ReadBlocks+0x308>)
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	f043 0208 	orr.w	r2, r3, #8
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0a0      	b.n	800371e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d012      	beq.n	8003610 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a15      	ldr	r2, [pc, #84]	; (8003644 <HAL_SD_ReadBlocks+0x308>)
 80035f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	f043 0202 	orr.w	r2, r3, #2
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e086      	b.n	800371e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d063      	beq.n	80036e6 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a08      	ldr	r2, [pc, #32]	; (8003644 <HAL_SD_ReadBlocks+0x308>)
 8003624:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	f043 0220 	orr.w	r2, r3, #32
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e06c      	b.n	800371e <HAL_SD_ReadBlocks+0x3e2>
 8003644:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f001 f8c0 	bl	80047d2 <SDIO_ReadFIFO>
 8003652:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	b2da      	uxtb	r2, r3
 8003658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800365c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365e:	3301      	adds	r3, #1
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003664:	3b01      	subs	r3, #1
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	b2da      	uxtb	r2, r3
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003674:	3301      	adds	r3, #1
 8003676:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367a:	3b01      	subs	r3, #1
 800367c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	0c1b      	lsrs	r3, r3, #16
 8003682:	b2da      	uxtb	r2, r3
 8003684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003686:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368a:	3301      	adds	r3, #1
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800368e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003690:	3b01      	subs	r3, #1
 8003692:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	0e1b      	lsrs	r3, r3, #24
 8003698:	b2da      	uxtb	r2, r3
 800369a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a0:	3301      	adds	r3, #1
 80036a2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80036a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a6:	3b01      	subs	r3, #1
 80036a8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80036aa:	f7fd fdb3 	bl	8001214 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d902      	bls.n	80036c0 <HAL_SD_ReadBlocks+0x384>
 80036ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d112      	bne.n	80036e6 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <HAL_SD_ReadBlocks+0x3ec>)
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e01b      	b.n	800371e <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_SD_ReadBlocks+0x3be>
 80036f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1a6      	bne.n	8003648 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8003702:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	e006      	b.n	800371e <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
  }
}
 800371e:	4618      	mov	r0, r3
 8003720:	3748      	adds	r7, #72	; 0x48
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	004005ff 	.word	0x004005ff

0800372c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b092      	sub	sp, #72	; 0x48
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800373a:	f7fd fd6b 	bl	8001214 <HAL_GetTick>
 800373e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d107      	bne.n	800375e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e182      	b.n	8003a64 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	f040 8175 	bne.w	8003a56 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	441a      	add	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	429a      	cmp	r2, r3
 800377e:	d907      	bls.n	8003790 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e169      	b.n	8003a64 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2203      	movs	r2, #3
 8003794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2200      	movs	r2, #0
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d002      	beq.n	80037ae <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80037a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037aa:	025b      	lsls	r3, r3, #9
 80037ac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 f8bc 	bl	8004934 <SDMMC_CmdBlockLength>
 80037bc:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80037be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00f      	beq.n	80037e4 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a9c      	ldr	r2, [pc, #624]	; (8003a3c <HAL_SD_WriteBlocks+0x310>)
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037d2:	431a      	orrs	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e13f      	b.n	8003a64 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80037e4:	f04f 33ff 	mov.w	r3, #4294967295
 80037e8:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	025b      	lsls	r3, r3, #9
 80037ee:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80037f0:	2390      	movs	r3, #144	; 0x90
 80037f2:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80037f4:	2300      	movs	r3, #0
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80037fc:	2301      	movs	r3, #1
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f107 0218 	add.w	r2, r7, #24
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f001 f866 	bl	80048dc <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d90a      	bls.n	800382c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003822:	4618      	mov	r0, r3
 8003824:	f001 f90e 	bl	8004a44 <SDMMC_CmdWriteMultiBlock>
 8003828:	6478      	str	r0, [r7, #68]	; 0x44
 800382a:	e009      	b.n	8003840 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2210      	movs	r2, #16
 8003830:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003838:	4618      	mov	r0, r3
 800383a:	f001 f8e1 	bl	8004a00 <SDMMC_CmdWriteSingleBlock>
 800383e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003842:	2b00      	cmp	r3, #0
 8003844:	d012      	beq.n	800386c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a7c      	ldr	r2, [pc, #496]	; (8003a3c <HAL_SD_WriteBlocks+0x310>)
 800384c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003854:	431a      	orrs	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0fb      	b.n	8003a64 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003870:	e065      	b.n	800393e <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d040      	beq.n	8003902 <HAL_SD_WriteBlocks+0x1d6>
 8003880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d03d      	beq.n	8003902 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003886:	2300      	movs	r3, #0
 8003888:	643b      	str	r3, [r7, #64]	; 0x40
 800388a:	e037      	b.n	80038fc <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800388c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003894:	3301      	adds	r3, #1
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389a:	3b01      	subs	r3, #1
 800389c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800389e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	021a      	lsls	r2, r3, #8
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80038aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ac:	3301      	adds	r3, #1
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80038b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b2:	3b01      	subs	r3, #1
 80038b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80038b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	041a      	lsls	r2, r3, #16
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80038c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c4:	3301      	adds	r3, #1
 80038c6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	3b01      	subs	r3, #1
 80038cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80038ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	061a      	lsls	r2, r3, #24
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80038da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038dc:	3301      	adds	r3, #1
 80038de:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80038e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e2:	3b01      	subs	r3, #1
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f107 0214 	add.w	r2, r7, #20
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 ff7b 	bl	80047ec <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80038f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f8:	3301      	adds	r3, #1
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40
 80038fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fe:	2b07      	cmp	r3, #7
 8003900:	d9c4      	bls.n	800388c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003902:	f7fd fc87 	bl	8001214 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800390e:	429a      	cmp	r2, r3
 8003910:	d902      	bls.n	8003918 <HAL_SD_WriteBlocks+0x1ec>
 8003912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003914:	2b00      	cmp	r3, #0
 8003916:	d112      	bne.n	800393e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a47      	ldr	r2, [pc, #284]	; (8003a3c <HAL_SD_WriteBlocks+0x310>)
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003926:	431a      	orrs	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e092      	b.n	8003a64 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003944:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003948:	2b00      	cmp	r3, #0
 800394a:	d092      	beq.n	8003872 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d022      	beq.n	80039a0 <HAL_SD_WriteBlocks+0x274>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d91f      	bls.n	80039a0 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003964:	2b03      	cmp	r3, #3
 8003966:	d01b      	beq.n	80039a0 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f001 f88b 	bl	8004a88 <SDMMC_CmdStopTransfer>
 8003972:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003976:	2b00      	cmp	r3, #0
 8003978:	d012      	beq.n	80039a0 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a2f      	ldr	r2, [pc, #188]	; (8003a3c <HAL_SD_WriteBlocks+0x310>)
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003988:	431a      	orrs	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e061      	b.n	8003a64 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d012      	beq.n	80039d4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a22      	ldr	r2, [pc, #136]	; (8003a3c <HAL_SD_WriteBlocks+0x310>)
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	f043 0208 	orr.w	r2, r3, #8
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e047      	b.n	8003a64 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d012      	beq.n	8003a08 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a15      	ldr	r2, [pc, #84]	; (8003a3c <HAL_SD_WriteBlocks+0x310>)
 80039e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	f043 0202 	orr.w	r2, r3, #2
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e02d      	b.n	8003a64 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d014      	beq.n	8003a40 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <HAL_SD_WriteBlocks+0x310>)
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	f043 0210 	orr.w	r2, r3, #16
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e013      	b.n	8003a64 <HAL_SD_WriteBlocks+0x338>
 8003a3c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e006      	b.n	8003a64 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
  }
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3748      	adds	r7, #72	; 0x48
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a7a:	0f9b      	lsrs	r3, r3, #30
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a86:	0e9b      	lsrs	r3, r3, #26
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a98:	0e1b      	lsrs	r3, r3, #24
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aaa:	0c1b      	lsrs	r3, r3, #16
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003acc:	0d1b      	lsrs	r3, r3, #20
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aea:	0bdb      	lsrs	r3, r3, #15
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003afc:	0b9b      	lsrs	r3, r3, #14
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0e:	0b5b      	lsrs	r3, r3, #13
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b20:	0b1b      	lsrs	r3, r3, #12
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2200      	movs	r2, #0
 8003b32:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d163      	bne.n	8003c04 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b40:	009a      	lsls	r2, r3, #2
 8003b42:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b46:	4013      	ands	r3, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003b4c:	0f92      	lsrs	r2, r2, #30
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b58:	0edb      	lsrs	r3, r3, #27
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b6a:	0e1b      	lsrs	r3, r3, #24
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b7c:	0d5b      	lsrs	r3, r3, #21
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b8e:	0c9b      	lsrs	r3, r3, #18
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba0:	0bdb      	lsrs	r3, r3, #15
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	7e1b      	ldrb	r3, [r3, #24]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	3302      	adds	r3, #2
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003bce:	fb02 f203 	mul.w	r2, r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	7a1b      	ldrb	r3, [r3, #8]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	2201      	movs	r2, #1
 8003be2:	409a      	lsls	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003bf0:	0a52      	lsrs	r2, r2, #9
 8003bf2:	fb02 f203 	mul.w	r2, r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c00:	661a      	str	r2, [r3, #96]	; 0x60
 8003c02:	e031      	b.n	8003c68 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d11d      	bne.n	8003c48 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c10:	041b      	lsls	r3, r3, #16
 8003c12:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1a:	0c1b      	lsrs	r3, r3, #16
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	3301      	adds	r3, #1
 8003c28:	029a      	lsls	r2, r3, #10
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c3c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	661a      	str	r2, [r3, #96]	; 0x60
 8003c46:	e00f      	b.n	8003c68 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	; (8003db0 <HAL_SD_GetCardCSD+0x344>)
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e09d      	b.n	8003da4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c6c:	0b9b      	lsrs	r3, r3, #14
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7e:	09db      	lsrs	r3, r3, #7
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	0fdb      	lsrs	r3, r3, #31
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	0f5b      	lsrs	r3, r3, #29
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	0e9b      	lsrs	r3, r3, #26
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd0:	0d9b      	lsrs	r3, r3, #22
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	0d5b      	lsrs	r3, r3, #21
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	0c1b      	lsrs	r3, r3, #16
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	0bdb      	lsrs	r3, r3, #15
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	0b9b      	lsrs	r3, r3, #14
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	0b5b      	lsrs	r3, r3, #13
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	0b1b      	lsrs	r3, r3, #12
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	004005ff 	.word	0x004005ff

08003db4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003e18:	f107 030c 	add.w	r3, r7, #12
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f970 	bl	8004104 <SD_SendStatus>
 8003e24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	0a5b      	lsrs	r3, r3, #9
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003e42:	693b      	ldr	r3, [r7, #16]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003e4c:	b5b0      	push	{r4, r5, r7, lr}
 8003e4e:	b094      	sub	sp, #80	; 0x50
 8003e50:	af04      	add	r7, sp, #16
 8003e52:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003e54:	2301      	movs	r3, #1
 8003e56:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fce5 	bl	800482c <SDIO_GetPowerState>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e6c:	e0b7      	b.n	8003fde <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d02f      	beq.n	8003ed6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fecb 	bl	8004c16 <SDMMC_CmdSendCID>
 8003e80:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <SD_InitCard+0x40>
    {
      return errorstate;
 8003e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8a:	e0a8      	b.n	8003fde <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fd0f 	bl	80048b6 <SDIO_GetResponse>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fd06 	bl	80048b6 <SDIO_GetResponse>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2108      	movs	r1, #8
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fcfd 	bl	80048b6 <SDIO_GetResponse>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	210c      	movs	r1, #12
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fcf4 	bl	80048b6 <SDIO_GetResponse>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d00d      	beq.n	8003efa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f107 020e 	add.w	r2, r7, #14
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fed1 	bl	8004c90 <SDMMC_CmdSetRelAdd>
 8003eee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <SD_InitCard+0xae>
    {
      return errorstate;
 8003ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef8:	e071      	b.n	8003fde <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d036      	beq.n	8003f70 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003f02:	89fb      	ldrh	r3, [r7, #14]
 8003f04:	461a      	mov	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	4619      	mov	r1, r3
 8003f16:	4610      	mov	r0, r2
 8003f18:	f000 fe9b 	bl	8004c52 <SDMMC_CmdSendCSD>
 8003f1c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f26:	e05a      	b.n	8003fde <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fcc1 	bl	80048b6 <SDIO_GetResponse>
 8003f34:	4602      	mov	r2, r0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2104      	movs	r1, #4
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fcb8 	bl	80048b6 <SDIO_GetResponse>
 8003f46:	4602      	mov	r2, r0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2108      	movs	r1, #8
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fcaf 	bl	80048b6 <SDIO_GetResponse>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	210c      	movs	r1, #12
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fca6 	bl	80048b6 <SDIO_GetResponse>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2104      	movs	r1, #4
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fc9d 	bl	80048b6 <SDIO_GetResponse>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	0d1a      	lsrs	r2, r3, #20
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003f84:	f107 0310 	add.w	r3, r7, #16
 8003f88:	4619      	mov	r1, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff fd6e 	bl	8003a6c <HAL_SD_GetCardCSD>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f9a:	e020      	b.n	8003fde <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6819      	ldr	r1, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa4:	041b      	lsls	r3, r3, #16
 8003fa6:	f04f 0400 	mov.w	r4, #0
 8003faa:	461a      	mov	r2, r3
 8003fac:	4623      	mov	r3, r4
 8003fae:	4608      	mov	r0, r1
 8003fb0:	f000 fd8c 	bl	8004acc <SDMMC_CmdSelDesel>
 8003fb4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <SD_InitCard+0x174>
  {
    return errorstate;
 8003fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fbe:	e00e      	b.n	8003fde <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681d      	ldr	r5, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	466c      	mov	r4, sp
 8003fc8:	f103 0210 	add.w	r2, r3, #16
 8003fcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	f000 fbd0 	bl	800477c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3740      	adds	r7, #64	; 0x40
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003fe8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fd86 	bl	8004b12 <SDMMC_CmdGoIdleState>
 8004006:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <SD_PowerON+0x2a>
  {
    return errorstate;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	e072      	b.n	80040f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fd99 	bl	8004b4e <SDMMC_CmdOperCond>
 800401c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00d      	beq.n	8004040 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fd6f 	bl	8004b12 <SDMMC_CmdGoIdleState>
 8004034:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d004      	beq.n	8004046 <SD_PowerON+0x5e>
    {
      return errorstate;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	e05b      	b.n	80040f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404a:	2b01      	cmp	r3, #1
 800404c:	d137      	bne.n	80040be <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2100      	movs	r1, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fd99 	bl	8004b8c <SDMMC_CmdAppCommand>
 800405a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d02d      	beq.n	80040be <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004062:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004066:	e047      	b.n	80040f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2100      	movs	r1, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fd8c 	bl	8004b8c <SDMMC_CmdAppCommand>
 8004074:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <SD_PowerON+0x98>
    {
      return errorstate;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	e03b      	b.n	80040f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	491e      	ldr	r1, [pc, #120]	; (8004100 <SD_PowerON+0x118>)
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fda2 	bl	8004bd0 <SDMMC_CmdAppOperCommand>
 800408c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004094:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004098:	e02e      	b.n	80040f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2100      	movs	r1, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fc08 	bl	80048b6 <SDIO_GetResponse>
 80040a6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	0fdb      	lsrs	r3, r3, #31
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <SD_PowerON+0xcc>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <SD_PowerON+0xce>
 80040b4:	2300      	movs	r3, #0
 80040b6:	613b      	str	r3, [r7, #16]

    count++;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	3301      	adds	r3, #1
 80040bc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d802      	bhi.n	80040ce <SD_PowerON+0xe6>
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0cc      	beq.n	8004068 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d902      	bls.n	80040de <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80040d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040dc:	e00c      	b.n	80040f8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44
 80040ee:	e002      	b.n	80040f6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	c1100000 	.word	0xc1100000

08004104 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004114:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004118:	e018      	b.n	800414c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f000 fdd3 	bl	8004cd2 <SDMMC_CmdSendStatus>
 800412c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	e009      	b.n	800414c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fbb9 	bl	80048b6 <SDIO_GetResponse>
 8004144:	4602      	mov	r2, r0
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e056      	b.n	8004214 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d106      	bne.n	8004186 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7fc fe33 	bl	8000dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800419c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	ea42 0103 	orr.w	r1, r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	f003 0104 	and.w	r1, r3, #4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004202:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e01d      	b.n	800426a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fc ff2e 	bl	80010a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3304      	adds	r3, #4
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f000 f95e 	bl	800451c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0201 	orr.w	r2, r2, #1
 8004288:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b06      	cmp	r3, #6
 800429a:	d007      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d122      	bne.n	8004316 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d11b      	bne.n	8004316 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f06f 0202 	mvn.w	r2, #2
 80042e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f8ee 	bl	80044de <HAL_TIM_IC_CaptureCallback>
 8004302:	e005      	b.n	8004310 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f8e0 	bl	80044ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f8f1 	bl	80044f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b04      	cmp	r3, #4
 8004322:	d122      	bne.n	800436a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b04      	cmp	r3, #4
 8004330:	d11b      	bne.n	800436a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f06f 0204 	mvn.w	r2, #4
 800433a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f8c4 	bl	80044de <HAL_TIM_IC_CaptureCallback>
 8004356:	e005      	b.n	8004364 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f8b6 	bl	80044ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f8c7 	bl	80044f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b08      	cmp	r3, #8
 8004376:	d122      	bne.n	80043be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b08      	cmp	r3, #8
 8004384:	d11b      	bne.n	80043be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f06f 0208 	mvn.w	r2, #8
 800438e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2204      	movs	r2, #4
 8004394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f003 0303 	and.w	r3, r3, #3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f89a 	bl	80044de <HAL_TIM_IC_CaptureCallback>
 80043aa:	e005      	b.n	80043b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f88c 	bl	80044ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f89d 	bl	80044f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d122      	bne.n	8004412 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b10      	cmp	r3, #16
 80043d8:	d11b      	bne.n	8004412 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f06f 0210 	mvn.w	r2, #16
 80043e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2208      	movs	r2, #8
 80043e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f870 	bl	80044de <HAL_TIM_IC_CaptureCallback>
 80043fe:	e005      	b.n	800440c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f862 	bl	80044ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f873 	bl	80044f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b01      	cmp	r3, #1
 800441e:	d10e      	bne.n	800443e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b01      	cmp	r3, #1
 800442c:	d107      	bne.n	800443e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f06f 0201 	mvn.w	r2, #1
 8004436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7fc fbc7 	bl	8000bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004448:	2b80      	cmp	r3, #128	; 0x80
 800444a:	d10e      	bne.n	800446a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	d107      	bne.n	800446a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f97f 	bl	8004768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d10e      	bne.n	8004496 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	2b40      	cmp	r3, #64	; 0x40
 8004484:	d107      	bne.n	8004496 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800448e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f838 	bl	8004506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d10e      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d107      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f06f 0220 	mvn.w	r2, #32
 80044ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f949 	bl	8004754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a40      	ldr	r2, [pc, #256]	; (8004630 <TIM_Base_SetConfig+0x114>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d013      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453a:	d00f      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a3d      	ldr	r2, [pc, #244]	; (8004634 <TIM_Base_SetConfig+0x118>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00b      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a3c      	ldr	r2, [pc, #240]	; (8004638 <TIM_Base_SetConfig+0x11c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a3b      	ldr	r2, [pc, #236]	; (800463c <TIM_Base_SetConfig+0x120>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a3a      	ldr	r2, [pc, #232]	; (8004640 <TIM_Base_SetConfig+0x124>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d108      	bne.n	800456e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a2f      	ldr	r2, [pc, #188]	; (8004630 <TIM_Base_SetConfig+0x114>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d02b      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457c:	d027      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2c      	ldr	r2, [pc, #176]	; (8004634 <TIM_Base_SetConfig+0x118>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d023      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2b      	ldr	r2, [pc, #172]	; (8004638 <TIM_Base_SetConfig+0x11c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d01f      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2a      	ldr	r2, [pc, #168]	; (800463c <TIM_Base_SetConfig+0x120>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01b      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a29      	ldr	r2, [pc, #164]	; (8004640 <TIM_Base_SetConfig+0x124>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d017      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a28      	ldr	r2, [pc, #160]	; (8004644 <TIM_Base_SetConfig+0x128>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a27      	ldr	r2, [pc, #156]	; (8004648 <TIM_Base_SetConfig+0x12c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00f      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a26      	ldr	r2, [pc, #152]	; (800464c <TIM_Base_SetConfig+0x130>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a25      	ldr	r2, [pc, #148]	; (8004650 <TIM_Base_SetConfig+0x134>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d007      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a24      	ldr	r2, [pc, #144]	; (8004654 <TIM_Base_SetConfig+0x138>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a23      	ldr	r2, [pc, #140]	; (8004658 <TIM_Base_SetConfig+0x13c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d108      	bne.n	80045e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <TIM_Base_SetConfig+0x114>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <TIM_Base_SetConfig+0xf8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a0c      	ldr	r2, [pc, #48]	; (8004640 <TIM_Base_SetConfig+0x124>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d103      	bne.n	800461c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	615a      	str	r2, [r3, #20]
}
 8004622:	bf00      	nop
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40010000 	.word	0x40010000
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800
 800463c:	40000c00 	.word	0x40000c00
 8004640:	40010400 	.word	0x40010400
 8004644:	40014000 	.word	0x40014000
 8004648:	40014400 	.word	0x40014400
 800464c:	40014800 	.word	0x40014800
 8004650:	40001800 	.word	0x40001800
 8004654:	40001c00 	.word	0x40001c00
 8004658:	40002000 	.word	0x40002000

0800465c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004670:	2302      	movs	r3, #2
 8004672:	e05a      	b.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a21      	ldr	r2, [pc, #132]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d022      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d01d      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1d      	ldr	r2, [pc, #116]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d018      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d013      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1a      	ldr	r2, [pc, #104]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00e      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a18      	ldr	r2, [pc, #96]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d009      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a15      	ldr	r2, [pc, #84]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d10c      	bne.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4313      	orrs	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40010000 	.word	0x40010000
 800473c:	40000400 	.word	0x40000400
 8004740:	40000800 	.word	0x40000800
 8004744:	40000c00 	.word	0x40000c00
 8004748:	40010400 	.word	0x40010400
 800474c:	40014000 	.word	0x40014000
 8004750:	40001800 	.word	0x40001800

08004754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800477c:	b084      	sub	sp, #16
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	f107 001c 	add.w	r0, r7, #28
 800478a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004792:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004794:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004796:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800479a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800479e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80047a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80047a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80047a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80047b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	b004      	add	sp, #16
 80047d0:	4770      	bx	lr

080047d2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2203      	movs	r2, #3
 800481a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800481c:	2002      	movs	r0, #2
 800481e:	f7fc fd05 	bl	800122c <HAL_Delay>
  
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0303 	and.w	r3, r3, #3
}
 800483c:	4618      	mov	r0, r3
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004866:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800486c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004872:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004882:	f023 030f 	bic.w	r3, r3, #15
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	b2db      	uxtb	r3, r3
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3314      	adds	r3, #20
 80048c4:	461a      	mov	r2, r3
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	4413      	add	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
}  
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004902:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004908:	431a      	orrs	r2, r3
                       Data->DPSM);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800490e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004926:	2300      	movs	r3, #0

}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004942:	2310      	movs	r3, #16
 8004944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004946:	2340      	movs	r3, #64	; 0x40
 8004948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800494e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004952:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004954:	f107 0308 	add.w	r3, r7, #8
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff ff74 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	2110      	movs	r1, #16
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f9fe 	bl	8004d68 <SDMMC_GetCmdResp1>
 800496c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800496e:	69fb      	ldr	r3, [r7, #28]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3720      	adds	r7, #32
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004986:	2311      	movs	r3, #17
 8004988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800498a:	2340      	movs	r3, #64	; 0x40
 800498c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004996:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004998:	f107 0308 	add.w	r3, r7, #8
 800499c:	4619      	mov	r1, r3
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff ff52 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80049a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a8:	2111      	movs	r1, #17
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f9dc 	bl	8004d68 <SDMMC_GetCmdResp1>
 80049b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049b2:	69fb      	ldr	r3, [r7, #28]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80049ca:	2312      	movs	r3, #18
 80049cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049ce:	2340      	movs	r3, #64	; 0x40
 80049d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049dc:	f107 0308 	add.w	r3, r7, #8
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff ff30 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80049e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ec:	2112      	movs	r1, #18
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f9ba 	bl	8004d68 <SDMMC_GetCmdResp1>
 80049f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049f6:	69fb      	ldr	r3, [r7, #28]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004a0e:	2318      	movs	r3, #24
 8004a10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a12:	2340      	movs	r3, #64	; 0x40
 8004a14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a20:	f107 0308 	add.w	r3, r7, #8
 8004a24:	4619      	mov	r1, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff ff0e 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a30:	2118      	movs	r1, #24
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f998 	bl	8004d68 <SDMMC_GetCmdResp1>
 8004a38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004a52:	2319      	movs	r3, #25
 8004a54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a56:	2340      	movs	r3, #64	; 0x40
 8004a58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a64:	f107 0308 	add.w	r3, r7, #8
 8004a68:	4619      	mov	r1, r3
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7ff feec 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a74:	2119      	movs	r1, #25
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f976 	bl	8004d68 <SDMMC_GetCmdResp1>
 8004a7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a7e:	69fb      	ldr	r3, [r7, #28]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3720      	adds	r7, #32
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004a94:	230c      	movs	r3, #12
 8004a96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a98:	2340      	movs	r3, #64	; 0x40
 8004a9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aa4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aa6:	f107 0308 	add.w	r3, r7, #8
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff fecb 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004ab2:	4a05      	ldr	r2, [pc, #20]	; (8004ac8 <SDMMC_CmdStopTransfer+0x40>)
 8004ab4:	210c      	movs	r1, #12
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f956 	bl	8004d68 <SDMMC_GetCmdResp1>
 8004abc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004abe:	69fb      	ldr	r3, [r7, #28]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3720      	adds	r7, #32
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	05f5e100 	.word	0x05f5e100

08004acc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08a      	sub	sp, #40	; 0x28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004adc:	2307      	movs	r3, #7
 8004ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ae0:	2340      	movs	r3, #64	; 0x40
 8004ae2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aec:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aee:	f107 0310 	add.w	r3, r7, #16
 8004af2:	4619      	mov	r1, r3
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f7ff fea7 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afe:	2107      	movs	r1, #7
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f931 	bl	8004d68 <SDMMC_GetCmdResp1>
 8004b06:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3728      	adds	r7, #40	; 0x28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b088      	sub	sp, #32
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004b22:	2300      	movs	r3, #0
 8004b24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b30:	f107 0308 	add.w	r3, r7, #8
 8004b34:	4619      	mov	r1, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff fe86 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f8eb 	bl	8004d18 <SDMMC_GetCmdError>
 8004b42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b44:	69fb      	ldr	r3, [r7, #28]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b088      	sub	sp, #32
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004b56:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004b5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b60:	2340      	movs	r3, #64	; 0x40
 8004b62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b6e:	f107 0308 	add.w	r3, r7, #8
 8004b72:	4619      	mov	r1, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff fe67 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fad4 	bl	8005128 <SDMMC_GetCmdResp7>
 8004b80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b82:	69fb      	ldr	r3, [r7, #28]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3720      	adds	r7, #32
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004b9a:	2337      	movs	r3, #55	; 0x37
 8004b9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b9e:	2340      	movs	r3, #64	; 0x40
 8004ba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004baa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bac:	f107 0308 	add.w	r3, r7, #8
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff fe48 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbc:	2137      	movs	r1, #55	; 0x37
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f8d2 	bl	8004d68 <SDMMC_GetCmdResp1>
 8004bc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3720      	adds	r7, #32
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004be6:	2329      	movs	r3, #41	; 0x29
 8004be8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bea:	2340      	movs	r3, #64	; 0x40
 8004bec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bf8:	f107 0308 	add.w	r3, r7, #8
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff fe22 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f9e1 	bl	8004fcc <SDMMC_GetCmdResp3>
 8004c0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c0c:	69fb      	ldr	r3, [r7, #28]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3720      	adds	r7, #32
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b088      	sub	sp, #32
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004c22:	2302      	movs	r3, #2
 8004c24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004c26:	23c0      	movs	r3, #192	; 0xc0
 8004c28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c34:	f107 0308 	add.w	r3, r7, #8
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff fe04 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f97d 	bl	8004f40 <SDMMC_GetCmdResp2>
 8004c46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c48:	69fb      	ldr	r3, [r7, #28]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b088      	sub	sp, #32
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004c60:	2309      	movs	r3, #9
 8004c62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004c64:	23c0      	movs	r3, #192	; 0xc0
 8004c66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c72:	f107 0308 	add.w	r3, r7, #8
 8004c76:	4619      	mov	r1, r3
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fde5 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f95e 	bl	8004f40 <SDMMC_GetCmdResp2>
 8004c84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c86:	69fb      	ldr	r3, [r7, #28]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ca2:	2340      	movs	r3, #64	; 0x40
 8004ca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cb0:	f107 0308 	add.w	r3, r7, #8
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fdc6 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	2103      	movs	r1, #3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f9bd 	bl	8005040 <SDMMC_GetCmdResp6>
 8004cc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3720      	adds	r7, #32
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b088      	sub	sp, #32
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004ce0:	230d      	movs	r3, #13
 8004ce2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ce4:	2340      	movs	r3, #64	; 0x40
 8004ce6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cf2:	f107 0308 	add.w	r3, r7, #8
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff fda5 	bl	8004848 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d02:	210d      	movs	r1, #13
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f82f 	bl	8004d68 <SDMMC_GetCmdResp1>
 8004d0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004d18:	b490      	push	{r4, r7}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d20:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <SDMMC_GetCmdError+0x48>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0f      	ldr	r2, [pc, #60]	; (8004d64 <SDMMC_GetCmdError+0x4c>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	0a5b      	lsrs	r3, r3, #9
 8004d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004d34:	4623      	mov	r3, r4
 8004d36:	1e5c      	subs	r4, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d40:	e009      	b.n	8004d56 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f2      	beq.n	8004d34 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	22c5      	movs	r2, #197	; 0xc5
 8004d52:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc90      	pop	{r4, r7}
 8004d5e:	4770      	bx	lr
 8004d60:	20000000 	.word	0x20000000
 8004d64:	10624dd3 	.word	0x10624dd3

08004d68 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004d68:	b590      	push	{r4, r7, lr}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	460b      	mov	r3, r1
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004d76:	4b6f      	ldr	r3, [pc, #444]	; (8004f34 <SDMMC_GetCmdResp1+0x1cc>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a6f      	ldr	r2, [pc, #444]	; (8004f38 <SDMMC_GetCmdResp1+0x1d0>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	0a5b      	lsrs	r3, r3, #9
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004d88:	4623      	mov	r3, r4
 8004d8a:	1e5c      	subs	r4, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d94:	e0c9      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f0      	beq.n	8004d88 <SDMMC_GetCmdResp1+0x20>
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1eb      	bne.n	8004d88 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004dc2:	2304      	movs	r3, #4
 8004dc4:	e0b1      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0a6      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	22c5      	movs	r2, #197	; 0xc5
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7ff fd5a 	bl	800489c <SDIO_GetCommandResponse>
 8004de8:	4603      	mov	r3, r0
 8004dea:	461a      	mov	r2, r3
 8004dec:	7afb      	ldrb	r3, [r7, #11]
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d001      	beq.n	8004df6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e099      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004df6:	2100      	movs	r1, #0
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f7ff fd5c 	bl	80048b6 <SDIO_GetResponse>
 8004dfe:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4b4e      	ldr	r3, [pc, #312]	; (8004f3c <SDMMC_GetCmdResp1+0x1d4>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e08d      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	da02      	bge.n	8004e1a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e18:	e087      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004e24:	2340      	movs	r3, #64	; 0x40
 8004e26:	e080      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004e32:	2380      	movs	r3, #128	; 0x80
 8004e34:	e079      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e44:	e071      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e54:	e069      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e64:	e061      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004e70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e74:	e059      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e84:	e051      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e94:	e049      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004ea0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ea4:	e041      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eb4:	e039      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ec4:	e031      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004ed0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ed4:	e029      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004ee0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004ee4:	e021      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004ef0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ef4:	e019      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004f00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004f04:	e011      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004f10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f14:	e009      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004f20:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004f24:	e001      	b.n	8004f2a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004f26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	371c      	adds	r7, #28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd90      	pop	{r4, r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000000 	.word	0x20000000
 8004f38:	10624dd3 	.word	0x10624dd3
 8004f3c:	fdffe008 	.word	0xfdffe008

08004f40 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004f40:	b490      	push	{r4, r7}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f48:	4b1e      	ldr	r3, [pc, #120]	; (8004fc4 <SDMMC_GetCmdResp2+0x84>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1e      	ldr	r2, [pc, #120]	; (8004fc8 <SDMMC_GetCmdResp2+0x88>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	0a5b      	lsrs	r3, r3, #9
 8004f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f58:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004f5c:	4623      	mov	r3, r4
 8004f5e:	1e5c      	subs	r4, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f68:	e026      	b.n	8004fb8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <SDMMC_GetCmdResp2+0x1c>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1eb      	bne.n	8004f5c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d004      	beq.n	8004f9a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2204      	movs	r2, #4
 8004f94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f96:	2304      	movs	r3, #4
 8004f98:	e00e      	b.n	8004fb8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d004      	beq.n	8004fb0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e003      	b.n	8004fb8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	22c5      	movs	r2, #197	; 0xc5
 8004fb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc90      	pop	{r4, r7}
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	20000000 	.word	0x20000000
 8004fc8:	10624dd3 	.word	0x10624dd3

08004fcc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004fcc:	b490      	push	{r4, r7}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004fd4:	4b18      	ldr	r3, [pc, #96]	; (8005038 <SDMMC_GetCmdResp3+0x6c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a18      	ldr	r2, [pc, #96]	; (800503c <SDMMC_GetCmdResp3+0x70>)
 8004fda:	fba2 2303 	umull	r2, r3, r2, r3
 8004fde:	0a5b      	lsrs	r3, r3, #9
 8004fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004fe8:	4623      	mov	r3, r4
 8004fea:	1e5c      	subs	r4, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ff0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ff4:	e01b      	b.n	800502e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <SDMMC_GetCmdResp3+0x1c>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1eb      	bne.n	8004fe8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d004      	beq.n	8005026 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2204      	movs	r2, #4
 8005020:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005022:	2304      	movs	r3, #4
 8005024:	e003      	b.n	800502e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	22c5      	movs	r2, #197	; 0xc5
 800502a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bc90      	pop	{r4, r7}
 8005036:	4770      	bx	lr
 8005038:	20000000 	.word	0x20000000
 800503c:	10624dd3 	.word	0x10624dd3

08005040 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	460b      	mov	r3, r1
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800504e:	4b34      	ldr	r3, [pc, #208]	; (8005120 <SDMMC_GetCmdResp6+0xe0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a34      	ldr	r2, [pc, #208]	; (8005124 <SDMMC_GetCmdResp6+0xe4>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	0a5b      	lsrs	r3, r3, #9
 800505a:	f241 3288 	movw	r2, #5000	; 0x1388
 800505e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005062:	4623      	mov	r3, r4
 8005064:	1e5c      	subs	r4, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d102      	bne.n	8005070 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800506a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800506e:	e052      	b.n	8005116 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005074:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0f0      	beq.n	8005062 <SDMMC_GetCmdResp6+0x22>
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1eb      	bne.n	8005062 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	d004      	beq.n	80050a0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2204      	movs	r2, #4
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800509c:	2304      	movs	r3, #4
 800509e:	e03a      	b.n	8005116 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d004      	beq.n	80050b6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e02f      	b.n	8005116 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7ff fbf0 	bl	800489c <SDIO_GetCommandResponse>
 80050bc:	4603      	mov	r3, r0
 80050be:	461a      	mov	r2, r3
 80050c0:	7afb      	ldrb	r3, [r7, #11]
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d001      	beq.n	80050ca <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e025      	b.n	8005116 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	22c5      	movs	r2, #197	; 0xc5
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80050d0:	2100      	movs	r1, #0
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff fbef 	bl	80048b6 <SDIO_GetResponse>
 80050d8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	0c1b      	lsrs	r3, r3, #16
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	e011      	b.n	8005116 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80050fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005100:	e009      	b.n	8005116 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800510c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005110:	e001      	b.n	8005116 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005116:	4618      	mov	r0, r3
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	bd90      	pop	{r4, r7, pc}
 800511e:	bf00      	nop
 8005120:	20000000 	.word	0x20000000
 8005124:	10624dd3 	.word	0x10624dd3

08005128 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005128:	b490      	push	{r4, r7}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005130:	4b21      	ldr	r3, [pc, #132]	; (80051b8 <SDMMC_GetCmdResp7+0x90>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a21      	ldr	r2, [pc, #132]	; (80051bc <SDMMC_GetCmdResp7+0x94>)
 8005136:	fba2 2303 	umull	r2, r3, r2, r3
 800513a:	0a5b      	lsrs	r3, r3, #9
 800513c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005140:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005144:	4623      	mov	r3, r4
 8005146:	1e5c      	subs	r4, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d102      	bne.n	8005152 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800514c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005150:	e02c      	b.n	80051ac <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005156:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <SDMMC_GetCmdResp7+0x1c>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1eb      	bne.n	8005144 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2204      	movs	r2, #4
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800517e:	2304      	movs	r3, #4
 8005180:	e014      	b.n	80051ac <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d004      	beq.n	8005198 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005194:	2301      	movs	r3, #1
 8005196:	e009      	b.n	80051ac <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2240      	movs	r2, #64	; 0x40
 80051a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80051aa:	2300      	movs	r3, #0
  
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc90      	pop	{r4, r7}
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000000 	.word	0x20000000
 80051bc:	10624dd3 	.word	0x10624dd3

080051c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80051c4:	4904      	ldr	r1, [pc, #16]	; (80051d8 <MX_FATFS_Init+0x18>)
 80051c6:	4805      	ldr	r0, [pc, #20]	; (80051dc <MX_FATFS_Init+0x1c>)
 80051c8:	f004 fa04 	bl	80095d4 <FATFS_LinkDriver>
 80051cc:	4603      	mov	r3, r0
 80051ce:	461a      	mov	r2, r3
 80051d0:	4b03      	ldr	r3, [pc, #12]	; (80051e0 <MX_FATFS_Init+0x20>)
 80051d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80051d4:	bf00      	nop
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20001970 	.word	0x20001970
 80051dc:	0800a120 	.word	0x0800a120
 80051e0:	2000196c 	.word	0x2000196c

080051e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80051e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80051fe:	f000 f86b 	bl	80052d8 <BSP_SD_IsDetected>
 8005202:	4603      	mov	r3, r0
 8005204:	2b01      	cmp	r3, #1
 8005206:	d001      	beq.n	800520c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e005      	b.n	8005218 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800520c:	4804      	ldr	r0, [pc, #16]	; (8005220 <BSP_SD_Init+0x2c>)
 800520e:	f7fe f805 	bl	800321c <HAL_SD_Init>
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005216:	79fb      	ldrb	r3, [r7, #7]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	2000184c 	.word	0x2000184c

08005224 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af02      	add	r7, sp, #8
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	68f9      	ldr	r1, [r7, #12]
 8005240:	4806      	ldr	r0, [pc, #24]	; (800525c <BSP_SD_ReadBlocks+0x38>)
 8005242:	f7fe f87b 	bl	800333c <HAL_SD_ReadBlocks>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005250:	7dfb      	ldrb	r3, [r7, #23]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	2000184c 	.word	0x2000184c

08005260 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	68f9      	ldr	r1, [r7, #12]
 800527c:	4806      	ldr	r0, [pc, #24]	; (8005298 <BSP_SD_WriteBlocks+0x38>)
 800527e:	f7fe fa55 	bl	800372c <HAL_SD_WriteBlocks>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800528c:	7dfb      	ldrb	r3, [r7, #23]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	2000184c 	.word	0x2000184c

0800529c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80052a0:	4805      	ldr	r0, [pc, #20]	; (80052b8 <BSP_SD_GetCardState+0x1c>)
 80052a2:	f7fe fdb3 	bl	8003e0c <HAL_SD_GetCardState>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	2000184c 	.word	0x2000184c

080052bc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	4803      	ldr	r0, [pc, #12]	; (80052d4 <BSP_SD_GetCardInfo+0x18>)
 80052c8:	f7fe fd74 	bl	8003db4 <HAL_SD_GetCardInfo>
}
 80052cc:	bf00      	nop
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	2000184c 	.word	0x2000184c

080052d8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80052de:	2301      	movs	r3, #1
 80052e0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	b2db      	uxtb	r3, r3
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80052fe:	4b0b      	ldr	r3, [pc, #44]	; (800532c <SD_CheckStatus+0x38>)
 8005300:	2201      	movs	r2, #1
 8005302:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005304:	f7ff ffca 	bl	800529c <BSP_SD_GetCardState>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d107      	bne.n	800531e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800530e:	4b07      	ldr	r3, [pc, #28]	; (800532c <SD_CheckStatus+0x38>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	b2da      	uxtb	r2, r3
 800531a:	4b04      	ldr	r3, [pc, #16]	; (800532c <SD_CheckStatus+0x38>)
 800531c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800531e:	4b03      	ldr	r3, [pc, #12]	; (800532c <SD_CheckStatus+0x38>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	b2db      	uxtb	r3, r3
}
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20000009 	.word	0x20000009

08005330 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <SD_initialize+0x38>)
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005340:	f7ff ff58 	bl	80051f4 <BSP_SD_Init>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d107      	bne.n	800535a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800534a:	79fb      	ldrb	r3, [r7, #7]
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff ffd1 	bl	80052f4 <SD_CheckStatus>
 8005352:	4603      	mov	r3, r0
 8005354:	461a      	mov	r2, r3
 8005356:	4b04      	ldr	r3, [pc, #16]	; (8005368 <SD_initialize+0x38>)
 8005358:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800535a:	4b03      	ldr	r3, [pc, #12]	; (8005368 <SD_initialize+0x38>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	b2db      	uxtb	r3, r3
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	20000009 	.word	0x20000009

0800536c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff ffbb 	bl	80052f4 <SD_CheckStatus>
 800537e:	4603      	mov	r3, r0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	4603      	mov	r3, r0
 8005396:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800539c:	f04f 33ff 	mov.w	r3, #4294967295
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	68b8      	ldr	r0, [r7, #8]
 80053a6:	f7ff ff3d 	bl	8005224 <BSP_SD_ReadBlocks>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d107      	bne.n	80053c0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80053b0:	bf00      	nop
 80053b2:	f7ff ff73 	bl	800529c <BSP_SD_GetCardState>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1fa      	bne.n	80053b2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80053c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
 80053d6:	4603      	mov	r3, r0
 80053d8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80053de:	f04f 33ff 	mov.w	r3, #4294967295
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	68b8      	ldr	r0, [r7, #8]
 80053e8:	f7ff ff3a 	bl	8005260 <BSP_SD_WriteBlocks>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d107      	bne.n	8005402 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80053f2:	bf00      	nop
 80053f4:	f7ff ff52 	bl	800529c <BSP_SD_GetCardState>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1fa      	bne.n	80053f4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005402:	7dfb      	ldrb	r3, [r7, #23]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08c      	sub	sp, #48	; 0x30
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	603a      	str	r2, [r7, #0]
 8005416:	71fb      	strb	r3, [r7, #7]
 8005418:	460b      	mov	r3, r1
 800541a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005422:	4b25      	ldr	r3, [pc, #148]	; (80054b8 <SD_ioctl+0xac>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <SD_ioctl+0x28>
 8005430:	2303      	movs	r3, #3
 8005432:	e03c      	b.n	80054ae <SD_ioctl+0xa2>

  switch (cmd)
 8005434:	79bb      	ldrb	r3, [r7, #6]
 8005436:	2b03      	cmp	r3, #3
 8005438:	d834      	bhi.n	80054a4 <SD_ioctl+0x98>
 800543a:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <SD_ioctl+0x34>)
 800543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005440:	08005451 	.word	0x08005451
 8005444:	08005459 	.word	0x08005459
 8005448:	08005471 	.word	0x08005471
 800544c:	0800548b 	.word	0x0800548b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005456:	e028      	b.n	80054aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005458:	f107 030c 	add.w	r3, r7, #12
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff ff2d 	bl	80052bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800546e:	e01c      	b.n	80054aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005470:	f107 030c 	add.w	r3, r7, #12
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff ff21 	bl	80052bc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	b29a      	uxth	r2, r3
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005488:	e00f      	b.n	80054aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800548a:	f107 030c 	add.w	r3, r7, #12
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff ff14 	bl	80052bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	0a5a      	lsrs	r2, r3, #9
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80054a2:	e002      	b.n	80054aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80054a4:	2304      	movs	r3, #4
 80054a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80054aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3730      	adds	r7, #48	; 0x30
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000009 	.word	0x20000009

080054bc <CAN_Start>:
/* Includes ------------------------------------------------------------------*/
#include "connectivity/canTri/canTri.h"

#ifdef INC_CANTRI_H_
/* Init ------------------------------------------------------------------*/
void CAN_Start(CANBus *bus) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
	uint8_t state;
	state = HAL_CAN_ActivateNotification(bus->hcan,
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c8:	2102      	movs	r1, #2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fc fae9 	bl	8001aa2 <HAL_CAN_ActivateNotification>
 80054d0:	4603      	mov	r3, r0
 80054d2:	73fb      	strb	r3, [r7, #15]
	CAN_IT_RX_FIFO0_MSG_PENDING);
	xprintf("CAN%d: NotificationState: %d\n", bus->number, state);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	4619      	mov	r1, r3
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	461a      	mov	r2, r3
 80054de:	480e      	ldr	r0, [pc, #56]	; (8005518 <CAN_Start+0x5c>)
 80054e0:	f000 fea4 	bl	800622c <xprintf>
	state = HAL_CAN_Start(bus->hcan);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fc f8a9 	bl	8001640 <HAL_CAN_Start>
 80054ee:	4603      	mov	r3, r0
 80054f0:	73fb      	strb	r3, [r7, #15]
	xprintf("CAN%d: StartState: %d\n", bus->number, state);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	4619      	mov	r1, r3
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	461a      	mov	r2, r3
 80054fc:	4807      	ldr	r0, [pc, #28]	; (800551c <CAN_Start+0x60>)
 80054fe:	f000 fe95 	bl	800622c <xprintf>

	xprintf("CAN%d init completed.\n", bus->number);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	4619      	mov	r1, r3
 8005508:	4805      	ldr	r0, [pc, #20]	; (8005520 <CAN_Start+0x64>)
 800550a:	f000 fe8f 	bl	800622c <xprintf>
}
 800550e:	bf00      	nop
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	08009ea4 	.word	0x08009ea4
 800551c:	08009ec4 	.word	0x08009ec4
 8005520:	08009edc 	.word	0x08009edc

08005524 <setStandardFilter>:

void setStandardFilter(CANBus *bus) {
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	bus->sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	661a      	str	r2, [r3, #96]	; 0x60
	bus->sFilterConfig.FilterIdHigh = 0x0000;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	651a      	str	r2, [r3, #80]	; 0x50
	bus->sFilterConfig.FilterIdLow = 0;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	655a      	str	r2, [r3, #84]	; 0x54
	bus->sFilterConfig.FilterMaskIdHigh = 0;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	659a      	str	r2, [r3, #88]	; 0x58
	bus->sFilterConfig.FilterMaskIdLow = 0;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	65da      	str	r2, [r3, #92]	; 0x5c
	bus->sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	66da      	str	r2, [r3, #108]	; 0x6c
	bus->sFilterConfig.FilterActivation = ENABLE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	671a      	str	r2, [r3, #112]	; 0x70
//	bus->sFilterConfig.FilterBank = 1;
	bus->sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	669a      	str	r2, [r3, #104]	; 0x68
//	bus->sFilterConfig.SlaveStartFilterBank = 27;

	HAL_StatusTypeDef state = HAL_CAN_ConfigFilter(bus->hcan,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3350      	adds	r3, #80	; 0x50
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f7fb ff7e 	bl	8001468 <HAL_CAN_ConfigFilter>
 800556c:	4603      	mov	r3, r0
 800556e:	73fb      	strb	r3, [r7, #15]
			&(bus->sFilterConfig));
	xprintf("CAN%d: FilterInitState: %d\n", bus->number, state);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	4619      	mov	r1, r3
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	461a      	mov	r2, r3
 800557a:	4803      	ldr	r0, [pc, #12]	; (8005588 <setStandardFilter+0x64>)
 800557c:	f000 fe56 	bl	800622c <xprintf>
}
 8005580:	bf00      	nop
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	08009ef4 	.word	0x08009ef4

0800558c <CAN_setHeader>:

void CAN_setHeader(CANBus *bus, uint32_t ExtID) {
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
	bus->pTxHeader.DLC = 8;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2208      	movs	r2, #8
 800559a:	615a      	str	r2, [r3, #20]
	bus->pTxHeader.IDE = CAN_ID_EXT;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2204      	movs	r2, #4
 80055a0:	60da      	str	r2, [r3, #12]
	bus->pTxHeader.RTR = CAN_RTR_DATA;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	611a      	str	r2, [r3, #16]
	bus->pTxHeader.ExtId = ExtID;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	609a      	str	r2, [r3, #8]

	bus->TxMailbox = CAN_TX_MAILBOX0;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <CAN_init>:

CANBus* CAN_init(CAN_HandleTypeDef *canHandle, uint32_t ExtID) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
	if (canHandle->Instance == 0) {
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d104      	bne.n	80055dc <CAN_init+0x1c>
		xprintf("ERROR: Invalid CAN-Handle.\n");
 80055d2:	4827      	ldr	r0, [pc, #156]	; (8005670 <CAN_init+0xb0>)
 80055d4:	f000 fe2a 	bl	800622c <xprintf>
		return 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	e045      	b.n	8005668 <CAN_init+0xa8>
	}
#ifdef CAN1
	else if (canHandle->Instance == CAN1) {
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a24      	ldr	r2, [pc, #144]	; (8005674 <CAN_init+0xb4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d111      	bne.n	800560a <CAN_init+0x4a>
		bus1.hcan = canHandle;
 80055e6:	4a24      	ldr	r2, [pc, #144]	; (8005678 <CAN_init+0xb8>)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6793      	str	r3, [r2, #120]	; 0x78
		bus1.number = 1;
 80055ec:	4b22      	ldr	r3, [pc, #136]	; (8005678 <CAN_init+0xb8>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	701a      	strb	r2, [r3, #0]

		CAN_setHeader(&bus1, ExtID);
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	4820      	ldr	r0, [pc, #128]	; (8005678 <CAN_init+0xb8>)
 80055f6:	f7ff ffc9 	bl	800558c <CAN_setHeader>
		setStandardFilter(&bus1);
 80055fa:	481f      	ldr	r0, [pc, #124]	; (8005678 <CAN_init+0xb8>)
 80055fc:	f7ff ff92 	bl	8005524 <setStandardFilter>
		CAN_Start(&bus1);
 8005600:	481d      	ldr	r0, [pc, #116]	; (8005678 <CAN_init+0xb8>)
 8005602:	f7ff ff5b 	bl	80054bc <CAN_Start>

//		HAL_CAN_MspInit(bus1.hcan);
		return &bus1;
 8005606:	4b1c      	ldr	r3, [pc, #112]	; (8005678 <CAN_init+0xb8>)
 8005608:	e02e      	b.n	8005668 <CAN_init+0xa8>
	}
#endif
#ifdef CAN2
	else if (canHandle->Instance == CAN2) {
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1b      	ldr	r2, [pc, #108]	; (800567c <CAN_init+0xbc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d111      	bne.n	8005638 <CAN_init+0x78>
		bus2.hcan = canHandle;
 8005614:	4a1a      	ldr	r2, [pc, #104]	; (8005680 <CAN_init+0xc0>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6793      	str	r3, [r2, #120]	; 0x78
		bus2.number = 2;
 800561a:	4b19      	ldr	r3, [pc, #100]	; (8005680 <CAN_init+0xc0>)
 800561c:	2202      	movs	r2, #2
 800561e:	701a      	strb	r2, [r3, #0]

		CAN_setHeader(&bus2, ExtID);
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	4817      	ldr	r0, [pc, #92]	; (8005680 <CAN_init+0xc0>)
 8005624:	f7ff ffb2 	bl	800558c <CAN_setHeader>
		setStandardFilter(&bus2);
 8005628:	4815      	ldr	r0, [pc, #84]	; (8005680 <CAN_init+0xc0>)
 800562a:	f7ff ff7b 	bl	8005524 <setStandardFilter>
		CAN_Start(&bus2);
 800562e:	4814      	ldr	r0, [pc, #80]	; (8005680 <CAN_init+0xc0>)
 8005630:	f7ff ff44 	bl	80054bc <CAN_Start>

//		HAL_CAN_MspInit(bus2.hcan);
		return &bus2;
 8005634:	4b12      	ldr	r3, [pc, #72]	; (8005680 <CAN_init+0xc0>)
 8005636:	e017      	b.n	8005668 <CAN_init+0xa8>
	}
#endif
#ifdef CAN3
	else if (canHandle->Instance == CAN3) {
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a11      	ldr	r2, [pc, #68]	; (8005684 <CAN_init+0xc4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d111      	bne.n	8005666 <CAN_init+0xa6>
		bus3.hcan = canHandle;
 8005642:	4a11      	ldr	r2, [pc, #68]	; (8005688 <CAN_init+0xc8>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6793      	str	r3, [r2, #120]	; 0x78
		bus3.number = 3;
 8005648:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <CAN_init+0xc8>)
 800564a:	2203      	movs	r2, #3
 800564c:	701a      	strb	r2, [r3, #0]

		CAN_setHeader(&bus3, ExtID);
 800564e:	6839      	ldr	r1, [r7, #0]
 8005650:	480d      	ldr	r0, [pc, #52]	; (8005688 <CAN_init+0xc8>)
 8005652:	f7ff ff9b 	bl	800558c <CAN_setHeader>
		setStandardFilter(&bus3);
 8005656:	480c      	ldr	r0, [pc, #48]	; (8005688 <CAN_init+0xc8>)
 8005658:	f7ff ff64 	bl	8005524 <setStandardFilter>
		CAN_Start(&bus3);
 800565c:	480a      	ldr	r0, [pc, #40]	; (8005688 <CAN_init+0xc8>)
 800565e:	f7ff ff2d 	bl	80054bc <CAN_Start>

//		HAL_CAN_MspInit(bus3.hcan);
		return &bus3;
 8005662:	4b09      	ldr	r3, [pc, #36]	; (8005688 <CAN_init+0xc8>)
 8005664:	e000      	b.n	8005668 <CAN_init+0xa8>
	}
#endif
	else {
		return 0;
 8005666:	2300      	movs	r3, #0
	}
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	08009f10 	.word	0x08009f10
 8005674:	40006400 	.word	0x40006400
 8005678:	20001568 	.word	0x20001568
 800567c:	40006800 	.word	0x40006800
 8005680:	2000117c 	.word	0x2000117c
 8005684:	40006c00 	.word	0x40006c00
 8005688:	200017d0 	.word	0x200017d0

0800568c <CAN_SendMessage>:
void CAN3_setID(uint32_t ID) {
	CAN_setID(&bus3, ID);
}

/* Send ------------------------------------------------------------------*/
void CAN_SendMessage(uint8_t *ch, CANBus *bus) {
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
	if (bus->number != 0) {
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d017      	beq.n	80056ce <CAN_SendMessage+0x42>
		xprintf("CAN%d: Nachricht wird gesendet: %s\n", bus->number, ch);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	4619      	mov	r1, r3
 80056a6:	480d      	ldr	r0, [pc, #52]	; (80056dc <CAN_SendMessage+0x50>)
 80056a8:	f000 fdc0 	bl	800622c <xprintf>
		HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(bus->hcan,
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	1d19      	adds	r1, r3, #4
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	3338      	adds	r3, #56	; 0x38
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	f7fc f805 	bl	80016c8 <HAL_CAN_AddTxMessage>
 80056be:	4603      	mov	r3, r0
 80056c0:	73fb      	strb	r3, [r7, #15]
				&(bus->pTxHeader), ch, &(bus->TxMailbox));
		xprintf("Nachricht wurde gesendet mit Status: %d\n\n", status);
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	4619      	mov	r1, r3
 80056c6:	4806      	ldr	r0, [pc, #24]	; (80056e0 <CAN_SendMessage+0x54>)
 80056c8:	f000 fdb0 	bl	800622c <xprintf>
	} else {
		xprintf("Bus nicht initialisiert.\n");
	}
}
 80056cc:	e002      	b.n	80056d4 <CAN_SendMessage+0x48>
		xprintf("Bus nicht initialisiert.\n");
 80056ce:	4805      	ldr	r0, [pc, #20]	; (80056e4 <CAN_SendMessage+0x58>)
 80056d0:	f000 fdac 	bl	800622c <xprintf>
}
 80056d4:	bf00      	nop
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	08009f2c 	.word	0x08009f2c
 80056e0:	08009f50 	.word	0x08009f50
 80056e4:	08009f7c 	.word	0x08009f7c

080056e8 <CAN_ReceiveMessage>:
void CAN3_SendMessage(char *ch) {
	CAN_SendMessage((uint8_t*) ch, &bus3);
}

/* Receive ------------------------------------------------------------------*/
void CAN_ReceiveMessage(CANBus *bus) {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	if (bus->number > 0) {
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <CAN_ReceiveMessage+0x26>
		HAL_CAN_GetRxMessage(bus->hcan, CAN_RX_FIFO0, &(bus->pRxHeader),
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f103 021c 	add.w	r2, r3, #28
				bus->receiveBuffer);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	333d      	adds	r3, #61	; 0x3d
		HAL_CAN_GetRxMessage(bus->hcan, CAN_RX_FIFO0, &(bus->pRxHeader),
 8005706:	2100      	movs	r1, #0
 8005708:	f7fc f8b9 	bl	800187e <HAL_CAN_GetRxMessage>
		bus->receiveBuffer[4] = 'N';
		bus->receiveBuffer[5] = 'U';
		bus->receiveBuffer[6] = 'L';
		bus->receiveBuffer[7] = 'L';
	}
}
 800570c:	e025      	b.n	800575a <CAN_ReceiveMessage+0x72>
		xprintf("CAN is not initialized.\n");
 800570e:	4815      	ldr	r0, [pc, #84]	; (8005764 <CAN_ReceiveMessage+0x7c>)
 8005710:	f000 fd8c 	bl	800622c <xprintf>
		bus->receiveBuffer[0] = 'C';
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2243      	movs	r2, #67	; 0x43
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		bus->receiveBuffer[1] = 'A';
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2241      	movs	r2, #65	; 0x41
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		bus->receiveBuffer[2] = 'N';
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	224e      	movs	r2, #78	; 0x4e
 8005728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		bus->receiveBuffer[3] = 48 + bus->number;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	3330      	adds	r3, #48	; 0x30
 8005732:	b2da      	uxtb	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		bus->receiveBuffer[4] = 'N';
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	224e      	movs	r2, #78	; 0x4e
 800573e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		bus->receiveBuffer[5] = 'U';
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2255      	movs	r2, #85	; 0x55
 8005746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		bus->receiveBuffer[6] = 'L';
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	224c      	movs	r2, #76	; 0x4c
 800574e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		bus->receiveBuffer[7] = 'L';
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	224c      	movs	r2, #76	; 0x4c
 8005756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	08009f98 	.word	0x08009f98

08005768 <SDFH_init>:
static uint16_t sec = 0;
static uint8_t len;
static uint8_t lenF;
static uint8_t lenD;

FRESULT SDFH_init() {
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
//	xprintf("Start initSDfileHandling\n");
//
	FRESULT fstate;
	//HAL_Delay(500);
	fstate = f_mount(0, SDPath, 0);
 800576e:	2200      	movs	r2, #0
 8005770:	490b      	ldr	r1, [pc, #44]	; (80057a0 <SDFH_init+0x38>)
 8005772:	2000      	movs	r0, #0
 8005774:	f003 fa94 	bl	8008ca0 <f_mount>
 8005778:	4603      	mov	r3, r0
 800577a:	71fb      	strb	r3, [r7, #7]
	xprintf("First unmount with fstate: %d\n", fstate);
 800577c:	79fb      	ldrb	r3, [r7, #7]
 800577e:	4619      	mov	r1, r3
 8005780:	4808      	ldr	r0, [pc, #32]	; (80057a4 <SDFH_init+0x3c>)
 8005782:	f000 fd53 	bl	800622c <xprintf>
	fstate = f_mount(&fat, SDPath, 1);
 8005786:	2201      	movs	r2, #1
 8005788:	4905      	ldr	r1, [pc, #20]	; (80057a0 <SDFH_init+0x38>)
 800578a:	4807      	ldr	r0, [pc, #28]	; (80057a8 <SDFH_init+0x40>)
 800578c:	f003 fa88 	bl	8008ca0 <f_mount>
 8005790:	4603      	mov	r3, r0
 8005792:	71fb      	strb	r3, [r7, #7]
//			f_close(&file);
//		}
//	} else {
//		//xprintf("Mount failed.\n");
//	}
	return fstate;
 8005794:	79fb      	ldrb	r3, [r7, #7]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20001970 	.word	0x20001970
 80057a4:	08009fb4 	.word	0x08009fb4
 80057a8:	20000090 	.word	0x20000090

080057ac <SDFH_openFile>:

void SDFH_packData(char *sendMsg, uint16_t data1, uint16_t data2) {
	sprintf(sendMsg, "%d\t%d\n", data1, data2);
}

FRESULT SDFH_openFile(char* fileName) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
	//f_close(&file);
	return f_open(&file, fileName, FA_WRITE | FA_CREATE_ALWAYS);
 80057b4:	220a      	movs	r2, #10
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	4803      	ldr	r0, [pc, #12]	; (80057c8 <SDFH_openFile+0x1c>)
 80057ba:	f003 fab7 	bl	8008d2c <f_open>
 80057be:	4603      	mov	r3, r0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	200039dc 	.word	0x200039dc

080057cc <SDFH_closeFile>:

FRESULT SDFH_closeFile() {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
	return f_close(&file);
 80057d0:	4802      	ldr	r0, [pc, #8]	; (80057dc <SDFH_closeFile+0x10>)
 80057d2:	f003 fe89 	bl	80094e8 <f_close>
 80057d6:	4603      	mov	r3, r0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	200039dc 	.word	0x200039dc

080057e0 <SDFH_writeToFile>:

FRESULT SDFH_writeToFile(char* input, uint16_t inputLength) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	807b      	strh	r3, [r7, #2]
	return f_write(&file, input, inputLength, &state);
 80057ec:	887a      	ldrh	r2, [r7, #2]
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <SDFH_writeToFile+0x24>)
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	4805      	ldr	r0, [pc, #20]	; (8005808 <SDFH_writeToFile+0x28>)
 80057f4:	f003 fc66 	bl	80090c4 <f_write>
 80057f8:	4603      	mov	r3, r0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	200039d8 	.word	0x200039d8
 8005808:	200039dc 	.word	0x200039dc

0800580c <CANP_packHeader>:
static const int mask_08bit = (int) 0x000000FF;
static const int mask_04bit = (int) 0x0000000F;
static const int mask_03bit = (int) 0x00000007;

// Sending -----------------------------------------------------------------------------
uint32_t CANP_packHeader(CANP_MessageHeader *mHeader) {
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
	uint32_t header = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]
	header = header | (mask_03bit & mHeader->sourceMCU) << sourceOffset;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	2307      	movs	r3, #7
 8005820:	4013      	ands	r3, r2
 8005822:	221a      	movs	r2, #26
 8005824:	4093      	lsls	r3, r2
 8005826:	461a      	mov	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
	header = header | (mask_03bit & mHeader->targetMCU) << targetOffset;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	785b      	ldrb	r3, [r3, #1]
 8005832:	461a      	mov	r2, r3
 8005834:	2307      	movs	r3, #7
 8005836:	4013      	ands	r3, r2
 8005838:	2217      	movs	r2, #23
 800583a:	4093      	lsls	r3, r2
 800583c:	461a      	mov	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
	header = header | (mask_03bit & mHeader->messageType) << meTypeOffset;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	789b      	ldrb	r3, [r3, #2]
 8005848:	461a      	mov	r2, r3
 800584a:	2307      	movs	r3, #7
 800584c:	4013      	ands	r3, r2
 800584e:	2214      	movs	r2, #20
 8005850:	4093      	lsls	r3, r2
 8005852:	461a      	mov	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
	header = header | (mask_20bit & mHeader->timeStamp);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4a06      	ldr	r2, [pc, #24]	; (8005878 <CANP_packHeader+0x6c>)
 8005860:	4013      	ands	r3, r2
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
	return header;
 8005868:	68fb      	ldr	r3, [r7, #12]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	000fffff 	.word	0x000fffff

0800587c <buildHalfPayload>:

void buildHalfPayload(uint8_t *payload, CANP_Data *data, uint8_t startIndx) {
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	4613      	mov	r3, r2
 8005888:	71fb      	strb	r3, [r7, #7]
	payload[startIndx + 0] = data->header.status << 4 | (mask_04bit & data->header.ID >> 8);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	789b      	ldrb	r3, [r3, #2]
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	b25a      	sxtb	r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	0a1b      	lsrs	r3, r3, #8
 8005898:	b29b      	uxth	r3, r3
 800589a:	b259      	sxtb	r1, r3
 800589c:	230f      	movs	r3, #15
 800589e:	b25b      	sxtb	r3, r3
 80058a0:	400b      	ands	r3, r1
 80058a2:	b25b      	sxtb	r3, r3
 80058a4:	4313      	orrs	r3, r2
 80058a6:	b259      	sxtb	r1, r3
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	b2ca      	uxtb	r2, r1
 80058b0:	701a      	strb	r2, [r3, #0]
	payload[startIndx + 1] = data->header.ID;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	8819      	ldrh	r1, [r3, #0]
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	3301      	adds	r3, #1
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	b2ca      	uxtb	r2, r1
 80058c0:	701a      	strb	r2, [r3, #0]
	payload[startIndx + 2] = data->payload >> 8;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	889b      	ldrh	r3, [r3, #4]
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	b299      	uxth	r1, r3
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	3302      	adds	r3, #2
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	b2ca      	uxtb	r2, r1
 80058d4:	701a      	strb	r2, [r3, #0]
	payload[startIndx + 3] = data->payload;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	8899      	ldrh	r1, [r3, #4]
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	3303      	adds	r3, #3
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	b2ca      	uxtb	r2, r1
 80058e4:	701a      	strb	r2, [r3, #0]
}
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <CANP_packData>:

void CANP_packData(CANP_Package *package, CANP_DataMessage *message) {
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b082      	sub	sp, #8
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
	message->header.messageType = DATA;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2203      	movs	r2, #3
 8005900:	709a      	strb	r2, [r3, #2]
	package->extID = CANP_packHeader(&message->header);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff ff81 	bl	800580c <CANP_packHeader>
 800590a:	4602      	mov	r2, r0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	601a      	str	r2, [r3, #0]

	buildHalfPayload(package->payload, &message->data1, 0);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	1d18      	adds	r0, r3, #4
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	3308      	adds	r3, #8
 8005918:	2200      	movs	r2, #0
 800591a:	4619      	mov	r1, r3
 800591c:	f7ff ffae 	bl	800587c <buildHalfPayload>
	buildHalfPayload(package->payload, &message->data2, 4);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	1d18      	adds	r0, r3, #4
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	330e      	adds	r3, #14
 8005928:	2204      	movs	r2, #4
 800592a:	4619      	mov	r1, r3
 800592c:	f7ff ffa6 	bl	800587c <buildHalfPayload>
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <CANP_packTransition>:
	package->payload[2] = DATA_OK << 4 | (message->dataID2 >> 8 & mask_04bit);
	package->payload[3] = message->dataID2;
	package->payload[4] = message->state;
}

void CANP_packTransition(CANP_Package *package, CANP_TransitionMessage *message) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
	message->header.messageType = TRANSITION;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2201      	movs	r2, #1
 8005946:	709a      	strb	r2, [r3, #2]
	package->extID = CANP_packHeader(&message->header);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff ff5e 	bl	800580c <CANP_packHeader>
 8005950:	4602      	mov	r2, r0
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	601a      	str	r2, [r3, #0]

	package->payload[0] = (TRANSITION & mask_04bit) | ((TRANSITION & mask_04bit) << 4);
 8005956:	230f      	movs	r3, #15
 8005958:	b25b      	sxtb	r3, r3
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	b25a      	sxtb	r2, r3
 8005960:	230f      	movs	r3, #15
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	b25b      	sxtb	r3, r3
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	b25b      	sxtb	r3, r3
 800596c:	4313      	orrs	r3, r2
 800596e:	b25b      	sxtb	r3, r3
 8005970:	b2da      	uxtb	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	711a      	strb	r2, [r3, #4]
	package->payload[1] = package->payload[0];
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	791a      	ldrb	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	715a      	strb	r2, [r3, #5]
	package->payload[2] = message->state;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	7a1a      	ldrb	r2, [r3, #8]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	719a      	strb	r2, [r3, #6]
	package->payload[3] = message->state;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	7a1a      	ldrb	r2, [r3, #8]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	71da      	strb	r2, [r3, #7]
	package->payload[4] = message->state;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	7a1a      	ldrb	r2, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	721a      	strb	r2, [r3, #8]
}
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <CANP_unpackHeader>:

// Interpreting -----------------------------------------------------------------------------
void CANP_unpackHeader(CANP_Package *package, CANP_MessageHeader *mHeader) {
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
	uint32_t header = package->extID;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60fb      	str	r3, [r7, #12]
	mHeader->sourceMCU = mask_03bit & header >> sourceOffset;
 80059b0:	231a      	movs	r3, #26
 80059b2:	461a      	mov	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	40d3      	lsrs	r3, r2
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	2307      	movs	r3, #7
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	4013      	ands	r3, r2
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	701a      	strb	r2, [r3, #0]
	mHeader->targetMCU = mask_03bit & header >> targetOffset;
 80059c6:	2317      	movs	r3, #23
 80059c8:	461a      	mov	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	40d3      	lsrs	r3, r2
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	2307      	movs	r3, #7
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	4013      	ands	r3, r2
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	705a      	strb	r2, [r3, #1]
	mHeader->messageType = mask_03bit & header >> meTypeOffset;
 80059dc:	2314      	movs	r3, #20
 80059de:	461a      	mov	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	40d3      	lsrs	r3, r2
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	2307      	movs	r3, #7
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	4013      	ands	r3, r2
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	709a      	strb	r2, [r3, #2]
	mHeader->timeStamp = mask_20bit & header;
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <CANP_unpackHeader+0x6c>)
 80059f4:	461a      	mov	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	401a      	ands	r2, r3
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	605a      	str	r2, [r3, #4]
}
 80059fe:	bf00      	nop
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	000fffff 	.word	0x000fffff

08005a10 <CANP_unpackSingleDataFromMessage>:

void CANP_unpackSingleDataFromMessage(CANP_Data *data, uint8_t *buffer, uint8_t startIndx) {
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	71fb      	strb	r3, [r7, #7]
	data->header.status = buffer[startIndx] >> 4 & mask_04bit;
 8005a1e:	79fb      	ldrb	r3, [r7, #7]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	4413      	add	r3, r2
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	b25a      	sxtb	r2, r3
 8005a2c:	230f      	movs	r3, #15
 8005a2e:	b25b      	sxtb	r3, r3
 8005a30:	4013      	ands	r3, r2
 8005a32:	b25b      	sxtb	r3, r3
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	709a      	strb	r2, [r3, #2]
	data->header.ID = (mask_04bit & buffer[startIndx]) << 8 | buffer[startIndx + 1];
 8005a3a:	79fb      	ldrb	r3, [r7, #7]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	4413      	add	r3, r2
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	230f      	movs	r3, #15
 8005a46:	4013      	ands	r3, r2
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	b21a      	sxth	r2, r3
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	440b      	add	r3, r1
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	b21b      	sxth	r3, r3
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	b21b      	sxth	r3, r3
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	801a      	strh	r2, [r3, #0]
	data->payload = buffer[startIndx + 2] << 8 | buffer[startIndx + 3];
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	3302      	adds	r3, #2
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	4413      	add	r3, r2
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	021b      	lsls	r3, r3, #8
 8005a6e:	b21a      	sxth	r2, r3
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	3303      	adds	r3, #3
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	440b      	add	r3, r1
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b21b      	sxth	r3, r3
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	b21b      	sxth	r3, r3
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	809a      	strh	r2, [r3, #4]
}
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <CANP_unpackDataMessage>:

void CANP_unpackDataMessage(CANP_Package *package, CANP_DataMessage *message) {
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b082      	sub	sp, #8
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	6039      	str	r1, [r7, #0]
	CANP_unpackHeader(package, (CANP_MessageHeader*) message);
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff ff7e 	bl	80059a0 <CANP_unpackHeader>
	CANP_unpackSingleDataFromMessage(&(message->data1), package->payload, 0);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	f103 0008 	add.w	r0, r3, #8
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3304      	adds	r3, #4
 8005aae:	2200      	movs	r2, #0
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f7ff ffad 	bl	8005a10 <CANP_unpackSingleDataFromMessage>
	CANP_unpackSingleDataFromMessage(&(message->data2), package->payload, 4);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	f103 000e 	add.w	r0, r3, #14
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	f7ff ffa4 	bl	8005a10 <CANP_unpackSingleDataFromMessage>
}
 8005ac8:	bf00      	nop
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <CANP_unpackRequestDataMessage>:

void CANP_unpackRequestDataMessage(CANP_Package *package, CANP_RequestDataMessage *message) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
	CANP_unpackHeader(package, (CANP_MessageHeader*) message);
 8005ada:	6839      	ldr	r1, [r7, #0]
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff ff5f 	bl	80059a0 <CANP_unpackHeader>
	message->state = package->payload[4];
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	7a1a      	ldrb	r2, [r3, #8]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	731a      	strb	r2, [r3, #12]
	message->dataID1 = (package->payload[0] & mask_04bit) << 8 | package->payload[1];
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	791b      	ldrb	r3, [r3, #4]
 8005aee:	461a      	mov	r2, r3
 8005af0:	230f      	movs	r3, #15
 8005af2:	4013      	ands	r3, r2
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	b21a      	sxth	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	795b      	ldrb	r3, [r3, #5]
 8005afc:	b21b      	sxth	r3, r3
 8005afe:	4313      	orrs	r3, r2
 8005b00:	b21b      	sxth	r3, r3
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	811a      	strh	r2, [r3, #8]
	message->dataID2 = (package->payload[2] & mask_04bit) << 8 | package->payload[3];
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	799b      	ldrb	r3, [r3, #6]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	230f      	movs	r3, #15
 8005b10:	4013      	ands	r3, r2
 8005b12:	021b      	lsls	r3, r3, #8
 8005b14:	b21a      	sxth	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	79db      	ldrb	r3, [r3, #7]
 8005b1a:	b21b      	sxth	r3, r3
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	b21b      	sxth	r3, r3
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	815a      	strh	r2, [r3, #10]
}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <CANP_unpackTransitionMessage>:

void CANP_unpackTransitionMessage(CANP_Package *package, CANP_TransitionMessage *message) {
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b086      	sub	sp, #24
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
	CANP_unpackHeader(package, (CANP_MessageHeader*) message);
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff ff30 	bl	80059a0 <CANP_unpackHeader>
	MESSAGE_TYPE mType1 = package->payload[0] >> 4;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	791b      	ldrb	r3, [r3, #4]
 8005b44:	091b      	lsrs	r3, r3, #4
 8005b46:	75fb      	strb	r3, [r7, #23]
	MESSAGE_TYPE mType2 = package->payload[0] & mask_04bit;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	791b      	ldrb	r3, [r3, #4]
 8005b4c:	b25a      	sxtb	r2, r3
 8005b4e:	230f      	movs	r3, #15
 8005b50:	b25b      	sxtb	r3, r3
 8005b52:	4013      	ands	r3, r2
 8005b54:	b25b      	sxtb	r3, r3
 8005b56:	75bb      	strb	r3, [r7, #22]
	MESSAGE_TYPE mType3 = package->payload[1] >> 4;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	795b      	ldrb	r3, [r3, #5]
 8005b5c:	091b      	lsrs	r3, r3, #4
 8005b5e:	757b      	strb	r3, [r7, #21]
	MESSAGE_TYPE mType4 = package->payload[1] & mask_04bit;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	795b      	ldrb	r3, [r3, #5]
 8005b64:	b25a      	sxtb	r2, r3
 8005b66:	230f      	movs	r3, #15
 8005b68:	b25b      	sxtb	r3, r3
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	b25b      	sxtb	r3, r3
 8005b6e:	753b      	strb	r3, [r7, #20]

	uint8_t firstHalfIsTransition = 1;
 8005b70:	2301      	movs	r3, #1
 8005b72:	74fb      	strb	r3, [r7, #19]
	firstHalfIsTransition = firstHalfIsTransition && mType1 == TRANSITION;
 8005b74:	7cfb      	ldrb	r3, [r7, #19]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d004      	beq.n	8005b84 <CANP_unpackTransitionMessage+0x56>
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <CANP_unpackTransitionMessage+0x56>
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <CANP_unpackTransitionMessage+0x58>
 8005b84:	2300      	movs	r3, #0
 8005b86:	74fb      	strb	r3, [r7, #19]
	firstHalfIsTransition = firstHalfIsTransition && mType2 == TRANSITION;
 8005b88:	7cfb      	ldrb	r3, [r7, #19]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <CANP_unpackTransitionMessage+0x6a>
 8005b8e:	7dbb      	ldrb	r3, [r7, #22]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <CANP_unpackTransitionMessage+0x6a>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <CANP_unpackTransitionMessage+0x6c>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	74fb      	strb	r3, [r7, #19]
	firstHalfIsTransition = firstHalfIsTransition && mType3 == TRANSITION;
 8005b9c:	7cfb      	ldrb	r3, [r7, #19]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d004      	beq.n	8005bac <CANP_unpackTransitionMessage+0x7e>
 8005ba2:	7d7b      	ldrb	r3, [r7, #21]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <CANP_unpackTransitionMessage+0x7e>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <CANP_unpackTransitionMessage+0x80>
 8005bac:	2300      	movs	r3, #0
 8005bae:	74fb      	strb	r3, [r7, #19]
	firstHalfIsTransition = firstHalfIsTransition && mType4 == TRANSITION;
 8005bb0:	7cfb      	ldrb	r3, [r7, #19]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d004      	beq.n	8005bc0 <CANP_unpackTransitionMessage+0x92>
 8005bb6:	7d3b      	ldrb	r3, [r7, #20]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <CANP_unpackTransitionMessage+0x92>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <CANP_unpackTransitionMessage+0x94>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	74fb      	strb	r3, [r7, #19]

	STATE_ID state1 = package->payload[2];
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	799b      	ldrb	r3, [r3, #6]
 8005bc8:	74bb      	strb	r3, [r7, #18]
	STATE_ID state2 = package->payload[3];
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	79db      	ldrb	r3, [r3, #7]
 8005bce:	747b      	strb	r3, [r7, #17]
	STATE_ID state3 = package->payload[4];
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	7a1b      	ldrb	r3, [r3, #8]
 8005bd4:	743b      	strb	r3, [r7, #16]

	uint8_t isStatesConsistent = state1 == state2 && state2 == state3;
 8005bd6:	7cba      	ldrb	r2, [r7, #18]
 8005bd8:	7c7b      	ldrb	r3, [r7, #17]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d105      	bne.n	8005bea <CANP_unpackTransitionMessage+0xbc>
 8005bde:	7c7a      	ldrb	r2, [r7, #17]
 8005be0:	7c3b      	ldrb	r3, [r7, #16]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d101      	bne.n	8005bea <CANP_unpackTransitionMessage+0xbc>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e000      	b.n	8005bec <CANP_unpackTransitionMessage+0xbe>
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]

	message->messageValid = firstHalfIsTransition && isStatesConsistent;
 8005bee:	7cfb      	ldrb	r3, [r7, #19]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <CANP_unpackTransitionMessage+0xd0>
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <CANP_unpackTransitionMessage+0xd0>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <CANP_unpackTransitionMessage+0xd2>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	725a      	strb	r2, [r3, #9]
	message->state = message->messageValid ? state1 : NULL_STATE;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	7a5b      	ldrb	r3, [r3, #9]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <CANP_unpackTransitionMessage+0xe4>
 8005c0e:	7cba      	ldrb	r2, [r7, #18]
 8005c10:	e000      	b.n	8005c14 <CANP_unpackTransitionMessage+0xe6>
 8005c12:	2200      	movs	r2, #0
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	721a      	strb	r2, [r3, #8]
}
 8005c18:	bf00      	nop
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <CANP_unpackStatus>:

void CANP_unpackStatus(CANP_Data *data, CANP_Status *status) {
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
	status->header = data->header;
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6013      	str	r3, [r2, #0]
	status->mcuStatus = data->payload >> 8;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	889b      	ldrh	r3, [r3, #4]
 8005c36:	0a1b      	lsrs	r3, r3, #8
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	715a      	strb	r2, [r3, #5]
	status->state = mask_08bit & data->payload;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	889b      	ldrh	r3, [r3, #4]
 8005c44:	b25a      	sxtb	r2, r3
 8005c46:	23ff      	movs	r3, #255	; 0xff
 8005c48:	b25b      	sxtb	r3, r3
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	b25b      	sxtb	r3, r3
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	719a      	strb	r2, [r3, #6]
	status->mcu = status->mcuStatus >> 5;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	795b      	ldrb	r3, [r3, #5]
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	711a      	strb	r2, [r3, #4]
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <CANP_packStatus>:

void CANP_packStatus(CANP_Data *data, CANP_Status *status) {
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
	data->header = status->header;
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6013      	str	r3, [r2, #0]
	data->payload = status->mcuStatus << 8 | status->state;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	795b      	ldrb	r3, [r3, #5]
 8005c82:	021b      	lsls	r3, r3, #8
 8005c84:	b21a      	sxth	r2, r3
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	799b      	ldrb	r3, [r3, #6]
 8005c8a:	b21b      	sxth	r3, r3
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	b21b      	sxth	r3, r3
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	809a      	strh	r2, [r3, #4]
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <voidMethod>:
 *      Author: Bayram
 */

#include "core/stateMachine/stateMachine.h"

void voidMethod() {
 8005ca2:	b480      	push	{r7}
 8005ca4:	af00      	add	r7, sp, #0
	// Empty Method
	// Is empty, shall remain empty...
}
 8005ca6:	bf00      	nop
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <voidVoidMethod>:

void voidVoidMethod(void *p) {
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
	// Empty Method
	// Is empty, shall remain empty...
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <initDefaultTask>:

void initDefaultTask(volatile Tasks *tasks) {
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
	tasks->entry = &voidMethod;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a11      	ldr	r2, [pc, #68]	; (8005d14 <initDefaultTask+0x50>)
 8005cd0:	601a      	str	r2, [r3, #0]
	tasks->whileHandle = &voidMethod;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a0f      	ldr	r2, [pc, #60]	; (8005d14 <initDefaultTask+0x50>)
 8005cd6:	605a      	str	r2, [r3, #4]
	tasks->canHandle = &voidVoidMethod;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a0f      	ldr	r2, [pc, #60]	; (8005d18 <initDefaultTask+0x54>)
 8005cdc:	609a      	str	r2, [r3, #8]
	tasks->exit = &voidMethod;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a0c      	ldr	r2, [pc, #48]	; (8005d14 <initDefaultTask+0x50>)
 8005ce2:	60da      	str	r2, [r3, #12]

	tasks->alfaHandle = &voidMethod;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a0b      	ldr	r2, [pc, #44]	; (8005d14 <initDefaultTask+0x50>)
 8005ce8:	611a      	str	r2, [r3, #16]
	tasks->bravoHandle = &voidMethod;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a09      	ldr	r2, [pc, #36]	; (8005d14 <initDefaultTask+0x50>)
 8005cee:	615a      	str	r2, [r3, #20]
	tasks->charlieHandle = &voidMethod;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a08      	ldr	r2, [pc, #32]	; (8005d14 <initDefaultTask+0x50>)
 8005cf4:	619a      	str	r2, [r3, #24]
	tasks->deltaHandle = &voidMethod;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a06      	ldr	r2, [pc, #24]	; (8005d14 <initDefaultTask+0x50>)
 8005cfa:	61da      	str	r2, [r3, #28]
	tasks->echoHandle = &voidMethod;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a05      	ldr	r2, [pc, #20]	; (8005d14 <initDefaultTask+0x50>)
 8005d00:	621a      	str	r2, [r3, #32]
	tasks->foxtrotHandle = &voidMethod;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a03      	ldr	r2, [pc, #12]	; (8005d14 <initDefaultTask+0x50>)
 8005d06:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	08005ca3 	.word	0x08005ca3
 8005d18:	08005cb1 	.word	0x08005cb1

08005d1c <initMicrocontroller>:

void initMicrocontroller() {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
	xprintf("Initializing MCs\n");
 8005d22:	4815      	ldr	r0, [pc, #84]	; (8005d78 <initMicrocontroller+0x5c>)
 8005d24:	f000 fa82 	bl	800622c <xprintf>

	for (int j = 0; j < STATE_ID_END; j++) {
 8005d28:	2300      	movs	r3, #0
 8005d2a:	607b      	str	r3, [r7, #4]
 8005d2c:	e017      	b.n	8005d5e <initMicrocontroller+0x42>
		initDefaultTask(&microcontroller.mcStates[j].tasks);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	222c      	movs	r2, #44	; 0x2c
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	3308      	adds	r3, #8
 8005d38:	4a10      	ldr	r2, [pc, #64]	; (8005d7c <initMicrocontroller+0x60>)
 8005d3a:	4413      	add	r3, r2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff ffc1 	bl	8005cc4 <initDefaultTask>
		microcontroller.mcStates[j].stateID = j;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	b2d8      	uxtb	r0, r3
 8005d46:	4a0d      	ldr	r2, [pc, #52]	; (8005d7c <initMicrocontroller+0x60>)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	212c      	movs	r1, #44	; 0x2c
 8005d4c:	fb01 f303 	mul.w	r3, r1, r3
 8005d50:	4413      	add	r3, r2
 8005d52:	3330      	adds	r3, #48	; 0x30
 8005d54:	4602      	mov	r2, r0
 8005d56:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < STATE_ID_END; j++) {
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	607b      	str	r3, [r7, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b0a      	cmp	r3, #10
 8005d62:	dde4      	ble.n	8005d2e <initMicrocontroller+0x12>
	}
	microcontroller.state = getMCState(NULL_STATE);
 8005d64:	2000      	movs	r0, #0
 8005d66:	f000 f817 	bl	8005d98 <getMCState>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <initMicrocontroller+0x60>)
 8005d6e:	601a      	str	r2, [r3, #0]
}
 8005d70:	bf00      	nop
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	0800a014 	.word	0x0800a014
 8005d7c:	200015e4 	.word	0x200015e4

08005d80 <getTasks>:

Tasks* getTasks() {
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
	return &microcontroller.state->tasks;
 8005d84:	4b03      	ldr	r3, [pc, #12]	; (8005d94 <getTasks+0x14>)
 8005d86:	681b      	ldr	r3, [r3, #0]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	200015e4 	.word	0x200015e4

08005d98 <getMCState>:

MC_State* getMCState(STATE_ID id) {
 8005d98:	b4b0      	push	{r4, r5, r7}
 8005d9a:	b091      	sub	sp, #68	; 0x44
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	71fb      	strb	r3, [r7, #7]
	volatile MC_State *state = &(microcontroller.mcStates[0]);
 8005da2:	4b18      	ldr	r3, [pc, #96]	; (8005e04 <getMCState+0x6c>)
 8005da4:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (int i = 0; i < STATE_ID_END; i++) {
 8005da6:	2300      	movs	r3, #0
 8005da8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005daa:	e022      	b.n	8005df2 <getMCState+0x5a>
		MC_State currentState = microcontroller.mcStates[i];
 8005dac:	4a16      	ldr	r2, [pc, #88]	; (8005e08 <getMCState+0x70>)
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	212c      	movs	r1, #44	; 0x2c
 8005db2:	fb01 f303 	mul.w	r3, r1, r3
 8005db6:	4413      	add	r3, r2
 8005db8:	3308      	adds	r3, #8
 8005dba:	f107 040c 	add.w	r4, r7, #12
 8005dbe:	461d      	mov	r5, r3
 8005dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005dcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if (currentState.stateID == id) {
 8005dd0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005dd4:	79fa      	ldrb	r2, [r7, #7]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d108      	bne.n	8005dec <getMCState+0x54>
			state = &microcontroller.mcStates[i];
 8005dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ddc:	222c      	movs	r2, #44	; 0x2c
 8005dde:	fb02 f303 	mul.w	r3, r2, r3
 8005de2:	3308      	adds	r3, #8
 8005de4:	4a08      	ldr	r2, [pc, #32]	; (8005e08 <getMCState+0x70>)
 8005de6:	4413      	add	r3, r2
 8005de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dea:	e005      	b.n	8005df8 <getMCState+0x60>
	for (int i = 0; i < STATE_ID_END; i++) {
 8005dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dee:	3301      	adds	r3, #1
 8005df0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	2b0a      	cmp	r3, #10
 8005df6:	ddd9      	ble.n	8005dac <getMCState+0x14>
			break;
		}
	}
	return state;
 8005df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3744      	adds	r7, #68	; 0x44
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bcb0      	pop	{r4, r5, r7}
 8005e02:	4770      	bx	lr
 8005e04:	200015ec 	.word	0x200015ec
 8005e08:	200015e4 	.word	0x200015e4

08005e0c <stateTransition>:
uint8_t isStateHigher(STATE_ID stateID) {
	uint8_t isStateValid = stateID > microcontroller.state->stateID;
	return isStateValid;
}

void stateTransition(STATE_ID stateID) {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	4603      	mov	r3, r0
 8005e14:	71fb      	strb	r3, [r7, #7]
//	if (isStateHigher(stateID)) {
	microcontroller.state->tasks.exit();
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <stateTransition+0x30>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	4798      	blx	r3
	microcontroller.state = getMCState(stateID);
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff ffb9 	bl	8005d98 <getMCState>
 8005e26:	4602      	mov	r2, r0
 8005e28:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <stateTransition+0x30>)
 8005e2a:	601a      	str	r2, [r3, #0]
	microcontroller.state->tasks.entry();
 8005e2c:	4b03      	ldr	r3, [pc, #12]	; (8005e3c <stateTransition+0x30>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4798      	blx	r3
//	}
}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	200015e4 	.word	0x200015e4

08005e40 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	71fb      	strb	r3, [r7, #7]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	2b0a      	cmp	r3, #10
 8005e4e:	d102      	bne.n	8005e56 <xputc+0x16>
 8005e50:	200d      	movs	r0, #13
 8005e52:	f7ff fff5 	bl	8005e40 <xputc>

	if (outptr) {		/* Destination is memory */
 8005e56:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <xputc+0x48>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <xputc+0x2e>
		*outptr++ = (unsigned char)c;
 8005e5e:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <xputc+0x48>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	4908      	ldr	r1, [pc, #32]	; (8005e88 <xputc+0x48>)
 8005e66:	600a      	str	r2, [r1, #0]
 8005e68:	79fa      	ldrb	r2, [r7, #7]
 8005e6a:	701a      	strb	r2, [r3, #0]
		return;
 8005e6c:	e008      	b.n	8005e80 <xputc+0x40>
	}
	if (xfunc_out) {	/* Destination is device */
 8005e6e:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <xputc+0x4c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d004      	beq.n	8005e80 <xputc+0x40>
		xfunc_out((unsigned char)c);
 8005e76:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <xputc+0x4c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	79fa      	ldrb	r2, [r7, #7]
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4798      	blx	r3
	}
}
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	200010c4 	.word	0x200010c4
 8005e8c:	20004a10 	.word	0x20004a10

08005e90 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	while (*str) {
 8005e98:	e006      	b.n	8005ea8 <xputs+0x18>
		xputc(*str++);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff ffcc 	bl	8005e40 <xputc>
	while (*str) {
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f4      	bne.n	8005e9a <xputs+0xa>
	}
}
 8005eb0:	bf00      	nop
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b094      	sub	sp, #80	; 0x50
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
	unsigned long vs;
#endif


	for (;;) {
		c = *fmt++;					/* Get a format character */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!c) break;				/* End of format? */
 8005ece:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 81a3 	beq.w	800621e <xvprintf+0x366>
		if (c != '%') {				/* Pass it through if not a % sequense */
 8005ed8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005edc:	2b25      	cmp	r3, #37	; 0x25
 8005ede:	d005      	beq.n	8005eec <xvprintf+0x34>
			xputc(c); continue;
 8005ee0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff ffab 	bl	8005e40 <xputc>
 8005eea:	e197      	b.n	800621c <xvprintf+0x364>
		}
		f = w = 0;					/* Clear parms */
 8005eec:	2300      	movs	r3, #0
 8005eee:	643b      	str	r3, [r7, #64]	; 0x40
 8005ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
		c = *fmt++;					/* Get first char of the sequense */
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	607a      	str	r2, [r7, #4]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (c == '0') {				/* Flag: left '0' padded */
 8005f00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f04:	2b30      	cmp	r3, #48	; 0x30
 8005f06:	d108      	bne.n	8005f1a <xvprintf+0x62>
			f = 1; c = *fmt++;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	607a      	str	r2, [r7, #4]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005f18:	e00b      	b.n	8005f32 <xvprintf+0x7a>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8005f1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f1e:	2b2d      	cmp	r3, #45	; 0x2d
 8005f20:	d107      	bne.n	8005f32 <xvprintf+0x7a>
				f = 2; c = *fmt++;
 8005f22:	2302      	movs	r3, #2
 8005f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 8005f32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f36:	2b2a      	cmp	r3, #42	; 0x2a
 8005f38:	d126      	bne.n	8005f88 <xvprintf+0xd0>
			n = va_arg(arp, int);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	1d1a      	adds	r2, r3, #4
 8005f3e:	603a      	str	r2, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	63bb      	str	r3, [r7, #56]	; 0x38
			if (n < 0) {			/* Flag: left justified */
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da04      	bge.n	8005f54 <xvprintf+0x9c>
				n = 0 - n;
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	425b      	negs	r3, r3
 8005f4e:	63bb      	str	r3, [r7, #56]	; 0x38
				f = 2;
 8005f50:	2302      	movs	r3, #2
 8005f52:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			w = n; c = *fmt++;
 8005f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f56:	643b      	str	r3, [r7, #64]	; 0x40
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005f64:	e018      	b.n	8005f98 <xvprintf+0xe0>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 8005f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f68:	4613      	mov	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	461a      	mov	r2, r3
 8005f72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f76:	4413      	add	r3, r2
 8005f78:	3b30      	subs	r3, #48	; 0x30
 8005f7a:	643b      	str	r3, [r7, #64]	; 0x40
				c = *fmt++;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	607a      	str	r2, [r7, #4]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			while (c >= '0' && c <= '9') {	/* Minimum width */
 8005f88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f8c:	2b2f      	cmp	r3, #47	; 0x2f
 8005f8e:	d903      	bls.n	8005f98 <xvprintf+0xe0>
 8005f90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f94:	2b39      	cmp	r3, #57	; 0x39
 8005f96:	d9e6      	bls.n	8005f66 <xvprintf+0xae>
			}
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long */
 8005f98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f9c:	2b6c      	cmp	r3, #108	; 0x6c
 8005f9e:	d003      	beq.n	8005fa8 <xvprintf+0xf0>
 8005fa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fa4:	2b4c      	cmp	r3, #76	; 0x4c
 8005fa6:	d109      	bne.n	8005fbc <xvprintf+0x104>
			f |= 4; c = *fmt++;
 8005fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005faa:	f043 0304 	orr.w	r3, r3, #4
 8005fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	607a      	str	r2, [r7, #4]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (c == 'l' || c == 'L') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 8005fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 812e 	beq.w	8006222 <xvprintf+0x36a>
		d = c;
 8005fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (d >= 'a') d -= 0x20;
 8005fce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005fd2:	2b60      	cmp	r3, #96	; 0x60
 8005fd4:	d904      	bls.n	8005fe0 <xvprintf+0x128>
 8005fd6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005fda:	3b20      	subs	r3, #32
 8005fdc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		switch (d) {				/* Type is... */
 8005fe0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005fe4:	3b42      	subs	r3, #66	; 0x42
 8005fe6:	2b16      	cmp	r3, #22
 8005fe8:	d873      	bhi.n	80060d2 <xvprintf+0x21a>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <xvprintf+0x138>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	080060bb 	.word	0x080060bb
 8005ff4:	080060a9 	.word	0x080060a9
 8005ff8:	080060c7 	.word	0x080060c7
 8005ffc:	080060d3 	.word	0x080060d3
 8006000:	080060d3 	.word	0x080060d3
 8006004:	080060d3 	.word	0x080060d3
 8006008:	080060d3 	.word	0x080060d3
 800600c:	080060d3 	.word	0x080060d3
 8006010:	080060d3 	.word	0x080060d3
 8006014:	080060d3 	.word	0x080060d3
 8006018:	080060d3 	.word	0x080060d3
 800601c:	080060d3 	.word	0x080060d3
 8006020:	080060d3 	.word	0x080060d3
 8006024:	080060c1 	.word	0x080060c1
 8006028:	080060d3 	.word	0x080060d3
 800602c:	080060d3 	.word	0x080060d3
 8006030:	080060d3 	.word	0x080060d3
 8006034:	0800604d 	.word	0x0800604d
 8006038:	080060d3 	.word	0x080060d3
 800603c:	080060c7 	.word	0x080060c7
 8006040:	080060d3 	.word	0x080060d3
 8006044:	080060d3 	.word	0x080060d3
 8006048:	080060cd 	.word	0x080060cd
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	1d1a      	adds	r2, r3, #4
 8006050:	603a      	str	r2, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28
			for (j = 0; p[j]; j++) ;
 8006056:	2300      	movs	r3, #0
 8006058:	647b      	str	r3, [r7, #68]	; 0x44
 800605a:	e002      	b.n	8006062 <xvprintf+0x1aa>
 800605c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800605e:	3301      	adds	r3, #1
 8006060:	647b      	str	r3, [r7, #68]	; 0x44
 8006062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006066:	4413      	add	r3, r2
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f6      	bne.n	800605c <xvprintf+0x1a4>
			while (!(f & 2) && j++ < w) xputc(' ');
 800606e:	e002      	b.n	8006076 <xvprintf+0x1be>
 8006070:	2020      	movs	r0, #32
 8006072:	f7ff fee5 	bl	8005e40 <xputc>
 8006076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d105      	bne.n	800608c <xvprintf+0x1d4>
 8006080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	647a      	str	r2, [r7, #68]	; 0x44
 8006086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006088:	429a      	cmp	r2, r3
 800608a:	d8f1      	bhi.n	8006070 <xvprintf+0x1b8>
			xputs(p);
 800608c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800608e:	f7ff feff 	bl	8005e90 <xputs>
			while (j++ < w) xputc(' ');
 8006092:	e002      	b.n	800609a <xvprintf+0x1e2>
 8006094:	2020      	movs	r0, #32
 8006096:	f7ff fed3 	bl	8005e40 <xputc>
 800609a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	647a      	str	r2, [r7, #68]	; 0x44
 80060a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d8f6      	bhi.n	8006094 <xvprintf+0x1dc>
			continue;
 80060a6:	e0b9      	b.n	800621c <xvprintf+0x364>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	1d1a      	adds	r2, r3, #4
 80060ac:	603a      	str	r2, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff fec4 	bl	8005e40 <xputc>
 80060b8:	e0b0      	b.n	800621c <xvprintf+0x364>
		case 'B' :					/* Binary */
			r = 2; break;
 80060ba:	2302      	movs	r3, #2
 80060bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060be:	e00e      	b.n	80060de <xvprintf+0x226>
		case 'O' :					/* Octal */
			r = 8; break;
 80060c0:	2308      	movs	r3, #8
 80060c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c4:	e00b      	b.n	80060de <xvprintf+0x226>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80060c6:	230a      	movs	r3, #10
 80060c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ca:	e008      	b.n	80060de <xvprintf+0x226>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80060cc:	2310      	movs	r3, #16
 80060ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d0:	e005      	b.n	80060de <xvprintf+0x226>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 80060d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff feb2 	bl	8005e40 <xputc>
 80060dc:	e09e      	b.n	800621c <xvprintf+0x364>
			} else {		/* int/short/char argument */
				v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 80060de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d005      	beq.n	80060f4 <xvprintf+0x23c>
			v = va_arg(arp, long);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	1d1a      	adds	r2, r3, #4
 80060ec:	603a      	str	r2, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	633b      	str	r3, [r7, #48]	; 0x30
 80060f2:	e00d      	b.n	8006110 <xvprintf+0x258>
		} else {		/* int/short/char argument */
			v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 80060f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80060f8:	2b44      	cmp	r3, #68	; 0x44
 80060fa:	d104      	bne.n	8006106 <xvprintf+0x24e>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	1d1a      	adds	r2, r3, #4
 8006100:	603a      	str	r2, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	e003      	b.n	800610e <xvprintf+0x256>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	1d1a      	adds	r2, r3, #4
 800610a:	603a      	str	r2, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	633b      	str	r3, [r7, #48]	; 0x30
		}
#endif
		if (d == 'D' && v < 0) {	/* Negative value? */
 8006110:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006114:	2b44      	cmp	r3, #68	; 0x44
 8006116:	d109      	bne.n	800612c <xvprintf+0x274>
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	2b00      	cmp	r3, #0
 800611c:	da06      	bge.n	800612c <xvprintf+0x274>
			v = 0 - v; f |= 16;
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	425b      	negs	r3, r3
 8006122:	633b      	str	r3, [r7, #48]	; 0x30
 8006124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006126:	f043 0310 	orr.w	r3, r3, #16
 800612a:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		i = 0; vs = v;
 800612c:	2300      	movs	r3, #0
 800612e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c
		do {
			d = (char)(vs % r); vs /= r;
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006138:	fbb3 f2f2 	udiv	r2, r3, r2
 800613c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800613e:	fb01 f202 	mul.w	r2, r1, r2
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8006148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800614a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006150:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8006152:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006156:	2b09      	cmp	r3, #9
 8006158:	d90b      	bls.n	8006172 <xvprintf+0x2ba>
 800615a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800615e:	2b78      	cmp	r3, #120	; 0x78
 8006160:	d101      	bne.n	8006166 <xvprintf+0x2ae>
 8006162:	2227      	movs	r2, #39	; 0x27
 8006164:	e000      	b.n	8006168 <xvprintf+0x2b0>
 8006166:	2207      	movs	r2, #7
 8006168:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800616c:	4413      	add	r3, r2
 800616e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			s[i++] = d + '0';
 8006172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	64ba      	str	r2, [r7, #72]	; 0x48
 8006178:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800617c:	3230      	adds	r2, #48	; 0x30
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006184:	440b      	add	r3, r1
 8006186:	f803 2c48 	strb.w	r2, [r3, #-72]
		} while (vs != 0 && i < sizeof s);
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <xvprintf+0x2de>
 8006190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006192:	2b1f      	cmp	r3, #31
 8006194:	d9ce      	bls.n	8006134 <xvprintf+0x27c>
		if (f & 16) s[i++] = '-';
 8006196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <xvprintf+0x2fa>
 80061a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80061a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80061aa:	4413      	add	r3, r2
 80061ac:	222d      	movs	r2, #45	; 0x2d
 80061ae:	f803 2c48 	strb.w	r2, [r3, #-72]
		j = i; d = (f & 1) ? '0' : ' ';
 80061b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b4:	647b      	str	r3, [r7, #68]	; 0x44
 80061b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <xvprintf+0x30c>
 80061c0:	2330      	movs	r3, #48	; 0x30
 80061c2:	e000      	b.n	80061c6 <xvprintf+0x30e>
 80061c4:	2320      	movs	r3, #32
 80061c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		while (!(f & 2) && j++ < w) xputc(d);
 80061ca:	e004      	b.n	80061d6 <xvprintf+0x31e>
 80061cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff fe35 	bl	8005e40 <xputc>
 80061d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d105      	bne.n	80061ec <xvprintf+0x334>
 80061e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	647a      	str	r2, [r7, #68]	; 0x44
 80061e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d8ef      	bhi.n	80061cc <xvprintf+0x314>
		do xputc(s[--i]); while (i != 0);
 80061ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ee:	3b01      	subs	r3, #1
 80061f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f2:	f107 0208 	add.w	r2, r7, #8
 80061f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f8:	4413      	add	r3, r2
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff fe1f 	bl	8005e40 <xputc>
 8006202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f1      	bne.n	80061ec <xvprintf+0x334>
		while (j++ < w) xputc(' ');
 8006208:	e002      	b.n	8006210 <xvprintf+0x358>
 800620a:	2020      	movs	r0, #32
 800620c:	f7ff fe18 	bl	8005e40 <xputc>
 8006210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	647a      	str	r2, [r7, #68]	; 0x44
 8006216:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006218:	429a      	cmp	r2, r3
 800621a:	d8f6      	bhi.n	800620a <xvprintf+0x352>
		c = *fmt++;					/* Get a format character */
 800621c:	e651      	b.n	8005ec2 <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 800621e:	bf00      	nop
 8006220:	e000      	b.n	8006224 <xvprintf+0x36c>
		if (!c) break;				/* End of format? */
 8006222:	bf00      	nop
	}
}
 8006224:	bf00      	nop
 8006226:	3750      	adds	r7, #80	; 0x50
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 800622c:	b40f      	push	{r0, r1, r2, r3}
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8006234:	f107 0314 	add.w	r3, r7, #20
 8006238:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	6938      	ldr	r0, [r7, #16]
 800623e:	f7ff fe3b 	bl	8005eb8 <xvprintf>
	va_end(arp);
}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800624c:	b004      	add	sp, #16
 800624e:	4770      	bx	lr

08006250 <CANI_receiveMessage>:
} CANI_variables;

CANI_variables cani;

// Receiving -----------------------------------------------------------------------------
void CANI_receiveMessage(CANBus *bus, CANP_MessageHeader *mHeader) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
	CAN_ReceiveMessage(bus);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fa44 	bl	80056e8 <CAN_ReceiveMessage>
	cani.package.extID = bus->pRxHeader.ExtId;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	4a04      	ldr	r2, [pc, #16]	; (8006278 <CANI_receiveMessage+0x28>)
 8006266:	6013      	str	r3, [r2, #0]
	CANP_unpackHeader(&cani.package, mHeader);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	4803      	ldr	r0, [pc, #12]	; (8006278 <CANI_receiveMessage+0x28>)
 800626c:	f7ff fb98 	bl	80059a0 <CANP_unpackHeader>
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20004a14 	.word	0x20004a14

0800627c <CANI_isThisTarget>:

uint8_t CANI_isThisTarget(CANP_MessageHeader *mHeader) {
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
	return mHeader->targetMCU == MAX_MCU || mHeader->targetMCU == microcontroller.number;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	785b      	ldrb	r3, [r3, #1]
 8006288:	2b07      	cmp	r3, #7
 800628a:	d006      	beq.n	800629a <CANI_isThisTarget+0x1e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	785a      	ldrb	r2, [r3, #1]
 8006290:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <CANI_isThisTarget+0x34>)
 8006292:	791b      	ldrb	r3, [r3, #4]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	429a      	cmp	r2, r3
 8006298:	d101      	bne.n	800629e <CANI_isThisTarget+0x22>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <CANI_isThisTarget+0x24>
 800629e:	2300      	movs	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	200015e4 	.word	0x200015e4

080062b4 <CANI_fillHeader>:

// Sending -----------------------------------------------------------------------------
void CANI_fillHeader(CANP_MessageHeader *mHeader) {
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	mHeader->sourceMCU = microcontroller.number;
 80062bc:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <CANI_fillHeader+0x20>)
 80062be:	791b      	ldrb	r3, [r3, #4]
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	701a      	strb	r2, [r3, #0]
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	200015e4 	.word	0x200015e4

080062d8 <CANI_sendMessage>:

void CANI_sendMessage(CANBus *bus, CANP_MessageHeader *mHeader, uint8_t *payload) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
	CAN_setHeader(bus, cani.package.extID);
 80062e4:	4b06      	ldr	r3, [pc, #24]	; (8006300 <CANI_sendMessage+0x28>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4619      	mov	r1, r3
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f7ff f94e 	bl	800558c <CAN_setHeader>
	CAN_SendMessage(payload, bus);
 80062f0:	68f9      	ldr	r1, [r7, #12]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7ff f9ca 	bl	800568c <CAN_SendMessage>
}
 80062f8:	bf00      	nop
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20004a14 	.word	0x20004a14

08006304 <CANI_sendData>:

void CANI_sendData(CANBus *bus, CANP_DataMessage *message) {
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
	CANI_fillHeader(&message->header);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff ffcf 	bl	80062b4 <CANI_fillHeader>

	CANP_packData(&cani.package, message);
 8006316:	6839      	ldr	r1, [r7, #0]
 8006318:	4806      	ldr	r0, [pc, #24]	; (8006334 <CANI_sendData+0x30>)
 800631a:	f7ff faea 	bl	80058f2 <CANP_packData>
	CANI_sendMessage(bus, &(message->header), cani.package.payload);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	4a05      	ldr	r2, [pc, #20]	; (8006338 <CANI_sendData+0x34>)
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff ffd7 	bl	80062d8 <CANI_sendMessage>
}
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20004a14 	.word	0x20004a14
 8006338:	20004a18 	.word	0x20004a18

0800633c <CANI_sendTransition>:

	CANP_packRequestData(&cani.package, message);
	CANI_sendMessage(bus, &(message->header), cani.package.payload);
}

void CANI_sendTransition(CANBus *bus, CANP_TransitionMessage *message) {
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
	CANI_fillHeader(&message->header);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff ffb3 	bl	80062b4 <CANI_fillHeader>

	CANP_packTransition(&cani.package, message);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	4806      	ldr	r0, [pc, #24]	; (800636c <CANI_sendTransition+0x30>)
 8006352:	f7ff faf1 	bl	8005938 <CANP_packTransition>
	CANI_sendMessage(bus, &(message->header), cani.package.payload);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	4a05      	ldr	r2, [pc, #20]	; (8006370 <CANI_sendTransition+0x34>)
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff ffbb 	bl	80062d8 <CANI_sendMessage>
}
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20004a14 	.word	0x20004a14
 8006370:	20004a18 	.word	0x20004a18

08006374 <CANI_isMaster>:

// Interpreting -----------------------------------------------------------------------------
uint8_t CANI_isMaster(CANP_MessageHeader *mHeader) {
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	return mHeader->sourceMCU == microcontroller.master;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	781a      	ldrb	r2, [r3, #0]
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <CANI_isMaster+0x28>)
 8006382:	795b      	ldrb	r3, [r3, #5]
 8006384:	b2db      	uxtb	r3, r3
 8006386:	429a      	cmp	r2, r3
 8006388:	bf0c      	ite	eq
 800638a:	2301      	moveq	r3, #1
 800638c:	2300      	movne	r3, #0
 800638e:	b2db      	uxtb	r3, r3
}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	200015e4 	.word	0x200015e4

080063a0 <CANI_isTransitionHeader>:

uint8_t CANI_isTransitionHeader(CANP_MessageHeader *mHeader) {
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
	return mHeader->messageType == TRANSITION;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	789b      	ldrb	r3, [r3, #2]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	bf0c      	ite	eq
 80063b0:	2301      	moveq	r3, #1
 80063b2:	2300      	movne	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
	...

080063c4 <CANI_copyCANpackage>:

void CANI_copyCANpackage(CANP_Package *package, CANBus *bus) {
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
	package->dlc = bus->pRxHeader.DLC;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	731a      	strb	r2, [r3, #12]
	package->extID = bus->pRxHeader.ExtId;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	6a1a      	ldr	r2, [r3, #32]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	601a      	str	r2, [r3, #0]
	for (cani.i = 0; cani.i < 8; cani.i++) {
 80063e0:	4b10      	ldr	r3, [pc, #64]	; (8006424 <CANI_copyCANpackage+0x60>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	741a      	strb	r2, [r3, #16]
 80063e6:	e012      	b.n	800640e <CANI_copyCANpackage+0x4a>
		package->payload[cani.i] = bus->receiveBuffer[cani.i];
 80063e8:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <CANI_copyCANpackage+0x60>)
 80063ea:	7c1b      	ldrb	r3, [r3, #16]
 80063ec:	461a      	mov	r2, r3
 80063ee:	4b0d      	ldr	r3, [pc, #52]	; (8006424 <CANI_copyCANpackage+0x60>)
 80063f0:	7c1b      	ldrb	r3, [r3, #16]
 80063f2:	4619      	mov	r1, r3
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	4413      	add	r3, r2
 80063f8:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	440b      	add	r3, r1
 8006400:	711a      	strb	r2, [r3, #4]
	for (cani.i = 0; cani.i < 8; cani.i++) {
 8006402:	4b08      	ldr	r3, [pc, #32]	; (8006424 <CANI_copyCANpackage+0x60>)
 8006404:	7c1b      	ldrb	r3, [r3, #16]
 8006406:	3301      	adds	r3, #1
 8006408:	b2da      	uxtb	r2, r3
 800640a:	4b06      	ldr	r3, [pc, #24]	; (8006424 <CANI_copyCANpackage+0x60>)
 800640c:	741a      	strb	r2, [r3, #16]
 800640e:	4b05      	ldr	r3, [pc, #20]	; (8006424 <CANI_copyCANpackage+0x60>)
 8006410:	7c1b      	ldrb	r3, [r3, #16]
 8006412:	2b07      	cmp	r3, #7
 8006414:	d9e8      	bls.n	80063e8 <CANI_copyCANpackage+0x24>
	}
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	20004a14 	.word	0x20004a14

08006428 <CANI_interpretDataMessage>:

void CANI_interpretDataMessage(CANBus *bus, CANP_DataMessage *message) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
	CANI_copyCANpackage(&cani.package, bus);
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	4805      	ldr	r0, [pc, #20]	; (800644c <CANI_interpretDataMessage+0x24>)
 8006436:	f7ff ffc5 	bl	80063c4 <CANI_copyCANpackage>
	CANP_unpackDataMessage(&cani.package, message);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	4803      	ldr	r0, [pc, #12]	; (800644c <CANI_interpretDataMessage+0x24>)
 800643e:	f7ff fb28 	bl	8005a92 <CANP_unpackDataMessage>
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20004a14 	.word	0x20004a14

08006450 <CANI_interpretRequestDataMessage>:

void CANI_interpretRequestDataMessage(CANBus *bus, CANP_RequestDataMessage *message) {
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
	CANI_copyCANpackage(&cani.package, bus);
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4805      	ldr	r0, [pc, #20]	; (8006474 <CANI_interpretRequestDataMessage+0x24>)
 800645e:	f7ff ffb1 	bl	80063c4 <CANI_copyCANpackage>
	CANP_unpackRequestDataMessage(&cani.package, message);
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	4803      	ldr	r0, [pc, #12]	; (8006474 <CANI_interpretRequestDataMessage+0x24>)
 8006466:	f7ff fb33 	bl	8005ad0 <CANP_unpackRequestDataMessage>
}
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20004a14 	.word	0x20004a14

08006478 <CANI_interpretTransitionMessage>:

void CANI_interpretTransitionMessage(CANBus *bus, CANP_TransitionMessage *message) {
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	CANI_copyCANpackage(&cani.package, bus);
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	4810      	ldr	r0, [pc, #64]	; (80064c8 <CANI_interpretTransitionMessage+0x50>)
 8006486:	f7ff ff9d 	bl	80063c4 <CANI_copyCANpackage>
	CANP_unpackTransitionMessage(&cani.package, message);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	480e      	ldr	r0, [pc, #56]	; (80064c8 <CANI_interpretTransitionMessage+0x50>)
 800648e:	f7ff fb4e 	bl	8005b2e <CANP_unpackTransitionMessage>
	if (CANI_isMaster(&message->header) && CANI_isTransitionHeader(&message->header) && message->messageValid) {
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff ff6d 	bl	8006374 <CANI_isMaster>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00f      	beq.n	80064c0 <CANI_interpretTransitionMessage+0x48>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff ff7c 	bl	80063a0 <CANI_isTransitionHeader>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d008      	beq.n	80064c0 <CANI_interpretTransitionMessage+0x48>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	7a5b      	ldrb	r3, [r3, #9]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d004      	beq.n	80064c0 <CANI_interpretTransitionMessage+0x48>
		stateTransition(message->state);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	7a1b      	ldrb	r3, [r3, #8]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff fca6 	bl	8005e0c <stateTransition>
	}
}
 80064c0:	bf00      	nop
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20004a14 	.word	0x20004a14

080064cc <CANI_unpackStatus>:

uint8_t CANI_isStatusData(CANP_Data *data) {
	return CANP_isStatusData(data);
}

void CANI_unpackStatus(CANP_Data *data, CANP_Status *status) {
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
	CANP_unpackStatus(data, status);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff fba1 	bl	8005c20 <CANP_unpackStatus>
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <CANI_packStatus>:

void CANI_packStatus(CANP_Data *data, CANP_Status *status) {
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b082      	sub	sp, #8
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	6039      	str	r1, [r7, #0]
	CANP_packStatus(data, status);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff fbba 	bl	8005c6c <CANP_packStatus>
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HYOS_GetTick>:
 */


#include "hyendOS/hyend_os.h"

uint32_t HYOS_GetTick() {
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8006504:	f7fa fe86 	bl	8001214 <HAL_GetTick>
 8006508:	4603      	mov	r3, r0
}
 800650a:	4618      	mov	r0, r3
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <Logger_OpenFile>:
	char dataString[255];
} Logger_variables;

Logger_variables Logger;

void Logger_OpenFile() {
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af02      	add	r7, sp, #8
//	snprintf(Logger.fileName, 9, "%s%06u", Logger.prefix, Logger.fileCounter);
	snprintf(Logger.fileName, 9, "%s%06d", Logger.prefix, Logger.fileCounter);
 8006516:	4b07      	ldr	r3, [pc, #28]	; (8006534 <Logger_OpenFile+0x24>)
 8006518:	885b      	ldrh	r3, [r3, #2]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	4b06      	ldr	r3, [pc, #24]	; (8006538 <Logger_OpenFile+0x28>)
 800651e:	4a07      	ldr	r2, [pc, #28]	; (800653c <Logger_OpenFile+0x2c>)
 8006520:	2109      	movs	r1, #9
 8006522:	4807      	ldr	r0, [pc, #28]	; (8006540 <Logger_OpenFile+0x30>)
 8006524:	f003 f898 	bl	8009658 <sniprintf>
	SDFH_openFile(Logger.fileName);
 8006528:	4805      	ldr	r0, [pc, #20]	; (8006540 <Logger_OpenFile+0x30>)
 800652a:	f7ff f93f 	bl	80057ac <SDFH_openFile>
}
 800652e:	bf00      	nop
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	20004a28 	.word	0x20004a28
 8006538:	20004a37 	.word	0x20004a37
 800653c:	0800a028 	.word	0x0800a028
 8006540:	20004a3a 	.word	0x20004a3a

08006544 <Logger_CloseFile>:

void Logger_CloseFile() {
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
	SDFH_closeFile();
 8006548:	f7ff f940 	bl	80057cc <SDFH_closeFile>
}
 800654c:	bf00      	nop
 800654e:	bd80      	pop	{r7, pc}

08006550 <Logger_init>:

void Logger_init(uint16_t maxNumberOfDataPerFile) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	80fb      	strh	r3, [r7, #6]
	Logger.dataStringLength = 6;
 800655a:	4b1c      	ldr	r3, [pc, #112]	; (80065cc <Logger_init+0x7c>)
 800655c:	2206      	movs	r2, #6
 800655e:	731a      	strb	r2, [r3, #12]
	uint8_t timeStampStringLength = 10;
 8006560:	230a      	movs	r3, #10
 8006562:	73fb      	strb	r3, [r7, #15]
	uint8_t seperatorLength = 3; // ,,\0
 8006564:	2303      	movs	r3, #3
 8006566:	73bb      	strb	r3, [r7, #14]
	uint8_t endOfLineLength = 1; // \n
 8006568:	2301      	movs	r3, #1
 800656a:	737b      	strb	r3, [r7, #13]
	Logger.overheadLength = Logger.dataStringLength + timeStampStringLength + seperatorLength;
 800656c:	4b17      	ldr	r3, [pc, #92]	; (80065cc <Logger_init+0x7c>)
 800656e:	7b1a      	ldrb	r2, [r3, #12]
 8006570:	7bfb      	ldrb	r3, [r7, #15]
 8006572:	4413      	add	r3, r2
 8006574:	b2da      	uxtb	r2, r3
 8006576:	7bbb      	ldrb	r3, [r7, #14]
 8006578:	4413      	add	r3, r2
 800657a:	b2da      	uxtb	r2, r3
 800657c:	4b13      	ldr	r3, [pc, #76]	; (80065cc <Logger_init+0x7c>)
 800657e:	739a      	strb	r2, [r3, #14]
	Logger.overheadLengthln = Logger.overheadLength + endOfLineLength;
 8006580:	4b12      	ldr	r3, [pc, #72]	; (80065cc <Logger_init+0x7c>)
 8006582:	7b9a      	ldrb	r2, [r3, #14]
 8006584:	7b7b      	ldrb	r3, [r7, #13]
 8006586:	4413      	add	r3, r2
 8006588:	b2da      	uxtb	r2, r3
 800658a:	4b10      	ldr	r3, [pc, #64]	; (80065cc <Logger_init+0x7c>)
 800658c:	735a      	strb	r2, [r3, #13]

	Logger.fileCounter = 0;
 800658e:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <Logger_init+0x7c>)
 8006590:	2200      	movs	r2, #0
 8006592:	805a      	strh	r2, [r3, #2]
	Logger.dataCounter = 0;
 8006594:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <Logger_init+0x7c>)
 8006596:	2200      	movs	r2, #0
 8006598:	605a      	str	r2, [r3, #4]

	Logger.maxDataPerFile = maxNumberOfDataPerFile == 0 ? 1000 : maxNumberOfDataPerFile;
 800659a:	88fb      	ldrh	r3, [r7, #6]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <Logger_init+0x54>
 80065a0:	88fb      	ldrh	r3, [r7, #6]
 80065a2:	e001      	b.n	80065a8 <Logger_init+0x58>
 80065a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065a8:	4a08      	ldr	r2, [pc, #32]	; (80065cc <Logger_init+0x7c>)
 80065aa:	6093      	str	r3, [r2, #8]
	Logger.prefix[0] = 'D';
 80065ac:	4b07      	ldr	r3, [pc, #28]	; (80065cc <Logger_init+0x7c>)
 80065ae:	2244      	movs	r2, #68	; 0x44
 80065b0:	73da      	strb	r2, [r3, #15]
	Logger.prefix[1] = 'T';
 80065b2:	4b06      	ldr	r3, [pc, #24]	; (80065cc <Logger_init+0x7c>)
 80065b4:	2254      	movs	r2, #84	; 0x54
 80065b6:	741a      	strb	r2, [r3, #16]
	Logger.prefix[2] = '\0';
 80065b8:	4b04      	ldr	r3, [pc, #16]	; (80065cc <Logger_init+0x7c>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	745a      	strb	r2, [r3, #17]
	Logger_OpenFile();
 80065be:	f7ff ffa7 	bl	8006510 <Logger_OpenFile>
}
 80065c2:	bf00      	nop
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20004a28 	.word	0x20004a28

080065d0 <Logger_NextFile>:

void Logger_SetMaxDataPerFile(uint32_t maxData) {
	Logger.maxDataPerFile = maxData;
}

void Logger_NextFile() {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
	Logger_CloseFile();
 80065d4:	f7ff ffb6 	bl	8006544 <Logger_CloseFile>
	Logger.fileCounter++;
 80065d8:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <Logger_NextFile+0x24>)
 80065da:	885b      	ldrh	r3, [r3, #2]
 80065dc:	3301      	adds	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	4b04      	ldr	r3, [pc, #16]	; (80065f4 <Logger_NextFile+0x24>)
 80065e2:	805a      	strh	r2, [r3, #2]
	Logger_OpenFile();
 80065e4:	f7ff ff94 	bl	8006510 <Logger_OpenFile>
	Logger.dataCounter = 0;
 80065e8:	4b02      	ldr	r3, [pc, #8]	; (80065f4 <Logger_NextFile+0x24>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	605a      	str	r2, [r3, #4]
}
 80065ee:	bf00      	nop
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20004a28 	.word	0x20004a28

080065f8 <Logger_DataAdded>:

void Logger_DataAdded() {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
	Logger.dataCounter++;
 80065fc:	4b07      	ldr	r3, [pc, #28]	; (800661c <Logger_DataAdded+0x24>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	3301      	adds	r3, #1
 8006602:	4a06      	ldr	r2, [pc, #24]	; (800661c <Logger_DataAdded+0x24>)
 8006604:	6053      	str	r3, [r2, #4]
	if (Logger.dataCounter >= Logger.maxDataPerFile) {
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <Logger_DataAdded+0x24>)
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	4b04      	ldr	r3, [pc, #16]	; (800661c <Logger_DataAdded+0x24>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	429a      	cmp	r2, r3
 8006610:	d301      	bcc.n	8006616 <Logger_DataAdded+0x1e>
		Logger_NextFile();
 8006612:	f7ff ffdd 	bl	80065d0 <Logger_NextFile>
	}

}
 8006616:	bf00      	nop
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20004a28 	.word	0x20004a28

08006620 <Logger_logData>:

void Logger_logData(const char *message, uint8_t messageLength, uint32_t time_stamp, uint16_t data) {
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	607a      	str	r2, [r7, #4]
 800662a:	461a      	mov	r2, r3
 800662c:	460b      	mov	r3, r1
 800662e:	72fb      	strb	r3, [r7, #11]
 8006630:	4613      	mov	r3, r2
 8006632:	813b      	strh	r3, [r7, #8]
	uint8_t len = messageLength + Logger.overheadLengthln;
 8006634:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <Logger_logData+0x50>)
 8006636:	7b5a      	ldrb	r2, [r3, #13]
 8006638:	7afb      	ldrb	r3, [r7, #11]
 800663a:	4413      	add	r3, r2
 800663c:	75fb      	strb	r3, [r7, #23]

	snprintf(Logger.dataString, len, "%s,%010u,%06u\n", message, time_stamp, data);
 800663e:	7df9      	ldrb	r1, [r7, #23]
 8006640:	893b      	ldrh	r3, [r7, #8]
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4a0a      	ldr	r2, [pc, #40]	; (8006674 <Logger_logData+0x54>)
 800664c:	480a      	ldr	r0, [pc, #40]	; (8006678 <Logger_logData+0x58>)
 800664e:	f003 f803 	bl	8009658 <sniprintf>
	SDFH_writeToFile(Logger.dataString, len - 1);
 8006652:	7dfb      	ldrb	r3, [r7, #23]
 8006654:	b29b      	uxth	r3, r3
 8006656:	3b01      	subs	r3, #1
 8006658:	b29b      	uxth	r3, r3
 800665a:	4619      	mov	r1, r3
 800665c:	4806      	ldr	r0, [pc, #24]	; (8006678 <Logger_logData+0x58>)
 800665e:	f7ff f8bf 	bl	80057e0 <SDFH_writeToFile>
	Logger_DataAdded();
 8006662:	f7ff ffc9 	bl	80065f8 <Logger_DataAdded>
}
 8006666:	bf00      	nop
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20004a28 	.word	0x20004a28
 8006674:	0800a030 	.word	0x0800a030
 8006678:	20004a42 	.word	0x20004a42

0800667c <TIMER_itsTime>:
 */

#include "peripherals/timer/timer.h"
#ifdef _TIMER_H

uint8_t TIMER_itsTime(Timer *timer) {
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	if (timer->flag > 0) {
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d004      	beq.n	8006696 <TIMER_itsTime+0x1a>
		timer->flag = 0;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	701a      	strb	r2, [r3, #0]
		return 1;
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <TIMER_itsTime+0x1c>
	} else {
		return 0;
 8006696:	2300      	movs	r3, #0
	}
}
 8006698:	4618      	mov	r0, r3
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <TIMER_tick>:

void TIMER_tick(Timer *timer){
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
	timer->cnt++;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	885b      	ldrh	r3, [r3, #2]
 80066b0:	3301      	adds	r3, #1
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	805a      	strh	r2, [r3, #2]
	if (timer->cnt >= timer->max) {
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	885a      	ldrh	r2, [r3, #2]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	889b      	ldrh	r3, [r3, #4]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d305      	bcc.n	80066d0 <TIMER_tick+0x2c>
		timer->cnt = 0;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	805a      	strh	r2, [r3, #2]
		timer->flag = 1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	701a      	strb	r2, [r3, #0]
	}
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <MAP_setData>:
union {
	uint16_t i;
	DATA_FIELD *currentData;
} Map;

void MAP_setData(DATA_ID key, uint32_t data, uint32_t timestamp, DATA_STATUS status) {
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
 80066e6:	461a      	mov	r2, r3
 80066e8:	4603      	mov	r3, r0
 80066ea:	81fb      	strh	r3, [r7, #14]
 80066ec:	4613      	mov	r3, r2
 80066ee:	737b      	strb	r3, [r7, #13]
	for (Map.i = 0; Map.i < data_size; Map.i++) {
 80066f0:	4b1a      	ldr	r3, [pc, #104]	; (800675c <MAP_setData+0x80>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	801a      	strh	r2, [r3, #0]
 80066f6:	e027      	b.n	8006748 <MAP_setData+0x6c>
		if (DATA_LIST[Map.i].key == key) {
 80066f8:	4b18      	ldr	r3, [pc, #96]	; (800675c <MAP_setData+0x80>)
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	4a18      	ldr	r2, [pc, #96]	; (8006760 <MAP_setData+0x84>)
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	4413      	add	r3, r2
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	89fa      	ldrh	r2, [r7, #14]
 8006706:	429a      	cmp	r2, r3
 8006708:	d118      	bne.n	800673c <MAP_setData+0x60>
			DATA_LIST[Map.i].value = data;
 800670a:	4b14      	ldr	r3, [pc, #80]	; (800675c <MAP_setData+0x80>)
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	4a14      	ldr	r2, [pc, #80]	; (8006760 <MAP_setData+0x84>)
 8006710:	011b      	lsls	r3, r3, #4
 8006712:	4413      	add	r3, r2
 8006714:	3304      	adds	r3, #4
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	601a      	str	r2, [r3, #0]
			DATA_LIST[Map.i].update = status;
 800671a:	4b10      	ldr	r3, [pc, #64]	; (800675c <MAP_setData+0x80>)
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	4a10      	ldr	r2, [pc, #64]	; (8006760 <MAP_setData+0x84>)
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	4413      	add	r3, r2
 8006724:	330c      	adds	r3, #12
 8006726:	7b7a      	ldrb	r2, [r7, #13]
 8006728:	701a      	strb	r2, [r3, #0]
			DATA_LIST[Map.i].timestamp = timestamp;
 800672a:	4b0c      	ldr	r3, [pc, #48]	; (800675c <MAP_setData+0x80>)
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	4a0c      	ldr	r2, [pc, #48]	; (8006760 <MAP_setData+0x84>)
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	4413      	add	r3, r2
 8006734:	3308      	adds	r3, #8
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
			break;
 800673a:	e009      	b.n	8006750 <MAP_setData+0x74>
	for (Map.i = 0; Map.i < data_size; Map.i++) {
 800673c:	4b07      	ldr	r3, [pc, #28]	; (800675c <MAP_setData+0x80>)
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	4b05      	ldr	r3, [pc, #20]	; (800675c <MAP_setData+0x80>)
 8006746:	801a      	strh	r2, [r3, #0]
 8006748:	4b04      	ldr	r3, [pc, #16]	; (800675c <MAP_setData+0x80>)
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	2b34      	cmp	r3, #52	; 0x34
 800674e:	d9d3      	bls.n	80066f8 <MAP_setData+0x1c>
		}
	}
}
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	20004b44 	.word	0x20004b44
 8006760:	20001218 	.word	0x20001218

08006764 <MAP_getData>:

DATA_FIELD* MAP_getData(DATA_ID key) {
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	80fb      	strh	r3, [r7, #6]
	for (Map.i = 0; Map.i < data_size; Map.i++) {
 800676e:	4b16      	ldr	r3, [pc, #88]	; (80067c8 <MAP_getData+0x64>)
 8006770:	2200      	movs	r2, #0
 8006772:	801a      	strh	r2, [r3, #0]
 8006774:	e01c      	b.n	80067b0 <MAP_getData+0x4c>
		if (DATA_LIST[Map.i].key == key) {
 8006776:	4b14      	ldr	r3, [pc, #80]	; (80067c8 <MAP_getData+0x64>)
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	4a14      	ldr	r2, [pc, #80]	; (80067cc <MAP_getData+0x68>)
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	4413      	add	r3, r2
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	88fa      	ldrh	r2, [r7, #6]
 8006784:	429a      	cmp	r2, r3
 8006786:	d10d      	bne.n	80067a4 <MAP_getData+0x40>
			DATA_LIST[Map.i].update = DATA_DEPRECATED;
 8006788:	4b0f      	ldr	r3, [pc, #60]	; (80067c8 <MAP_getData+0x64>)
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	4a0f      	ldr	r2, [pc, #60]	; (80067cc <MAP_getData+0x68>)
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	4413      	add	r3, r2
 8006792:	330c      	adds	r3, #12
 8006794:	2201      	movs	r2, #1
 8006796:	701a      	strb	r2, [r3, #0]
			return &DATA_LIST[Map.i];
 8006798:	4b0b      	ldr	r3, [pc, #44]	; (80067c8 <MAP_getData+0x64>)
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	4a0b      	ldr	r2, [pc, #44]	; (80067cc <MAP_getData+0x68>)
 80067a0:	4413      	add	r3, r2
 80067a2:	e00a      	b.n	80067ba <MAP_getData+0x56>
	for (Map.i = 0; Map.i < data_size; Map.i++) {
 80067a4:	4b08      	ldr	r3, [pc, #32]	; (80067c8 <MAP_getData+0x64>)
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	3301      	adds	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <MAP_getData+0x64>)
 80067ae:	801a      	strh	r2, [r3, #0]
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <MAP_getData+0x64>)
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	2b34      	cmp	r3, #52	; 0x34
 80067b6:	d9de      	bls.n	8006776 <MAP_getData+0x12>
		}
	}
	return 0;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	20004b44 	.word	0x20004b44
 80067cc:	20001218 	.word	0x20001218

080067d0 <MAP_setDataFromCANP>:

// CANP Interface
void MAP_setDataFromCANP(CANP_Data *data, uint32_t timestamp) {
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
	MAP_setData(data->header.ID, data->payload, timestamp, data->header.status);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	8818      	ldrh	r0, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	889b      	ldrh	r3, [r3, #4]
 80067e2:	4619      	mov	r1, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	789b      	ldrb	r3, [r3, #2]
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	f7ff ff77 	bl	80066dc <MAP_setData>
}
 80067ee:	bf00      	nop
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <MAP_getDataToCANP>:

uint32_t MAP_getDataToCANP(DATA_ID key, CANP_Data *data) {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	6039      	str	r1, [r7, #0]
 8006802:	80fb      	strh	r3, [r7, #6]
	Map.currentData = MAP_getData(key);
 8006804:	88fb      	ldrh	r3, [r7, #6]
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff ffac 	bl	8006764 <MAP_getData>
 800680c:	4602      	mov	r2, r0
 800680e:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <MAP_getDataToCANP+0x48>)
 8006810:	601a      	str	r2, [r3, #0]
	data->header.ID = Map.currentData->key;
 8006812:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <MAP_getDataToCANP+0x48>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	881a      	ldrh	r2, [r3, #0]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	801a      	strh	r2, [r3, #0]
	data->payload = Map.currentData->value;
 800681c:	4b08      	ldr	r3, [pc, #32]	; (8006840 <MAP_getDataToCANP+0x48>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	b29a      	uxth	r2, r3
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	809a      	strh	r2, [r3, #4]
	data->header.status = Map.currentData->update;
 8006828:	4b05      	ldr	r3, [pc, #20]	; (8006840 <MAP_getDataToCANP+0x48>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	7b1a      	ldrb	r2, [r3, #12]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	709a      	strb	r2, [r3, #2]
	return Map.currentData->timestamp;
 8006832:	4b03      	ldr	r3, [pc, #12]	; (8006840 <MAP_getDataToCANP+0x48>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20004b44 	.word	0x20004b44

08006844 <MAP_initDataField>:
	DATA_FIELD *data = MAP_getData(key);
	return data->value;
}

// Init
void MAP_initDataField(DATA_ID key) {
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	80fb      	strh	r3, [r7, #6]
	DATA_LIST[Map.i].key = key;
 800684e:	4b15      	ldr	r3, [pc, #84]	; (80068a4 <MAP_initDataField+0x60>)
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	4a15      	ldr	r2, [pc, #84]	; (80068a8 <MAP_initDataField+0x64>)
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	4413      	add	r3, r2
 8006858:	88fa      	ldrh	r2, [r7, #6]
 800685a:	801a      	strh	r2, [r3, #0]
	DATA_LIST[Map.i].value = 0;
 800685c:	4b11      	ldr	r3, [pc, #68]	; (80068a4 <MAP_initDataField+0x60>)
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	4a11      	ldr	r2, [pc, #68]	; (80068a8 <MAP_initDataField+0x64>)
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	4413      	add	r3, r2
 8006866:	3304      	adds	r3, #4
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]
	DATA_LIST[Map.i].update = DATA_NOT_AVAILABLE;
 800686c:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <MAP_initDataField+0x60>)
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	4a0d      	ldr	r2, [pc, #52]	; (80068a8 <MAP_initDataField+0x64>)
 8006872:	011b      	lsls	r3, r3, #4
 8006874:	4413      	add	r3, r2
 8006876:	330c      	adds	r3, #12
 8006878:	2202      	movs	r2, #2
 800687a:	701a      	strb	r2, [r3, #0]
	DATA_LIST[Map.i].timestamp = 0;
 800687c:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <MAP_initDataField+0x60>)
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	4a09      	ldr	r2, [pc, #36]	; (80068a8 <MAP_initDataField+0x64>)
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	4413      	add	r3, r2
 8006886:	3308      	adds	r3, #8
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]

	Map.i++;
 800688c:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <MAP_initDataField+0x60>)
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	3301      	adds	r3, #1
 8006892:	b29a      	uxth	r2, r3
 8006894:	4b03      	ldr	r3, [pc, #12]	; (80068a4 <MAP_initDataField+0x60>)
 8006896:	801a      	strh	r2, [r3, #0]
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	20004b44 	.word	0x20004b44
 80068a8:	20001218 	.word	0x20001218

080068ac <MAP_init>:

///*
void MAP_init() {
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
	Map.i = 0;
 80068b0:	4b68      	ldr	r3, [pc, #416]	; (8006a54 <MAP_init+0x1a8>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	801a      	strh	r2, [r3, #0]

	MAP_initDataField(SYSTEM_NULL_DATA);
 80068b6:	2000      	movs	r0, #0
 80068b8:	f7ff ffc4 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(SYSTEM_STATUS);
 80068bc:	2001      	movs	r0, #1
 80068be:	f7ff ffc1 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(MCU);
 80068c2:	2002      	movs	r0, #2
 80068c4:	f7ff ffbe 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(VAS_NULL_DATA);
 80068c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80068cc:	f7ff ffba 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(VAS_STATUS);
 80068d0:	f240 2001 	movw	r0, #513	; 0x201
 80068d4:	f7ff ffb6 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(VAS_GOPRO_1);
 80068d8:	f240 2002 	movw	r0, #514	; 0x202
 80068dc:	f7ff ffb2 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(VAS_GOPRO_2);
 80068e0:	f240 2003 	movw	r0, #515	; 0x203
 80068e4:	f7ff ffae 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(VAS_GOPRO_3);
 80068e8:	f44f 7001 	mov.w	r0, #516	; 0x204
 80068ec:	f7ff ffaa 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(VAS_GOPRO_4);
 80068f0:	f240 2005 	movw	r0, #517	; 0x205
 80068f4:	f7ff ffa6 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(VAS_GOPRO_5);
 80068f8:	f240 2006 	movw	r0, #518	; 0x206
 80068fc:	f7ff ffa2 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(VAS_PICAM);
 8006900:	f240 2007 	movw	r0, #519	; 0x207
 8006904:	f7ff ff9e 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(RSMS_NULL_DATA);
 8006908:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800690c:	f7ff ff9a 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(RSMS_STATUS);
 8006910:	f240 4001 	movw	r0, #1025	; 0x401
 8006914:	f7ff ff96 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(RSMS_PRESSURE_1);
 8006918:	f240 4002 	movw	r0, #1026	; 0x402
 800691c:	f7ff ff92 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(RSMS_PRESSURE_2);
 8006920:	f240 4003 	movw	r0, #1027	; 0x403
 8006924:	f7ff ff8e 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(RSMS_PRESSURE_7);
 8006928:	f240 4004 	movw	r0, #1028	; 0x404
 800692c:	f7ff ff8a 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(RSMS_PRESSURE_8);
 8006930:	f240 4005 	movw	r0, #1029	; 0x405
 8006934:	f7ff ff86 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(RSMS_PT_1);
 8006938:	f240 4006 	movw	r0, #1030	; 0x406
 800693c:	f7ff ff82 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(RSMS_PT_2);
 8006940:	f240 4007 	movw	r0, #1031	; 0x407
 8006944:	f7ff ff7e 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(RSMS_PT_7);
 8006948:	f44f 6081 	mov.w	r0, #1032	; 0x408
 800694c:	f7ff ff7a 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(RSMS_PT_8);
 8006950:	f240 4009 	movw	r0, #1033	; 0x409
 8006954:	f7ff ff76 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_NULL_DATA);
 8006958:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800695c:	f7ff ff72 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_STATUS);
 8006960:	f240 6001 	movw	r0, #1537	; 0x601
 8006964:	f7ff ff6e 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_ACC1_X);
 8006968:	f240 6002 	movw	r0, #1538	; 0x602
 800696c:	f7ff ff6a 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_ACC1_Y);
 8006970:	f240 6003 	movw	r0, #1539	; 0x603
 8006974:	f7ff ff66 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_ACC1_Z);
 8006978:	f240 6004 	movw	r0, #1540	; 0x604
 800697c:	f7ff ff62 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_GYR1_X);
 8006980:	f240 6005 	movw	r0, #1541	; 0x605
 8006984:	f7ff ff5e 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_GYR1_Y);
 8006988:	f240 6006 	movw	r0, #1542	; 0x606
 800698c:	f7ff ff5a 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_GYR1_Z);
 8006990:	f240 6007 	movw	r0, #1543	; 0x607
 8006994:	f7ff ff56 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_ACC2_X);
 8006998:	f44f 60c1 	mov.w	r0, #1544	; 0x608
 800699c:	f7ff ff52 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_ACC2_Y);
 80069a0:	f240 6009 	movw	r0, #1545	; 0x609
 80069a4:	f7ff ff4e 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_ACC2_Z);
 80069a8:	f240 600a 	movw	r0, #1546	; 0x60a
 80069ac:	f7ff ff4a 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_GYR2_X);
 80069b0:	f240 600b 	movw	r0, #1547	; 0x60b
 80069b4:	f7ff ff46 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_GYR2_Y);
 80069b8:	f240 600c 	movw	r0, #1548	; 0x60c
 80069bc:	f7ff ff42 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_GYR2_Z);
 80069c0:	f240 600d 	movw	r0, #1549	; 0x60d
 80069c4:	f7ff ff3e 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_LAT);
 80069c8:	f240 600e 	movw	r0, #1550	; 0x60e
 80069cc:	f7ff ff3a 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_LONG);
 80069d0:	f240 600f 	movw	r0, #1551	; 0x60f
 80069d4:	f7ff ff36 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_HEIGHT);
 80069d8:	f44f 60c2 	mov.w	r0, #1552	; 0x610
 80069dc:	f7ff ff32 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_SPEED);
 80069e0:	f240 6011 	movw	r0, #1553	; 0x611
 80069e4:	f7ff ff2e 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_HEADING);
 80069e8:	f240 6012 	movw	r0, #1554	; 0x612
 80069ec:	f7ff ff2a 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_ROC);
 80069f0:	f240 6013 	movw	r0, #1555	; 0x613
 80069f4:	f7ff ff26 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_GPS_STATUS);
 80069f8:	f240 6014 	movw	r0, #1556	; 0x614
 80069fc:	f7ff ff22 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_GPS_NSAT);
 8006a00:	f240 6015 	movw	r0, #1557	; 0x615
 8006a04:	f7ff ff1e 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(FSMS_GPS_GDOP);
 8006a08:	f240 6016 	movw	r0, #1558	; 0x616
 8006a0c:	f7ff ff1a 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(PCDU_NULL_DATA);
 8006a10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006a14:	f7ff ff16 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(PCDU_STATUS);
 8006a18:	f640 0001 	movw	r0, #2049	; 0x801
 8006a1c:	f7ff ff12 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(IFC_NULL_DATA);
 8006a20:	f44f 6020 	mov.w	r0, #2560	; 0xa00
 8006a24:	f7ff ff0e 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(IFC_STATUS);
 8006a28:	f640 2001 	movw	r0, #2561	; 0xa01
 8006a2c:	f7ff ff0a 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(IFC_DOWNLINK);
 8006a30:	f640 2002 	movw	r0, #2562	; 0xa02
 8006a34:	f7ff ff06 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(GSE_NULL_DATA);
 8006a38:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006a3c:	f7ff ff02 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(GSE_STATUS);
 8006a40:	f640 4001 	movw	r0, #3073	; 0xc01
 8006a44:	f7ff fefe 	bl	8006844 <MAP_initDataField>
	MAP_initDataField(MAX_DATA_ID);
 8006a48:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006a4c:	f7ff fefa 	bl	8006844 <MAP_initDataField>
}
 8006a50:	bf00      	nop
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	20004b44 	.word	0x20004b44

08006a58 <ifc_IDLE_entry>:
	key = IFC_STATUS;
	ifc_initSingleDATA_FIELD(key, number);
}

// IDLE ====================================================================
void ifc_IDLE_entry() {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	af00      	add	r7, sp, #0
	IFC_DH_sendTransition(IDLE);
 8006a5c:	2001      	movs	r0, #1
 8006a5e:	f000 fa6b 	bl	8006f38 <IFC_DH_sendTransition>
}
 8006a62:	bf00      	nop
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <ifc_IDLE_while>:

void ifc_IDLE_while() {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
	if (TIMER_itsTime(&ifc_struct->statusTim)) {
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <ifc_IDLE_while+0x34>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330c      	adds	r3, #12
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff fe02 	bl	800667c <TIMER_itsTime>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00b      	beq.n	8006a96 <ifc_IDLE_while+0x2e>
		IFC_BOARD_logStatus();
 8006a7e:	f000 f9c5 	bl	8006e0c <IFC_BOARD_logStatus>
		HAL_GPIO_TogglePin(ifc_struct->LD1.port, ifc_struct->LD1.pin);
 8006a82:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <ifc_IDLE_while+0x34>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699a      	ldr	r2, [r3, #24]
 8006a88:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <ifc_IDLE_while+0x34>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	8b9b      	ldrh	r3, [r3, #28]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4610      	mov	r0, r2
 8006a92:	f7fb fd1c 	bl	80024ce <HAL_GPIO_TogglePin>
	}
}
 8006a96:	bf00      	nop
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20004b48 	.word	0x20004b48

08006aa0 <ifc_IDLE_exit>:

void ifc_IDLE_exit() {
 8006aa0:	b480      	push	{r7}
 8006aa2:	af00      	add	r7, sp, #0
}
 8006aa4:	bf00      	nop
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <ifc_FUELING_entry>:

// FUELING ====================================================================
void ifc_FUELING_entry() {
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	af00      	add	r7, sp, #0
	IFC_DH_sendTransition(FUELING);
 8006ab2:	2007      	movs	r0, #7
 8006ab4:	f000 fa40 	bl	8006f38 <IFC_DH_sendTransition>
}
 8006ab8:	bf00      	nop
 8006aba:	bd80      	pop	{r7, pc}

08006abc <ifc_FUELING_while>:

void ifc_FUELING_while() {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
	if (TIMER_itsTime(&ifc_struct->statusTim)) {
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <ifc_FUELING_while+0x20>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff fdd8 	bl	800667c <TIMER_itsTime>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <ifc_FUELING_while+0x1a>
		IFC_BOARD_logStatus();
 8006ad2:	f000 f99b 	bl	8006e0c <IFC_BOARD_logStatus>
	}
}
 8006ad6:	bf00      	nop
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	20004b48 	.word	0x20004b48

08006ae0 <ifc_FUELING_exit>:

void ifc_FUELING_exit() {
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
}
 8006ae4:	bf00      	nop
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <ifc_RDY_SET_entry>:

// RDY_SET ====================================================================
void ifc_RDY_SET_entry() {
 8006aee:	b580      	push	{r7, lr}
 8006af0:	af00      	add	r7, sp, #0
	IFC_DH_sendTransition(RDY_SET);
 8006af2:	2008      	movs	r0, #8
 8006af4:	f000 fa20 	bl	8006f38 <IFC_DH_sendTransition>
}
 8006af8:	bf00      	nop
 8006afa:	bd80      	pop	{r7, pc}

08006afc <ifc_RDY_SET_while>:

void ifc_RDY_SET_while() {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
	if (TIMER_itsTime(&ifc_struct->statusTim)) {
 8006b00:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <ifc_RDY_SET_while+0x20>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	330c      	adds	r3, #12
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff fdb8 	bl	800667c <TIMER_itsTime>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <ifc_RDY_SET_while+0x1a>
		IFC_BOARD_logStatus();
 8006b12:	f000 f97b 	bl	8006e0c <IFC_BOARD_logStatus>
	}
}
 8006b16:	bf00      	nop
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20004b48 	.word	0x20004b48

08006b20 <ifc_RDY_SET_exit>:

void ifc_RDY_SET_exit() {
 8006b20:	b480      	push	{r7}
 8006b22:	af00      	add	r7, sp, #0
}
 8006b24:	bf00      	nop
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <ifc_FLIGHT_entry>:

// FLIGHT ====================================================================
void ifc_FLIGHT_entry() {
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	af00      	add	r7, sp, #0
	IFC_DH_sendTransition(FLIGHT);
 8006b32:	2009      	movs	r0, #9
 8006b34:	f000 fa00 	bl	8006f38 <IFC_DH_sendTransition>
}
 8006b38:	bf00      	nop
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <ifc_FLIGHT_while>:

void ifc_FLIGHT_while() {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
	if (TIMER_itsTime(&ifc_struct->statusTim)) {
 8006b40:	4b06      	ldr	r3, [pc, #24]	; (8006b5c <ifc_FLIGHT_while+0x20>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	330c      	adds	r3, #12
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff fd98 	bl	800667c <TIMER_itsTime>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <ifc_FLIGHT_while+0x1a>
		IFC_BOARD_logStatus();
 8006b52:	f000 f95b 	bl	8006e0c <IFC_BOARD_logStatus>
	}
}
 8006b56:	bf00      	nop
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20004b48 	.word	0x20004b48

08006b60 <ifc_FLIGHT_exit>:

void ifc_FLIGHT_exit() {
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
}
 8006b64:	bf00      	nop
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <ifc_LANDED_entry>:

// LANDED ====================================================================
void ifc_LANDED_entry() {
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	af00      	add	r7, sp, #0
	IFC_DH_sendTransition(LANDED);
 8006b72:	200a      	movs	r0, #10
 8006b74:	f000 f9e0 	bl	8006f38 <IFC_DH_sendTransition>
}
 8006b78:	bf00      	nop
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <ifc_LANDED_while>:

void ifc_LANDED_while() {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
	if (TIMER_itsTime(&ifc_struct->statusTim)) {
 8006b80:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <ifc_LANDED_while+0x20>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7ff fd78 	bl	800667c <TIMER_itsTime>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <ifc_LANDED_while+0x1a>
		IFC_BOARD_logStatus();
 8006b92:	f000 f93b 	bl	8006e0c <IFC_BOARD_logStatus>
	}
}
 8006b96:	bf00      	nop
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20004b48 	.word	0x20004b48

08006ba0 <ifc_LANDED_exit>:

void ifc_LANDED_exit() {
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
}
 8006ba4:	bf00      	nop
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
	...

08006bb0 <IFC_init>:

// init ====================================================================
void IFC_init(IFC_PeripheralStruct *ifc_PeripheralStruct) {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
	ifc_struct = ifc_PeripheralStruct;
 8006bb8:	4a33      	ldr	r2, [pc, #204]	; (8006c88 <IFC_init+0xd8>)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6013      	str	r3, [r2, #0]
	IFC_BOARD_init(ifc_PeripheralStruct);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f8c2 	bl	8006d48 <IFC_BOARD_init>

	// Init Microcontroller
	initMicrocontroller();
 8006bc4:	f7ff f8aa 	bl	8005d1c <initMicrocontroller>
	microcontroller.number = IFC;
 8006bc8:	4b30      	ldr	r3, [pc, #192]	; (8006c8c <IFC_init+0xdc>)
 8006bca:	2205      	movs	r2, #5
 8006bcc:	711a      	strb	r2, [r3, #4]
	microcontroller.master = GSE;
 8006bce:	4b2f      	ldr	r3, [pc, #188]	; (8006c8c <IFC_init+0xdc>)
 8006bd0:	2206      	movs	r2, #6
 8006bd2:	715a      	strb	r2, [r3, #5]

	Tasks *currentTasks;

	currentTasks = &getMCState(IDLE)->tasks;
 8006bd4:	2001      	movs	r0, #1
 8006bd6:	f7ff f8df 	bl	8005d98 <getMCState>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	60fb      	str	r3, [r7, #12]
	currentTasks->entry = &ifc_IDLE_entry;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4a2b      	ldr	r2, [pc, #172]	; (8006c90 <IFC_init+0xe0>)
 8006be2:	601a      	str	r2, [r3, #0]
	currentTasks->whileHandle = &ifc_IDLE_while;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4a2b      	ldr	r2, [pc, #172]	; (8006c94 <IFC_init+0xe4>)
 8006be8:	605a      	str	r2, [r3, #4]
	currentTasks->canHandle = &IFC_BOARD_canHandle;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4a2a      	ldr	r2, [pc, #168]	; (8006c98 <IFC_init+0xe8>)
 8006bee:	609a      	str	r2, [r3, #8]
	currentTasks->exit = &ifc_IDLE_exit;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4a2a      	ldr	r2, [pc, #168]	; (8006c9c <IFC_init+0xec>)
 8006bf4:	60da      	str	r2, [r3, #12]

	currentTasks = &getMCState(FUELING)->tasks;
 8006bf6:	2007      	movs	r0, #7
 8006bf8:	f7ff f8ce 	bl	8005d98 <getMCState>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	60fb      	str	r3, [r7, #12]
	currentTasks->entry = &ifc_FUELING_entry;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4a27      	ldr	r2, [pc, #156]	; (8006ca0 <IFC_init+0xf0>)
 8006c04:	601a      	str	r2, [r3, #0]
	currentTasks->whileHandle = &ifc_FUELING_while;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a26      	ldr	r2, [pc, #152]	; (8006ca4 <IFC_init+0xf4>)
 8006c0a:	605a      	str	r2, [r3, #4]
	currentTasks->canHandle = &IFC_BOARD_canHandle;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4a22      	ldr	r2, [pc, #136]	; (8006c98 <IFC_init+0xe8>)
 8006c10:	609a      	str	r2, [r3, #8]
	currentTasks->exit = &ifc_FUELING_exit;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4a24      	ldr	r2, [pc, #144]	; (8006ca8 <IFC_init+0xf8>)
 8006c16:	60da      	str	r2, [r3, #12]

	currentTasks = &getMCState(RDY_SET)->tasks;
 8006c18:	2008      	movs	r0, #8
 8006c1a:	f7ff f8bd 	bl	8005d98 <getMCState>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	60fb      	str	r3, [r7, #12]
	currentTasks->entry = &ifc_RDY_SET_entry;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4a21      	ldr	r2, [pc, #132]	; (8006cac <IFC_init+0xfc>)
 8006c26:	601a      	str	r2, [r3, #0]
	currentTasks->whileHandle = &ifc_RDY_SET_while;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4a21      	ldr	r2, [pc, #132]	; (8006cb0 <IFC_init+0x100>)
 8006c2c:	605a      	str	r2, [r3, #4]
	currentTasks->canHandle = &IFC_BOARD_canHandle;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4a19      	ldr	r2, [pc, #100]	; (8006c98 <IFC_init+0xe8>)
 8006c32:	609a      	str	r2, [r3, #8]
	currentTasks->exit = &ifc_RDY_SET_exit;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4a1f      	ldr	r2, [pc, #124]	; (8006cb4 <IFC_init+0x104>)
 8006c38:	60da      	str	r2, [r3, #12]

	currentTasks = &getMCState(FLIGHT)->tasks;
 8006c3a:	2009      	movs	r0, #9
 8006c3c:	f7ff f8ac 	bl	8005d98 <getMCState>
 8006c40:	4603      	mov	r3, r0
 8006c42:	60fb      	str	r3, [r7, #12]
	currentTasks->entry = &ifc_FLIGHT_entry;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4a1c      	ldr	r2, [pc, #112]	; (8006cb8 <IFC_init+0x108>)
 8006c48:	601a      	str	r2, [r3, #0]
	currentTasks->whileHandle = &ifc_FLIGHT_while;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a1b      	ldr	r2, [pc, #108]	; (8006cbc <IFC_init+0x10c>)
 8006c4e:	605a      	str	r2, [r3, #4]
	currentTasks->canHandle = &IFC_BOARD_canHandle;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a11      	ldr	r2, [pc, #68]	; (8006c98 <IFC_init+0xe8>)
 8006c54:	609a      	str	r2, [r3, #8]
	currentTasks->exit = &ifc_FLIGHT_exit;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4a19      	ldr	r2, [pc, #100]	; (8006cc0 <IFC_init+0x110>)
 8006c5a:	60da      	str	r2, [r3, #12]

	currentTasks = &getMCState(LANDED)->tasks;
 8006c5c:	200a      	movs	r0, #10
 8006c5e:	f7ff f89b 	bl	8005d98 <getMCState>
 8006c62:	4603      	mov	r3, r0
 8006c64:	60fb      	str	r3, [r7, #12]
	currentTasks->entry = &ifc_LANDED_entry;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4a16      	ldr	r2, [pc, #88]	; (8006cc4 <IFC_init+0x114>)
 8006c6a:	601a      	str	r2, [r3, #0]
	currentTasks->whileHandle = &ifc_LANDED_while;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4a16      	ldr	r2, [pc, #88]	; (8006cc8 <IFC_init+0x118>)
 8006c70:	605a      	str	r2, [r3, #4]
	currentTasks->canHandle = &IFC_BOARD_canHandle;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4a08      	ldr	r2, [pc, #32]	; (8006c98 <IFC_init+0xe8>)
 8006c76:	609a      	str	r2, [r3, #8]
	currentTasks->exit = &ifc_LANDED_exit;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4a14      	ldr	r2, [pc, #80]	; (8006ccc <IFC_init+0x11c>)
 8006c7c:	60da      	str	r2, [r3, #12]
}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20004b48 	.word	0x20004b48
 8006c8c:	200015e4 	.word	0x200015e4
 8006c90:	08006a59 	.word	0x08006a59
 8006c94:	08006a69 	.word	0x08006a69
 8006c98:	08006ec9 	.word	0x08006ec9
 8006c9c:	08006aa1 	.word	0x08006aa1
 8006ca0:	08006aaf 	.word	0x08006aaf
 8006ca4:	08006abd 	.word	0x08006abd
 8006ca8:	08006ae1 	.word	0x08006ae1
 8006cac:	08006aef 	.word	0x08006aef
 8006cb0:	08006afd 	.word	0x08006afd
 8006cb4:	08006b21 	.word	0x08006b21
 8006cb8:	08006b2f 	.word	0x08006b2f
 8006cbc:	08006b3d 	.word	0x08006b3d
 8006cc0:	08006b61 	.word	0x08006b61
 8006cc4:	08006b6f 	.word	0x08006b6f
 8006cc8:	08006b7d 	.word	0x08006b7d
 8006ccc:	08006ba1 	.word	0x08006ba1

08006cd0 <IFC_BOARD_initSDLogging>:
#ifdef __STM32_UART_PERIPHERAL
	initXprint(ifc_struct->serialDebug);
#endif
}

void IFC_BOARD_initSDLogging() {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
#ifdef __STM32_SDIO_PERIPHERAL
	FRESULT res = SDFH_init();
 8006cd6:	f7fe fd47 	bl	8005768 <SDFH_init>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	71fb      	strb	r3, [r7, #7]
	Logger_init(10);
 8006cde:	200a      	movs	r0, #10
 8006ce0:	f7ff fc36 	bl	8006550 <Logger_init>

	if (res != FR_OK) {
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <IFC_BOARD_initSDLogging+0x20>
		ifcBoard.mcuStatus = RSMS_SD_FAULT;
 8006cea:	4b03      	ldr	r3, [pc, #12]	; (8006cf8 <IFC_BOARD_initSDLogging+0x28>)
 8006cec:	2241      	movs	r2, #65	; 0x41
 8006cee:	701a      	strb	r2, [r3, #0]
	}
#endif
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20004b4c 	.word	0x20004b4c

08006cfc <IFC_BOARD_initTim>:

void IFC_BOARD_initTim() {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	af00      	add	r7, sp, #0
#ifdef __STM32_TIM_PERIPHERAL

	ifc_struct->statusTim.cnt = 0;
 8006d00:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <IFC_BOARD_initTim+0x48>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2200      	movs	r2, #0
 8006d06:	81da      	strh	r2, [r3, #14]
	ifc_struct->statusTim.max = 1000;
 8006d08:	4b0e      	ldr	r3, [pc, #56]	; (8006d44 <IFC_BOARD_initTim+0x48>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d10:	821a      	strh	r2, [r3, #16]
	ifc_struct->statusTim.flag = 0;
 8006d12:	4b0c      	ldr	r3, [pc, #48]	; (8006d44 <IFC_BOARD_initTim+0x48>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2200      	movs	r2, #0
 8006d18:	731a      	strb	r2, [r3, #12]
	ifc_struct->second.cnt = 0;
 8006d1a:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <IFC_BOARD_initTim+0x48>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	829a      	strh	r2, [r3, #20]
	ifc_struct->second.max = 10;
 8006d22:	4b08      	ldr	r3, [pc, #32]	; (8006d44 <IFC_BOARD_initTim+0x48>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	220a      	movs	r2, #10
 8006d28:	82da      	strh	r2, [r3, #22]
	ifc_struct->second.flag = 0;
 8006d2a:	4b06      	ldr	r3, [pc, #24]	; (8006d44 <IFC_BOARD_initTim+0x48>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	749a      	strb	r2, [r3, #18]

	HAL_TIM_Base_Start_IT(ifc_struct->htim);
 8006d32:	4b04      	ldr	r3, [pc, #16]	; (8006d44 <IFC_BOARD_initTim+0x48>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fd fa9a 	bl	8004272 <HAL_TIM_Base_Start_IT>
#endif
}
 8006d3e:	bf00      	nop
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	20004b48 	.word	0x20004b48

08006d48 <IFC_BOARD_init>:

void IFC_BOARD_init(IFC_PeripheralStruct *ifc_PeripheralStruct) {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	ifc_struct = ifc_PeripheralStruct;
 8006d50:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <IFC_BOARD_init+0x34>)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6013      	str	r3, [r2, #0]

//	IFC_BOARD_initUsart(ifc_PeripheralStruct);
	MAP_init();
 8006d56:	f7ff fda9 	bl	80068ac <MAP_init>
	IFC_DH_init(ifc_struct);
 8006d5a:	4b08      	ldr	r3, [pc, #32]	; (8006d7c <IFC_BOARD_init+0x34>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 f8be 	bl	8006ee0 <IFC_DH_init>
	IFC_BOARD_initSDLogging();
 8006d64:	f7ff ffb4 	bl	8006cd0 <IFC_BOARD_initSDLogging>
	IFC_BOARD_initTim();
 8006d68:	f7ff ffc8 	bl	8006cfc <IFC_BOARD_initTim>

	xprintf("IFC Initialisiert.\n");
 8006d6c:	4804      	ldr	r0, [pc, #16]	; (8006d80 <IFC_BOARD_init+0x38>)
 8006d6e:	f7ff fa5d 	bl	800622c <xprintf>
}
 8006d72:	bf00      	nop
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20004b48 	.word	0x20004b48
 8006d80:	0800a058 	.word	0x0800a058

08006d84 <IFC_BOARD_tick>:

// DataHandling =================================================================
void IFC_BOARD_tick() {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
#ifdef __STM32_TIM_PERIPHERAL
	TIMER_tick(&ifc_struct->statusTim);
 8006d88:	4b06      	ldr	r3, [pc, #24]	; (8006da4 <IFC_BOARD_tick+0x20>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	330c      	adds	r3, #12
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff fc88 	bl	80066a4 <TIMER_tick>
	TIMER_tick(&ifc_struct->second);
 8006d94:	4b03      	ldr	r3, [pc, #12]	; (8006da4 <IFC_BOARD_tick+0x20>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3312      	adds	r3, #18
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff fc82 	bl	80066a4 <TIMER_tick>
#endif
}
 8006da0:	bf00      	nop
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20004b48 	.word	0x20004b48

08006da8 <IFC_BOARD_logSingleStatus>:

void IFC_BOARD_logSingleStatus(const char *messageState, uint8_t lenState, const char *messageStatus, uint8_t lenStatus,
		DATA_ID key) {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	607a      	str	r2, [r7, #4]
 8006db2:	461a      	mov	r2, r3
 8006db4:	460b      	mov	r3, r1
 8006db6:	72fb      	strb	r3, [r7, #11]
 8006db8:	4613      	mov	r3, r2
 8006dba:	72bb      	strb	r3, [r7, #10]
#ifdef __STM32_SDIO_PERIPHERAL
	ifcBoard.time = MAP_getDataToCANP(key, &ifcBoard.data);
 8006dbc:	8b3b      	ldrh	r3, [r7, #24]
 8006dbe:	4910      	ldr	r1, [pc, #64]	; (8006e00 <IFC_BOARD_logSingleStatus+0x58>)
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff fd19 	bl	80067f8 <MAP_getDataToCANP>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	4b0e      	ldr	r3, [pc, #56]	; (8006e04 <IFC_BOARD_logSingleStatus+0x5c>)
 8006dca:	605a      	str	r2, [r3, #4]
	CANI_unpackStatus(&ifcBoard.data, &ifcBoard.status);
 8006dcc:	490e      	ldr	r1, [pc, #56]	; (8006e08 <IFC_BOARD_logSingleStatus+0x60>)
 8006dce:	480c      	ldr	r0, [pc, #48]	; (8006e00 <IFC_BOARD_logSingleStatus+0x58>)
 8006dd0:	f7ff fb7c 	bl	80064cc <CANI_unpackStatus>

	Logger_logData(messageState, lenState, ifcBoard.time, ifcBoard.status.state);
 8006dd4:	4b0b      	ldr	r3, [pc, #44]	; (8006e04 <IFC_BOARD_logSingleStatus+0x5c>)
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	4b0a      	ldr	r3, [pc, #40]	; (8006e04 <IFC_BOARD_logSingleStatus+0x5c>)
 8006dda:	7b9b      	ldrb	r3, [r3, #14]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	7af9      	ldrb	r1, [r7, #11]
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f7ff fc1d 	bl	8006620 <Logger_logData>
	Logger_logData(messageStatus, lenStatus, ifcBoard.time, ifcBoard.status.mcuStatus);
 8006de6:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <IFC_BOARD_logSingleStatus+0x5c>)
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <IFC_BOARD_logSingleStatus+0x5c>)
 8006dec:	7b5b      	ldrb	r3, [r3, #13]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	7ab9      	ldrb	r1, [r7, #10]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff fc14 	bl	8006620 <Logger_logData>
#endif
}
 8006df8:	bf00      	nop
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20004b5c 	.word	0x20004b5c
 8006e04:	20004b4c 	.word	0x20004b4c
 8006e08:	20004b54 	.word	0x20004b54

08006e0c <IFC_BOARD_logStatus>:

void IFC_BOARD_logStatus() {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af02      	add	r7, sp, #8
	// Store own state to Map
	ifcBoard.status.state = microcontroller.state->stateID;
 8006e12:	4b21      	ldr	r3, [pc, #132]	; (8006e98 <IFC_BOARD_logStatus+0x8c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006e1a:	4b20      	ldr	r3, [pc, #128]	; (8006e9c <IFC_BOARD_logStatus+0x90>)
 8006e1c:	739a      	strb	r2, [r3, #14]
	ifcBoard.status.mcuStatus = ifcBoard.mcuStatus;
 8006e1e:	4b1f      	ldr	r3, [pc, #124]	; (8006e9c <IFC_BOARD_logStatus+0x90>)
 8006e20:	781a      	ldrb	r2, [r3, #0]
 8006e22:	4b1e      	ldr	r3, [pc, #120]	; (8006e9c <IFC_BOARD_logStatus+0x90>)
 8006e24:	735a      	strb	r2, [r3, #13]
	ifcBoard.status.header.ID = IFC_STATUS;
 8006e26:	4b1d      	ldr	r3, [pc, #116]	; (8006e9c <IFC_BOARD_logStatus+0x90>)
 8006e28:	f640 2201 	movw	r2, #2561	; 0xa01
 8006e2c:	811a      	strh	r2, [r3, #8]
	ifcBoard.status.header.status = DATA_OK;
 8006e2e:	4b1b      	ldr	r3, [pc, #108]	; (8006e9c <IFC_BOARD_logStatus+0x90>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	729a      	strb	r2, [r3, #10]
	CANI_packStatus(&ifcBoard.data, &ifcBoard.status);
 8006e34:	491a      	ldr	r1, [pc, #104]	; (8006ea0 <IFC_BOARD_logStatus+0x94>)
 8006e36:	481b      	ldr	r0, [pc, #108]	; (8006ea4 <IFC_BOARD_logStatus+0x98>)
 8006e38:	f7ff fb55 	bl	80064e6 <CANI_packStatus>
	MAP_setDataFromCANP(&ifcBoard.data, HYOS_GetTick());
 8006e3c:	f7ff fb60 	bl	8006500 <HYOS_GetTick>
 8006e40:	4603      	mov	r3, r0
 8006e42:	4619      	mov	r1, r3
 8006e44:	4817      	ldr	r0, [pc, #92]	; (8006ea4 <IFC_BOARD_logStatus+0x98>)
 8006e46:	f7ff fcc3 	bl	80067d0 <MAP_setDataFromCANP>

	// Log all Stati to SD Card
	IFC_BOARD_logSingleStatus("IFC_State", 9, "IFC_Status", 10, IFC_STATUS);
 8006e4a:	f640 2301 	movw	r3, #2561	; 0xa01
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	230a      	movs	r3, #10
 8006e52:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <IFC_BOARD_logStatus+0x9c>)
 8006e54:	2109      	movs	r1, #9
 8006e56:	4815      	ldr	r0, [pc, #84]	; (8006eac <IFC_BOARD_logStatus+0xa0>)
 8006e58:	f7ff ffa6 	bl	8006da8 <IFC_BOARD_logSingleStatus>
	IFC_BOARD_logSingleStatus("FSMS_State", 10, "FSMS_Status", 11, FSMS_STATUS);
 8006e5c:	f240 6301 	movw	r3, #1537	; 0x601
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	230b      	movs	r3, #11
 8006e64:	4a12      	ldr	r2, [pc, #72]	; (8006eb0 <IFC_BOARD_logStatus+0xa4>)
 8006e66:	210a      	movs	r1, #10
 8006e68:	4812      	ldr	r0, [pc, #72]	; (8006eb4 <IFC_BOARD_logStatus+0xa8>)
 8006e6a:	f7ff ff9d 	bl	8006da8 <IFC_BOARD_logSingleStatus>
	IFC_BOARD_logSingleStatus("RSMS_State", 10, "RSMS_Status", 11, RSMS_STATUS);
 8006e6e:	f240 4301 	movw	r3, #1025	; 0x401
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	230b      	movs	r3, #11
 8006e76:	4a10      	ldr	r2, [pc, #64]	; (8006eb8 <IFC_BOARD_logStatus+0xac>)
 8006e78:	210a      	movs	r1, #10
 8006e7a:	4810      	ldr	r0, [pc, #64]	; (8006ebc <IFC_BOARD_logStatus+0xb0>)
 8006e7c:	f7ff ff94 	bl	8006da8 <IFC_BOARD_logSingleStatus>
	IFC_BOARD_logSingleStatus("VAS_State", 9, "VAS_Status", 10, VAS_STATUS);
 8006e80:	f240 2301 	movw	r3, #513	; 0x201
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	230a      	movs	r3, #10
 8006e88:	4a0d      	ldr	r2, [pc, #52]	; (8006ec0 <IFC_BOARD_logStatus+0xb4>)
 8006e8a:	2109      	movs	r1, #9
 8006e8c:	480d      	ldr	r0, [pc, #52]	; (8006ec4 <IFC_BOARD_logStatus+0xb8>)
 8006e8e:	f7ff ff8b 	bl	8006da8 <IFC_BOARD_logSingleStatus>
}
 8006e92:	bf00      	nop
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	200015e4 	.word	0x200015e4
 8006e9c:	20004b4c 	.word	0x20004b4c
 8006ea0:	20004b54 	.word	0x20004b54
 8006ea4:	20004b5c 	.word	0x20004b5c
 8006ea8:	0800a06c 	.word	0x0800a06c
 8006eac:	0800a078 	.word	0x0800a078
 8006eb0:	0800a084 	.word	0x0800a084
 8006eb4:	0800a090 	.word	0x0800a090
 8006eb8:	0800a09c 	.word	0x0800a09c
 8006ebc:	0800a0a8 	.word	0x0800a0a8
 8006ec0:	0800a0b4 	.word	0x0800a0b4
 8006ec4:	0800a0c0 	.word	0x0800a0c0

08006ec8 <IFC_BOARD_canHandle>:

// DataHandling =================================================================
void IFC_BOARD_canHandle(void *pt) {
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
	IFC_DH_canHandle((CANBus*) pt);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f8a7 	bl	8007024 <IFC_DH_canHandle>
}
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <IFC_DH_init>:
	CANP_TransitionMessage transitionMessageGSE;
} IFC_DataHandling;

IFC_DataHandling ifcDataHandling;

void IFC_DH_init(IFC_PeripheralStruct *ifc_struct) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
#ifdef __STM32_CAN_PERIPHERAL
	ifcDataHandling.gseBus = CAN_init(ifc_struct->busGSE, IFC);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2105      	movs	r1, #5
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fb66 	bl	80055c0 <CAN_init>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	4b0f      	ldr	r3, [pc, #60]	; (8006f34 <IFC_DH_init+0x54>)
 8006ef8:	605a      	str	r2, [r3, #4]
	ifcDataHandling.sysBus = CAN_init(ifc_struct->busSys, IFC);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2105      	movs	r1, #5
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fe fb5d 	bl	80055c0 <CAN_init>
 8006f06:	4602      	mov	r2, r0
 8006f08:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <IFC_DH_init+0x54>)
 8006f0a:	609a      	str	r2, [r3, #8]
#endif

	ifcDataHandling.transitionMessageSys.header.targetMCU = MAX_MCU;
 8006f0c:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <IFC_DH_init+0x54>)
 8006f0e:	2207      	movs	r2, #7
 8006f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	ifcDataHandling.transitionMessageSys.messageValid = 1;
 8006f14:	4b07      	ldr	r3, [pc, #28]	; (8006f34 <IFC_DH_init+0x54>)
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	ifcDataHandling.dataMessageGSE.header.targetMCU = GSE;
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <IFC_DH_init+0x54>)
 8006f1e:	2206      	movs	r2, #6
 8006f20:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	ifcDataHandling.dataMessageGSE.header.messageType = DATA;
 8006f24:	4b03      	ldr	r3, [pc, #12]	; (8006f34 <IFC_DH_init+0x54>)
 8006f26:	2203      	movs	r2, #3
 8006f28:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	20004b64 	.word	0x20004b64

08006f38 <IFC_DH_sendTransition>:

// State Machine ===========================================================
void IFC_DH_sendTransition(STATE_ID state) {
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	71fb      	strb	r3, [r7, #7]
	ifcDataHandling.transitionMessageSys.header.timeStamp = HYOS_GetTick();
 8006f42:	f7ff fadd 	bl	8006500 <HYOS_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	4b07      	ldr	r3, [pc, #28]	; (8006f68 <IFC_DH_sendTransition+0x30>)
 8006f4a:	639a      	str	r2, [r3, #56]	; 0x38
	ifcDataHandling.transitionMessageSys.state = state;
 8006f4c:	4a06      	ldr	r2, [pc, #24]	; (8006f68 <IFC_DH_sendTransition+0x30>)
 8006f4e:	79fb      	ldrb	r3, [r7, #7]
 8006f50:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c

#ifdef __STM32_CAN_PERIPHERAL
	CANI_sendTransition(ifcDataHandling.sysBus, &ifcDataHandling.transitionMessageSys);
 8006f54:	4b04      	ldr	r3, [pc, #16]	; (8006f68 <IFC_DH_sendTransition+0x30>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	4904      	ldr	r1, [pc, #16]	; (8006f6c <IFC_DH_sendTransition+0x34>)
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff f9ee 	bl	800633c <CANI_sendTransition>
#endif
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20004b64 	.word	0x20004b64
 8006f6c:	20004b98 	.word	0x20004b98

08006f70 <IFC_DH_reactOnData>:

// Sys Handling ============================================================
void IFC_DH_reactOnData() {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
	MAP_setDataFromCANP(&ifcDataHandling.dataMessageSys.data1, ifcDataHandling.dataMessageSys.header.timeStamp);
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <IFC_DH_reactOnData+0x20>)
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4806      	ldr	r0, [pc, #24]	; (8006f94 <IFC_DH_reactOnData+0x24>)
 8006f7c:	f7ff fc28 	bl	80067d0 <MAP_setDataFromCANP>
	MAP_setDataFromCANP(&ifcDataHandling.dataMessageSys.data2, ifcDataHandling.dataMessageSys.header.timeStamp);
 8006f80:	4b03      	ldr	r3, [pc, #12]	; (8006f90 <IFC_DH_reactOnData+0x20>)
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	4619      	mov	r1, r3
 8006f86:	4804      	ldr	r0, [pc, #16]	; (8006f98 <IFC_DH_reactOnData+0x28>)
 8006f88:	f7ff fc22 	bl	80067d0 <MAP_setDataFromCANP>
}
 8006f8c:	bf00      	nop
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20004b64 	.word	0x20004b64
 8006f94:	20004b8c 	.word	0x20004b8c
 8006f98:	20004b92 	.word	0x20004b92

08006f9c <IFC_DH_reactOnSingleRequest>:

// GSE Handling ============================================================
void IFC_DH_reactOnSingleRequest(CANP_MessageHeader *header, DATA_ID dataID) {
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	807b      	strh	r3, [r7, #2]
	header->timeStamp = MAP_getDataToCANP(dataID, &ifcDataHandling.dataGSE);
 8006fa8:	887b      	ldrh	r3, [r7, #2]
 8006faa:	4905      	ldr	r1, [pc, #20]	; (8006fc0 <IFC_DH_reactOnSingleRequest+0x24>)
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7ff fc23 	bl	80067f8 <MAP_getDataToCANP>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	605a      	str	r2, [r3, #4]
}
 8006fb8:	bf00      	nop
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20004ba4 	.word	0x20004ba4

08006fc4 <IFC_DH_reactOnRequest>:

void IFC_DH_reactOnRequest() {
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
	IFC_DH_reactOnSingleRequest(&ifcDataHandling.reqDataMessageGSE.header, ifcDataHandling.reqDataMessageGSE.dataID1);
 8006fc8:	4b13      	ldr	r3, [pc, #76]	; (8007018 <IFC_DH_reactOnRequest+0x54>)
 8006fca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006fce:	4619      	mov	r1, r3
 8006fd0:	4812      	ldr	r0, [pc, #72]	; (800701c <IFC_DH_reactOnRequest+0x58>)
 8006fd2:	f7ff ffe3 	bl	8006f9c <IFC_DH_reactOnSingleRequest>
	ifcDataHandling.dataMessageGSE.data1 = ifcDataHandling.dataGSE;
 8006fd6:	4b10      	ldr	r3, [pc, #64]	; (8007018 <IFC_DH_reactOnRequest+0x54>)
 8006fd8:	4a0f      	ldr	r2, [pc, #60]	; (8007018 <IFC_DH_reactOnRequest+0x54>)
 8006fda:	3350      	adds	r3, #80	; 0x50
 8006fdc:	3240      	adds	r2, #64	; 0x40
 8006fde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fe2:	6018      	str	r0, [r3, #0]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	8019      	strh	r1, [r3, #0]
	IFC_DH_reactOnSingleRequest(&ifcDataHandling.reqDataMessageGSE.header, ifcDataHandling.reqDataMessageGSE.dataID2);
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <IFC_DH_reactOnRequest+0x54>)
 8006fea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006fee:	4619      	mov	r1, r3
 8006ff0:	480a      	ldr	r0, [pc, #40]	; (800701c <IFC_DH_reactOnRequest+0x58>)
 8006ff2:	f7ff ffd3 	bl	8006f9c <IFC_DH_reactOnSingleRequest>
	ifcDataHandling.dataMessageGSE.data2 = ifcDataHandling.dataGSE;
 8006ff6:	4b08      	ldr	r3, [pc, #32]	; (8007018 <IFC_DH_reactOnRequest+0x54>)
 8006ff8:	4a07      	ldr	r2, [pc, #28]	; (8007018 <IFC_DH_reactOnRequest+0x54>)
 8006ffa:	3356      	adds	r3, #86	; 0x56
 8006ffc:	3240      	adds	r2, #64	; 0x40
 8006ffe:	6810      	ldr	r0, [r2, #0]
 8007000:	6018      	str	r0, [r3, #0]
 8007002:	8892      	ldrh	r2, [r2, #4]
 8007004:	809a      	strh	r2, [r3, #4]

	CANI_sendData(ifcDataHandling.gseBus, &ifcDataHandling.dataMessageGSE);
 8007006:	4b04      	ldr	r3, [pc, #16]	; (8007018 <IFC_DH_reactOnRequest+0x54>)
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	4905      	ldr	r1, [pc, #20]	; (8007020 <IFC_DH_reactOnRequest+0x5c>)
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff f979 	bl	8006304 <CANI_sendData>
}
 8007012:	bf00      	nop
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20004b64 	.word	0x20004b64
 800701c:	20004bc0 	.word	0x20004bc0
 8007020:	20004bac 	.word	0x20004bac

08007024 <IFC_DH_canHandle>:

// CAN Handling ============================================================
void IFC_DH_canHandle(CANBus *bus) {
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
#ifdef __STM32_CAN_PERIPHERAL
	ifcDataHandling.busIR = bus;
 800702c:	4a1a      	ldr	r2, [pc, #104]	; (8007098 <IFC_DH_canHandle+0x74>)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60d3      	str	r3, [r2, #12]
	CANI_receiveMessage(ifcDataHandling.busIR, &ifcDataHandling.headerIR);
 8007032:	4b19      	ldr	r3, [pc, #100]	; (8007098 <IFC_DH_canHandle+0x74>)
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	4919      	ldr	r1, [pc, #100]	; (800709c <IFC_DH_canHandle+0x78>)
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff f909 	bl	8006250 <CANI_receiveMessage>

	if (!CANI_isThisTarget(&ifcDataHandling.headerIR)) {
 800703e:	4817      	ldr	r0, [pc, #92]	; (800709c <IFC_DH_canHandle+0x78>)
 8007040:	f7ff f91c 	bl	800627c <CANI_isThisTarget>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d021      	beq.n	800708e <IFC_DH_canHandle+0x6a>
		return;
	}

	switch (ifcDataHandling.headerIR.messageType) {
 800704a:	4b13      	ldr	r3, [pc, #76]	; (8007098 <IFC_DH_canHandle+0x74>)
 800704c:	7c9b      	ldrb	r3, [r3, #18]
 800704e:	2b03      	cmp	r3, #3
 8007050:	d004      	beq.n	800705c <IFC_DH_canHandle+0x38>
 8007052:	2b04      	cmp	r3, #4
 8007054:	d00b      	beq.n	800706e <IFC_DH_canHandle+0x4a>
 8007056:	2b01      	cmp	r3, #1
 8007058:	d012      	beq.n	8007080 <IFC_DH_canHandle+0x5c>
		break;
	case TRANSITION: // From GSE
		CANI_interpretTransitionMessage(ifcDataHandling.busIR, &ifcDataHandling.transitionMessageGSE);
		break;
	default:
		break;
 800705a:	e019      	b.n	8007090 <IFC_DH_canHandle+0x6c>
		CANI_interpretDataMessage(ifcDataHandling.busIR, &ifcDataHandling.dataMessageSys);
 800705c:	4b0e      	ldr	r3, [pc, #56]	; (8007098 <IFC_DH_canHandle+0x74>)
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	490f      	ldr	r1, [pc, #60]	; (80070a0 <IFC_DH_canHandle+0x7c>)
 8007062:	4618      	mov	r0, r3
 8007064:	f7ff f9e0 	bl	8006428 <CANI_interpretDataMessage>
		IFC_DH_reactOnData();
 8007068:	f7ff ff82 	bl	8006f70 <IFC_DH_reactOnData>
		break;
 800706c:	e010      	b.n	8007090 <IFC_DH_canHandle+0x6c>
		CANI_interpretRequestDataMessage(ifcDataHandling.busIR, &ifcDataHandling.reqDataMessageGSE);
 800706e:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <IFC_DH_canHandle+0x74>)
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	490c      	ldr	r1, [pc, #48]	; (80070a4 <IFC_DH_canHandle+0x80>)
 8007074:	4618      	mov	r0, r3
 8007076:	f7ff f9eb 	bl	8006450 <CANI_interpretRequestDataMessage>
		IFC_DH_reactOnRequest();
 800707a:	f7ff ffa3 	bl	8006fc4 <IFC_DH_reactOnRequest>
		break;
 800707e:	e007      	b.n	8007090 <IFC_DH_canHandle+0x6c>
		CANI_interpretTransitionMessage(ifcDataHandling.busIR, &ifcDataHandling.transitionMessageGSE);
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <IFC_DH_canHandle+0x74>)
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	4908      	ldr	r1, [pc, #32]	; (80070a8 <IFC_DH_canHandle+0x84>)
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff f9f6 	bl	8006478 <CANI_interpretTransitionMessage>
		break;
 800708c:	e000      	b.n	8007090 <IFC_DH_canHandle+0x6c>
		return;
 800708e:	bf00      	nop
	}
#endif
}
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	20004b64 	.word	0x20004b64
 800709c:	20004b74 	.word	0x20004b74
 80070a0:	20004b84 	.word	0x20004b84
 80070a4:	20004bc0 	.word	0x20004bc0
 80070a8:	20004bd0 	.word	0x20004bd0

080070ac <HYOS_start>:
Microcontroller mc;

/*
 * Calls State Transition to IDLE.
 */
void HYOS_start() {
 80070ac:	b580      	push	{r7, lr}
 80070ae:	af00      	add	r7, sp, #0
//	microcontroller.state = getMCState(NULL_STATE);
	stateTransition(IDLE);
 80070b0:	2001      	movs	r0, #1
 80070b2:	f7fe feab 	bl	8005e0c <stateTransition>
}
 80070b6:	bf00      	nop
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80070c6:	79fb      	ldrb	r3, [r7, #7]
 80070c8:	4a08      	ldr	r2, [pc, #32]	; (80070ec <disk_status+0x30>)
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	79fa      	ldrb	r2, [r7, #7]
 80070d4:	4905      	ldr	r1, [pc, #20]	; (80070ec <disk_status+0x30>)
 80070d6:	440a      	add	r2, r1
 80070d8:	7a12      	ldrb	r2, [r2, #8]
 80070da:	4610      	mov	r0, r2
 80070dc:	4798      	blx	r3
 80070de:	4603      	mov	r3, r0
 80070e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	200010f0 	.word	0x200010f0

080070f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	4a0d      	ldr	r2, [pc, #52]	; (8007138 <disk_initialize+0x48>)
 8007102:	5cd3      	ldrb	r3, [r2, r3]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d111      	bne.n	800712c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	4a0b      	ldr	r2, [pc, #44]	; (8007138 <disk_initialize+0x48>)
 800710c:	2101      	movs	r1, #1
 800710e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	4a09      	ldr	r2, [pc, #36]	; (8007138 <disk_initialize+0x48>)
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	79fa      	ldrb	r2, [r7, #7]
 800711e:	4906      	ldr	r1, [pc, #24]	; (8007138 <disk_initialize+0x48>)
 8007120:	440a      	add	r2, r1
 8007122:	7a12      	ldrb	r2, [r2, #8]
 8007124:	4610      	mov	r0, r2
 8007126:	4798      	blx	r3
 8007128:	4603      	mov	r3, r0
 800712a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	200010f0 	.word	0x200010f0

0800713c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800713c:	b590      	push	{r4, r7, lr}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	607a      	str	r2, [r7, #4]
 8007146:	603b      	str	r3, [r7, #0]
 8007148:	4603      	mov	r3, r0
 800714a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800714c:	7bfb      	ldrb	r3, [r7, #15]
 800714e:	4a0a      	ldr	r2, [pc, #40]	; (8007178 <disk_read+0x3c>)
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	689c      	ldr	r4, [r3, #8]
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	4a07      	ldr	r2, [pc, #28]	; (8007178 <disk_read+0x3c>)
 800715c:	4413      	add	r3, r2
 800715e:	7a18      	ldrb	r0, [r3, #8]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	68b9      	ldr	r1, [r7, #8]
 8007166:	47a0      	blx	r4
 8007168:	4603      	mov	r3, r0
 800716a:	75fb      	strb	r3, [r7, #23]
  return res;
 800716c:	7dfb      	ldrb	r3, [r7, #23]
}
 800716e:	4618      	mov	r0, r3
 8007170:	371c      	adds	r7, #28
 8007172:	46bd      	mov	sp, r7
 8007174:	bd90      	pop	{r4, r7, pc}
 8007176:	bf00      	nop
 8007178:	200010f0 	.word	0x200010f0

0800717c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800717c:	b590      	push	{r4, r7, lr}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	4a0a      	ldr	r2, [pc, #40]	; (80071b8 <disk_write+0x3c>)
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	68dc      	ldr	r4, [r3, #12]
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	4a07      	ldr	r2, [pc, #28]	; (80071b8 <disk_write+0x3c>)
 800719c:	4413      	add	r3, r2
 800719e:	7a18      	ldrb	r0, [r3, #8]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	68b9      	ldr	r1, [r7, #8]
 80071a6:	47a0      	blx	r4
 80071a8:	4603      	mov	r3, r0
 80071aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd90      	pop	{r4, r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200010f0 	.word	0x200010f0

080071bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	603a      	str	r2, [r7, #0]
 80071c6:	71fb      	strb	r3, [r7, #7]
 80071c8:	460b      	mov	r3, r1
 80071ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80071cc:	79fb      	ldrb	r3, [r7, #7]
 80071ce:	4a09      	ldr	r2, [pc, #36]	; (80071f4 <disk_ioctl+0x38>)
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	79fa      	ldrb	r2, [r7, #7]
 80071da:	4906      	ldr	r1, [pc, #24]	; (80071f4 <disk_ioctl+0x38>)
 80071dc:	440a      	add	r2, r1
 80071de:	7a10      	ldrb	r0, [r2, #8]
 80071e0:	79b9      	ldrb	r1, [r7, #6]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	4798      	blx	r3
 80071e6:	4603      	mov	r3, r0
 80071e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	200010f0 	.word	0x200010f0

080071f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	3301      	adds	r3, #1
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007208:	89fb      	ldrh	r3, [r7, #14]
 800720a:	021b      	lsls	r3, r3, #8
 800720c:	b21a      	sxth	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	b21b      	sxth	r3, r3
 8007214:	4313      	orrs	r3, r2
 8007216:	b21b      	sxth	r3, r3
 8007218:	81fb      	strh	r3, [r7, #14]
	return rv;
 800721a:	89fb      	ldrh	r3, [r7, #14]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3303      	adds	r3, #3
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	3202      	adds	r2, #2
 8007240:	7812      	ldrb	r2, [r2, #0]
 8007242:	4313      	orrs	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	3201      	adds	r2, #1
 800724e:	7812      	ldrb	r2, [r2, #0]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	021b      	lsls	r3, r3, #8
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	7812      	ldrb	r2, [r2, #0]
 800725c:	4313      	orrs	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007260:	68fb      	ldr	r3, [r7, #12]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	887a      	ldrh	r2, [r7, #2]
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	701a      	strb	r2, [r3, #0]
 8007286:	887b      	ldrh	r3, [r7, #2]
 8007288:	0a1b      	lsrs	r3, r3, #8
 800728a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	607a      	str	r2, [r7, #4]
 8007292:	887a      	ldrh	r2, [r7, #2]
 8007294:	b2d2      	uxtb	r2, r2
 8007296:	701a      	strb	r2, [r3, #0]
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	0a1b      	lsrs	r3, r3, #8
 80072be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	607a      	str	r2, [r7, #4]
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	b2d2      	uxtb	r2, r2
 80072ca:	701a      	strb	r2, [r3, #0]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	0a1b      	lsrs	r3, r3, #8
 80072d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	701a      	strb	r2, [r3, #0]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	0a1b      	lsrs	r3, r3, #8
 80072e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	607a      	str	r2, [r7, #4]
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00d      	beq.n	8007332 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	1c53      	adds	r3, r2, #1
 800731a:	613b      	str	r3, [r7, #16]
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	1c59      	adds	r1, r3, #1
 8007320:	6179      	str	r1, [r7, #20]
 8007322:	7812      	ldrb	r2, [r2, #0]
 8007324:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3b01      	subs	r3, #1
 800732a:	607b      	str	r3, [r7, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f1      	bne.n	8007316 <mem_cpy+0x1a>
	}
}
 8007332:	bf00      	nop
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800733e:	b480      	push	{r7}
 8007340:	b087      	sub	sp, #28
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	617a      	str	r2, [r7, #20]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	b2d2      	uxtb	r2, r2
 8007358:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3b01      	subs	r3, #1
 800735e:	607b      	str	r3, [r7, #4]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1f3      	bne.n	800734e <mem_set+0x10>
}
 8007366:	bf00      	nop
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007372:	b480      	push	{r7}
 8007374:	b089      	sub	sp, #36	; 0x24
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	61fb      	str	r3, [r7, #28]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	61fa      	str	r2, [r7, #28]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	4619      	mov	r1, r3
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	61ba      	str	r2, [r7, #24]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	1acb      	subs	r3, r1, r3
 800739e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	607b      	str	r3, [r7, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <mem_cmp+0x40>
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0eb      	beq.n	800738a <mem_cmp+0x18>

	return r;
 80073b2:	697b      	ldr	r3, [r7, #20]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3724      	adds	r7, #36	; 0x24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80073ca:	e002      	b.n	80073d2 <chk_chr+0x12>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3301      	adds	r3, #1
 80073d0:	607b      	str	r3, [r7, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d005      	beq.n	80073e6 <chk_chr+0x26>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d1f2      	bne.n	80073cc <chk_chr+0xc>
	return *str;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	781b      	ldrb	r3, [r3, #0]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007402:	2300      	movs	r3, #0
 8007404:	60bb      	str	r3, [r7, #8]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	e029      	b.n	8007460 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800740c:	4a27      	ldr	r2, [pc, #156]	; (80074ac <chk_lock+0xb4>)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	4413      	add	r3, r2
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d01d      	beq.n	8007456 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800741a:	4a24      	ldr	r2, [pc, #144]	; (80074ac <chk_lock+0xb4>)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	4413      	add	r3, r2
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d116      	bne.n	800745a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800742c:	4a1f      	ldr	r2, [pc, #124]	; (80074ac <chk_lock+0xb4>)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	011b      	lsls	r3, r3, #4
 8007432:	4413      	add	r3, r2
 8007434:	3304      	adds	r3, #4
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800743c:	429a      	cmp	r2, r3
 800743e:	d10c      	bne.n	800745a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007440:	4a1a      	ldr	r2, [pc, #104]	; (80074ac <chk_lock+0xb4>)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	011b      	lsls	r3, r3, #4
 8007446:	4413      	add	r3, r2
 8007448:	3308      	adds	r3, #8
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007450:	429a      	cmp	r2, r3
 8007452:	d102      	bne.n	800745a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007454:	e007      	b.n	8007466 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007456:	2301      	movs	r3, #1
 8007458:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d9d2      	bls.n	800740c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d109      	bne.n	8007480 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d102      	bne.n	8007478 <chk_lock+0x80>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b02      	cmp	r3, #2
 8007476:	d101      	bne.n	800747c <chk_lock+0x84>
 8007478:	2300      	movs	r3, #0
 800747a:	e010      	b.n	800749e <chk_lock+0xa6>
 800747c:	2312      	movs	r3, #18
 800747e:	e00e      	b.n	800749e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d108      	bne.n	8007498 <chk_lock+0xa0>
 8007486:	4a09      	ldr	r2, [pc, #36]	; (80074ac <chk_lock+0xb4>)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	011b      	lsls	r3, r3, #4
 800748c:	4413      	add	r3, r2
 800748e:	330c      	adds	r3, #12
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007496:	d101      	bne.n	800749c <chk_lock+0xa4>
 8007498:	2310      	movs	r3, #16
 800749a:	e000      	b.n	800749e <chk_lock+0xa6>
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	200010d0 	.word	0x200010d0

080074b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80074b6:	2300      	movs	r3, #0
 80074b8:	607b      	str	r3, [r7, #4]
 80074ba:	e002      	b.n	80074c2 <enq_lock+0x12>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3301      	adds	r3, #1
 80074c0:	607b      	str	r3, [r7, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d806      	bhi.n	80074d6 <enq_lock+0x26>
 80074c8:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <enq_lock+0x40>)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	011b      	lsls	r3, r3, #4
 80074ce:	4413      	add	r3, r2
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1f2      	bne.n	80074bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	bf14      	ite	ne
 80074dc:	2301      	movne	r3, #1
 80074de:	2300      	moveq	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	200010d0 	.word	0x200010d0

080074f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80074fe:	2300      	movs	r3, #0
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	e01f      	b.n	8007544 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007504:	4a41      	ldr	r2, [pc, #260]	; (800760c <inc_lock+0x118>)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	4413      	add	r3, r2
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d113      	bne.n	800753e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007516:	4a3d      	ldr	r2, [pc, #244]	; (800760c <inc_lock+0x118>)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	011b      	lsls	r3, r3, #4
 800751c:	4413      	add	r3, r2
 800751e:	3304      	adds	r3, #4
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007526:	429a      	cmp	r2, r3
 8007528:	d109      	bne.n	800753e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800752a:	4a38      	ldr	r2, [pc, #224]	; (800760c <inc_lock+0x118>)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	4413      	add	r3, r2
 8007532:	3308      	adds	r3, #8
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800753a:	429a      	cmp	r2, r3
 800753c:	d006      	beq.n	800754c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3301      	adds	r3, #1
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d9dc      	bls.n	8007504 <inc_lock+0x10>
 800754a:	e000      	b.n	800754e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800754c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b02      	cmp	r3, #2
 8007552:	d132      	bne.n	80075ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007554:	2300      	movs	r3, #0
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	e002      	b.n	8007560 <inc_lock+0x6c>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d806      	bhi.n	8007574 <inc_lock+0x80>
 8007566:	4a29      	ldr	r2, [pc, #164]	; (800760c <inc_lock+0x118>)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	011b      	lsls	r3, r3, #4
 800756c:	4413      	add	r3, r2
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1f2      	bne.n	800755a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d101      	bne.n	800757e <inc_lock+0x8a>
 800757a:	2300      	movs	r3, #0
 800757c:	e040      	b.n	8007600 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	4922      	ldr	r1, [pc, #136]	; (800760c <inc_lock+0x118>)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	440b      	add	r3, r1
 800758a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	491e      	ldr	r1, [pc, #120]	; (800760c <inc_lock+0x118>)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	011b      	lsls	r3, r3, #4
 8007596:	440b      	add	r3, r1
 8007598:	3304      	adds	r3, #4
 800759a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	695a      	ldr	r2, [r3, #20]
 80075a0:	491a      	ldr	r1, [pc, #104]	; (800760c <inc_lock+0x118>)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	011b      	lsls	r3, r3, #4
 80075a6:	440b      	add	r3, r1
 80075a8:	3308      	adds	r3, #8
 80075aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80075ac:	4a17      	ldr	r2, [pc, #92]	; (800760c <inc_lock+0x118>)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	4413      	add	r3, r2
 80075b4:	330c      	adds	r3, #12
 80075b6:	2200      	movs	r2, #0
 80075b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d009      	beq.n	80075d4 <inc_lock+0xe0>
 80075c0:	4a12      	ldr	r2, [pc, #72]	; (800760c <inc_lock+0x118>)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	4413      	add	r3, r2
 80075c8:	330c      	adds	r3, #12
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <inc_lock+0xe0>
 80075d0:	2300      	movs	r3, #0
 80075d2:	e015      	b.n	8007600 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d108      	bne.n	80075ec <inc_lock+0xf8>
 80075da:	4a0c      	ldr	r2, [pc, #48]	; (800760c <inc_lock+0x118>)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	4413      	add	r3, r2
 80075e2:	330c      	adds	r3, #12
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	3301      	adds	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	e001      	b.n	80075f0 <inc_lock+0xfc>
 80075ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075f0:	4906      	ldr	r1, [pc, #24]	; (800760c <inc_lock+0x118>)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	011b      	lsls	r3, r3, #4
 80075f6:	440b      	add	r3, r1
 80075f8:	330c      	adds	r3, #12
 80075fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3301      	adds	r3, #1
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	200010d0 	.word	0x200010d0

08007610 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3b01      	subs	r3, #1
 800761c:	607b      	str	r3, [r7, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d825      	bhi.n	8007670 <dec_lock+0x60>
		n = Files[i].ctr;
 8007624:	4a17      	ldr	r2, [pc, #92]	; (8007684 <dec_lock+0x74>)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	4413      	add	r3, r2
 800762c:	330c      	adds	r3, #12
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007632:	89fb      	ldrh	r3, [r7, #14]
 8007634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007638:	d101      	bne.n	800763e <dec_lock+0x2e>
 800763a:	2300      	movs	r3, #0
 800763c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800763e:	89fb      	ldrh	r3, [r7, #14]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <dec_lock+0x3a>
 8007644:	89fb      	ldrh	r3, [r7, #14]
 8007646:	3b01      	subs	r3, #1
 8007648:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800764a:	4a0e      	ldr	r2, [pc, #56]	; (8007684 <dec_lock+0x74>)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	4413      	add	r3, r2
 8007652:	330c      	adds	r3, #12
 8007654:	89fa      	ldrh	r2, [r7, #14]
 8007656:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007658:	89fb      	ldrh	r3, [r7, #14]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d105      	bne.n	800766a <dec_lock+0x5a>
 800765e:	4a09      	ldr	r2, [pc, #36]	; (8007684 <dec_lock+0x74>)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	011b      	lsls	r3, r3, #4
 8007664:	4413      	add	r3, r2
 8007666:	2200      	movs	r2, #0
 8007668:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	737b      	strb	r3, [r7, #13]
 800766e:	e001      	b.n	8007674 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007670:	2302      	movs	r3, #2
 8007672:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007674:	7b7b      	ldrb	r3, [r7, #13]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	200010d0 	.word	0x200010d0

08007688 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007690:	2300      	movs	r3, #0
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	e010      	b.n	80076b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007696:	4a0d      	ldr	r2, [pc, #52]	; (80076cc <clear_lock+0x44>)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	011b      	lsls	r3, r3, #4
 800769c:	4413      	add	r3, r2
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d105      	bne.n	80076b2 <clear_lock+0x2a>
 80076a6:	4a09      	ldr	r2, [pc, #36]	; (80076cc <clear_lock+0x44>)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	4413      	add	r3, r2
 80076ae:	2200      	movs	r2, #0
 80076b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3301      	adds	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d9eb      	bls.n	8007696 <clear_lock+0xe>
	}
}
 80076be:	bf00      	nop
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	200010d0 	.word	0x200010d0

080076d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	78db      	ldrb	r3, [r3, #3]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d034      	beq.n	800774e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	7858      	ldrb	r0, [r3, #1]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80076f4:	2301      	movs	r3, #1
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	f7ff fd40 	bl	800717c <disk_write>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007702:	2301      	movs	r3, #1
 8007704:	73fb      	strb	r3, [r7, #15]
 8007706:	e022      	b.n	800774e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	1ad2      	subs	r2, r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	429a      	cmp	r2, r3
 800771c:	d217      	bcs.n	800774e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	789b      	ldrb	r3, [r3, #2]
 8007722:	613b      	str	r3, [r7, #16]
 8007724:	e010      	b.n	8007748 <sync_window+0x78>
					wsect += fs->fsize;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4413      	add	r3, r2
 800772e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	7858      	ldrb	r0, [r3, #1]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800773a:	2301      	movs	r3, #1
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	f7ff fd1d 	bl	800717c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	3b01      	subs	r3, #1
 8007746:	613b      	str	r3, [r7, #16]
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d8eb      	bhi.n	8007726 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d01b      	beq.n	80077a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff ffad 	bl	80076d0 <sync_window>
 8007776:	4603      	mov	r3, r0
 8007778:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d113      	bne.n	80077a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	7858      	ldrb	r0, [r3, #1]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800778a:	2301      	movs	r3, #1
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	f7ff fcd5 	bl	800713c <disk_read>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007798:	f04f 33ff 	mov.w	r3, #4294967295
 800779c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800779e:	2301      	movs	r3, #1
 80077a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7ff ff87 	bl	80076d0 <sync_window>
 80077c2:	4603      	mov	r3, r0
 80077c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d159      	bne.n	8007880 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d149      	bne.n	8007868 <sync_fs+0xb4>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	791b      	ldrb	r3, [r3, #4]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d145      	bne.n	8007868 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	899b      	ldrh	r3, [r3, #12]
 80077e6:	461a      	mov	r2, r3
 80077e8:	2100      	movs	r1, #0
 80077ea:	f7ff fda8 	bl	800733e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3334      	adds	r3, #52	; 0x34
 80077f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077f6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff fd37 	bl	800726e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3334      	adds	r3, #52	; 0x34
 8007804:	4921      	ldr	r1, [pc, #132]	; (800788c <sync_fs+0xd8>)
 8007806:	4618      	mov	r0, r3
 8007808:	f7ff fd4c 	bl	80072a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3334      	adds	r3, #52	; 0x34
 8007810:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007814:	491e      	ldr	r1, [pc, #120]	; (8007890 <sync_fs+0xdc>)
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff fd44 	bl	80072a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3334      	adds	r3, #52	; 0x34
 8007820:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	4619      	mov	r1, r3
 800782a:	4610      	mov	r0, r2
 800782c:	f7ff fd3a 	bl	80072a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3334      	adds	r3, #52	; 0x34
 8007834:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	4619      	mov	r1, r3
 800783e:	4610      	mov	r0, r2
 8007840:	f7ff fd30 	bl	80072a4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	7858      	ldrb	r0, [r3, #1]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800785c:	2301      	movs	r3, #1
 800785e:	f7ff fc8d 	bl	800717c <disk_write>
			fs->fsi_flag = 0;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	2200      	movs	r2, #0
 800786e:	2100      	movs	r1, #0
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff fca3 	bl	80071bc <disk_ioctl>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <sync_fs+0xcc>
 800787c:	2301      	movs	r3, #1
 800787e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	41615252 	.word	0x41615252
 8007890:	61417272 	.word	0x61417272

08007894 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	3b02      	subs	r3, #2
 80078a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	3b02      	subs	r3, #2
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d301      	bcc.n	80078b4 <clust2sect+0x20>
 80078b0:	2300      	movs	r3, #0
 80078b2:	e008      	b.n	80078c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	895b      	ldrh	r3, [r3, #10]
 80078b8:	461a      	mov	r2, r3
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	fb03 f202 	mul.w	r2, r3, r2
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	4413      	add	r3, r2
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b086      	sub	sp, #24
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d904      	bls.n	80078f2 <get_fat+0x20>
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d302      	bcc.n	80078f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80078f2:	2301      	movs	r3, #1
 80078f4:	617b      	str	r3, [r7, #20]
 80078f6:	e0b7      	b.n	8007a68 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80078f8:	f04f 33ff 	mov.w	r3, #4294967295
 80078fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b02      	cmp	r3, #2
 8007904:	d05a      	beq.n	80079bc <get_fat+0xea>
 8007906:	2b03      	cmp	r3, #3
 8007908:	d07d      	beq.n	8007a06 <get_fat+0x134>
 800790a:	2b01      	cmp	r3, #1
 800790c:	f040 80a2 	bne.w	8007a54 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	085b      	lsrs	r3, r3, #1
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	4413      	add	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	899b      	ldrh	r3, [r3, #12]
 8007926:	4619      	mov	r1, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	fbb3 f3f1 	udiv	r3, r3, r1
 800792e:	4413      	add	r3, r2
 8007930:	4619      	mov	r1, r3
 8007932:	6938      	ldr	r0, [r7, #16]
 8007934:	f7ff ff10 	bl	8007758 <move_window>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	f040 808d 	bne.w	8007a5a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	60fa      	str	r2, [r7, #12]
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	8992      	ldrh	r2, [r2, #12]
 800794a:	fbb3 f1f2 	udiv	r1, r3, r2
 800794e:	fb02 f201 	mul.w	r2, r2, r1
 8007952:	1a9b      	subs	r3, r3, r2
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	4413      	add	r3, r2
 8007958:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800795c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	899b      	ldrh	r3, [r3, #12]
 8007966:	4619      	mov	r1, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	fbb3 f3f1 	udiv	r3, r3, r1
 800796e:	4413      	add	r3, r2
 8007970:	4619      	mov	r1, r3
 8007972:	6938      	ldr	r0, [r7, #16]
 8007974:	f7ff fef0 	bl	8007758 <move_window>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d16f      	bne.n	8007a5e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	899b      	ldrh	r3, [r3, #12]
 8007982:	461a      	mov	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	fbb3 f1f2 	udiv	r1, r3, r2
 800798a:	fb02 f201 	mul.w	r2, r2, r1
 800798e:	1a9b      	subs	r3, r3, r2
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	4413      	add	r3, r2
 8007994:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	461a      	mov	r2, r3
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4313      	orrs	r3, r2
 80079a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <get_fat+0xe0>
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	091b      	lsrs	r3, r3, #4
 80079b0:	e002      	b.n	80079b8 <get_fat+0xe6>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079b8:	617b      	str	r3, [r7, #20]
			break;
 80079ba:	e055      	b.n	8007a68 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	899b      	ldrh	r3, [r3, #12]
 80079c4:	085b      	lsrs	r3, r3, #1
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	4619      	mov	r1, r3
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80079d0:	4413      	add	r3, r2
 80079d2:	4619      	mov	r1, r3
 80079d4:	6938      	ldr	r0, [r7, #16]
 80079d6:	f7ff febf 	bl	8007758 <move_window>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d140      	bne.n	8007a62 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	8992      	ldrh	r2, [r2, #12]
 80079ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80079f2:	fb02 f200 	mul.w	r2, r2, r0
 80079f6:	1a9b      	subs	r3, r3, r2
 80079f8:	440b      	add	r3, r1
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff fbfc 	bl	80071f8 <ld_word>
 8007a00:	4603      	mov	r3, r0
 8007a02:	617b      	str	r3, [r7, #20]
			break;
 8007a04:	e030      	b.n	8007a68 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	899b      	ldrh	r3, [r3, #12]
 8007a0e:	089b      	lsrs	r3, r3, #2
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	4619      	mov	r1, r3
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a1a:	4413      	add	r3, r2
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6938      	ldr	r0, [r7, #16]
 8007a20:	f7ff fe9a 	bl	8007758 <move_window>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d11d      	bne.n	8007a66 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	8992      	ldrh	r2, [r2, #12]
 8007a38:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a3c:	fb02 f200 	mul.w	r2, r2, r0
 8007a40:	1a9b      	subs	r3, r3, r2
 8007a42:	440b      	add	r3, r1
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7ff fbef 	bl	8007228 <ld_dword>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007a50:	617b      	str	r3, [r7, #20]
			break;
 8007a52:	e009      	b.n	8007a68 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007a54:	2301      	movs	r3, #1
 8007a56:	617b      	str	r3, [r7, #20]
 8007a58:	e006      	b.n	8007a68 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a5a:	bf00      	nop
 8007a5c:	e004      	b.n	8007a68 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a5e:	bf00      	nop
 8007a60:	e002      	b.n	8007a68 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a62:	bf00      	nop
 8007a64:	e000      	b.n	8007a68 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a66:	bf00      	nop
		}
	}

	return val;
 8007a68:	697b      	ldr	r3, [r7, #20]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007a72:	b590      	push	{r4, r7, lr}
 8007a74:	b089      	sub	sp, #36	; 0x24
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	60b9      	str	r1, [r7, #8]
 8007a7c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	f240 8106 	bls.w	8007c96 <put_fat+0x224>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	f080 8100 	bcs.w	8007c96 <put_fat+0x224>
		switch (fs->fs_type) {
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	f000 8088 	beq.w	8007bb0 <put_fat+0x13e>
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	f000 80b0 	beq.w	8007c06 <put_fat+0x194>
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	f040 80f5 	bne.w	8007c96 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	61bb      	str	r3, [r7, #24]
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	085b      	lsrs	r3, r3, #1
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	899b      	ldrh	r3, [r3, #12]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007aca:	4413      	add	r3, r2
 8007acc:	4619      	mov	r1, r3
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f7ff fe42 	bl	8007758 <move_window>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ad8:	7ffb      	ldrb	r3, [r7, #31]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f040 80d4 	bne.w	8007c88 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	61ba      	str	r2, [r7, #24]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	8992      	ldrh	r2, [r2, #12]
 8007af0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007af4:	fb02 f200 	mul.w	r2, r2, r0
 8007af8:	1a9b      	subs	r3, r3, r2
 8007afa:	440b      	add	r3, r1
 8007afc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00d      	beq.n	8007b24 <put_fat+0xb2>
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	b25b      	sxtb	r3, r3
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	b25a      	sxtb	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	b25b      	sxtb	r3, r3
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	b25b      	sxtb	r3, r3
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	e001      	b.n	8007b28 <put_fat+0xb6>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	899b      	ldrh	r3, [r3, #12]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b42:	4413      	add	r3, r2
 8007b44:	4619      	mov	r1, r3
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f7ff fe06 	bl	8007758 <move_window>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b50:	7ffb      	ldrb	r3, [r7, #31]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f040 809a 	bne.w	8007c8c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	899b      	ldrh	r3, [r3, #12]
 8007b62:	461a      	mov	r2, r3
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b6a:	fb02 f200 	mul.w	r2, r2, r0
 8007b6e:	1a9b      	subs	r3, r3, r2
 8007b70:	440b      	add	r3, r1
 8007b72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <put_fat+0x114>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	091b      	lsrs	r3, r3, #4
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	e00e      	b.n	8007ba4 <put_fat+0x132>
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	b25b      	sxtb	r3, r3
 8007b8c:	f023 030f 	bic.w	r3, r3, #15
 8007b90:	b25a      	sxtb	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	0a1b      	lsrs	r3, r3, #8
 8007b96:	b25b      	sxtb	r3, r3
 8007b98:	f003 030f 	and.w	r3, r3, #15
 8007b9c:	b25b      	sxtb	r3, r3
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	b25b      	sxtb	r3, r3
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2201      	movs	r2, #1
 8007bac:	70da      	strb	r2, [r3, #3]
			break;
 8007bae:	e072      	b.n	8007c96 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	899b      	ldrh	r3, [r3, #12]
 8007bb8:	085b      	lsrs	r3, r3, #1
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bc4:	4413      	add	r3, r2
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f7ff fdc5 	bl	8007758 <move_window>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007bd2:	7ffb      	ldrb	r3, [r7, #31]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d15b      	bne.n	8007c90 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	8992      	ldrh	r2, [r2, #12]
 8007be6:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bea:	fb02 f200 	mul.w	r2, r2, r0
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	b292      	uxth	r2, r2
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7ff fb38 	bl	800726e <st_word>
			fs->wflag = 1;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	70da      	strb	r2, [r3, #3]
			break;
 8007c04:	e047      	b.n	8007c96 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	899b      	ldrh	r3, [r3, #12]
 8007c0e:	089b      	lsrs	r3, r3, #2
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	4619      	mov	r1, r3
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c1a:	4413      	add	r3, r2
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff fd9a 	bl	8007758 <move_window>
 8007c24:	4603      	mov	r3, r0
 8007c26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c28:	7ffb      	ldrb	r3, [r7, #31]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d132      	bne.n	8007c94 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	8992      	ldrh	r2, [r2, #12]
 8007c42:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c46:	fb02 f200 	mul.w	r2, r2, r0
 8007c4a:	1a9b      	subs	r3, r3, r2
 8007c4c:	440b      	add	r3, r1
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7ff faea 	bl	8007228 <ld_dword>
 8007c54:	4603      	mov	r3, r0
 8007c56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007c5a:	4323      	orrs	r3, r4
 8007c5c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	8992      	ldrh	r2, [r2, #12]
 8007c6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c70:	fb02 f200 	mul.w	r2, r2, r0
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	440b      	add	r3, r1
 8007c78:	6879      	ldr	r1, [r7, #4]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff fb12 	bl	80072a4 <st_dword>
			fs->wflag = 1;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2201      	movs	r2, #1
 8007c84:	70da      	strb	r2, [r3, #3]
			break;
 8007c86:	e006      	b.n	8007c96 <put_fat+0x224>
			if (res != FR_OK) break;
 8007c88:	bf00      	nop
 8007c8a:	e004      	b.n	8007c96 <put_fat+0x224>
			if (res != FR_OK) break;
 8007c8c:	bf00      	nop
 8007c8e:	e002      	b.n	8007c96 <put_fat+0x224>
			if (res != FR_OK) break;
 8007c90:	bf00      	nop
 8007c92:	e000      	b.n	8007c96 <put_fat+0x224>
			if (res != FR_OK) break;
 8007c94:	bf00      	nop
		}
	}
	return res;
 8007c96:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3724      	adds	r7, #36	; 0x24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd90      	pop	{r4, r7, pc}

08007ca0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b088      	sub	sp, #32
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d904      	bls.n	8007cc6 <remove_chain+0x26>
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d301      	bcc.n	8007cca <remove_chain+0x2a>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e04b      	b.n	8007d62 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00c      	beq.n	8007cea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd4:	6879      	ldr	r1, [r7, #4]
 8007cd6:	69b8      	ldr	r0, [r7, #24]
 8007cd8:	f7ff fecb 	bl	8007a72 <put_fat>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007ce0:	7ffb      	ldrb	r3, [r7, #31]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <remove_chain+0x4a>
 8007ce6:	7ffb      	ldrb	r3, [r7, #31]
 8007ce8:	e03b      	b.n	8007d62 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007cea:	68b9      	ldr	r1, [r7, #8]
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f7ff fdf0 	bl	80078d2 <get_fat>
 8007cf2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d031      	beq.n	8007d5e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <remove_chain+0x64>
 8007d00:	2302      	movs	r3, #2
 8007d02:	e02e      	b.n	8007d62 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0a:	d101      	bne.n	8007d10 <remove_chain+0x70>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e028      	b.n	8007d62 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007d10:	2200      	movs	r2, #0
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	69b8      	ldr	r0, [r7, #24]
 8007d16:	f7ff feac 	bl	8007a72 <put_fat>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007d1e:	7ffb      	ldrb	r3, [r7, #31]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <remove_chain+0x88>
 8007d24:	7ffb      	ldrb	r3, [r7, #31]
 8007d26:	e01c      	b.n	8007d62 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	695a      	ldr	r2, [r3, #20]
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	3b02      	subs	r3, #2
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d20b      	bcs.n	8007d4e <remove_chain+0xae>
			fs->free_clst++;
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	791b      	ldrb	r3, [r3, #4]
 8007d44:	f043 0301 	orr.w	r3, r3, #1
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d3c6      	bcc.n	8007cea <remove_chain+0x4a>
 8007d5c:	e000      	b.n	8007d60 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007d5e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3720      	adds	r7, #32
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b088      	sub	sp, #32
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10d      	bne.n	8007d9c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d004      	beq.n	8007d96 <create_chain+0x2c>
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d31b      	bcc.n	8007dce <create_chain+0x64>
 8007d96:	2301      	movs	r3, #1
 8007d98:	61bb      	str	r3, [r7, #24]
 8007d9a:	e018      	b.n	8007dce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff fd97 	bl	80078d2 <get_fat>
 8007da4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d801      	bhi.n	8007db0 <create_chain+0x46>
 8007dac:	2301      	movs	r3, #1
 8007dae:	e070      	b.n	8007e92 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db6:	d101      	bne.n	8007dbc <create_chain+0x52>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	e06a      	b.n	8007e92 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d201      	bcs.n	8007dca <create_chain+0x60>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	e063      	b.n	8007e92 <create_chain+0x128>
		scl = clst;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d307      	bcc.n	8007df2 <create_chain+0x88>
				ncl = 2;
 8007de2:	2302      	movs	r3, #2
 8007de4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d901      	bls.n	8007df2 <create_chain+0x88>
 8007dee:	2300      	movs	r3, #0
 8007df0:	e04f      	b.n	8007e92 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007df2:	69f9      	ldr	r1, [r7, #28]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff fd6c 	bl	80078d2 <get_fat>
 8007dfa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00e      	beq.n	8007e20 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d003      	beq.n	8007e10 <create_chain+0xa6>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0e:	d101      	bne.n	8007e14 <create_chain+0xaa>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	e03e      	b.n	8007e92 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d1da      	bne.n	8007dd2 <create_chain+0x68>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	e038      	b.n	8007e92 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007e20:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007e22:	f04f 32ff 	mov.w	r2, #4294967295
 8007e26:	69f9      	ldr	r1, [r7, #28]
 8007e28:	6938      	ldr	r0, [r7, #16]
 8007e2a:	f7ff fe22 	bl	8007a72 <put_fat>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d109      	bne.n	8007e4c <create_chain+0xe2>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d006      	beq.n	8007e4c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6938      	ldr	r0, [r7, #16]
 8007e44:	f7ff fe15 	bl	8007a72 <put_fat>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d116      	bne.n	8007e80 <create_chain+0x116>
		fs->last_clst = ncl;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	69fa      	ldr	r2, [r7, #28]
 8007e56:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	695a      	ldr	r2, [r3, #20]
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	3b02      	subs	r3, #2
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d804      	bhi.n	8007e70 <create_chain+0x106>
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	1e5a      	subs	r2, r3, #1
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	791b      	ldrb	r3, [r3, #4]
 8007e74:	f043 0301 	orr.w	r3, r3, #1
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	711a      	strb	r2, [r3, #4]
 8007e7e:	e007      	b.n	8007e90 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d102      	bne.n	8007e8c <create_chain+0x122>
 8007e86:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8a:	e000      	b.n	8007e8e <create_chain+0x124>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007e90:	69fb      	ldr	r3, [r7, #28]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3720      	adds	r7, #32
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b087      	sub	sp, #28
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	3304      	adds	r3, #4
 8007eb0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	899b      	ldrh	r3, [r3, #12]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	8952      	ldrh	r2, [r2, #10]
 8007ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ec6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	1d1a      	adds	r2, r3, #4
 8007ecc:	613a      	str	r2, [r7, #16]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <clmt_clust+0x42>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	e010      	b.n	8007efe <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d307      	bcc.n	8007ef4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ef2:	e7e9      	b.n	8007ec8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007ef4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	4413      	add	r3, r2
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b086      	sub	sp, #24
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f20:	d204      	bcs.n	8007f2c <dir_sdi+0x22>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	f003 031f 	and.w	r3, r3, #31
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e071      	b.n	8008014 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d106      	bne.n	8007f50 <dir_sdi+0x46>
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d902      	bls.n	8007f50 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10c      	bne.n	8007f70 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	095b      	lsrs	r3, r3, #5
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	8912      	ldrh	r2, [r2, #8]
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d301      	bcc.n	8007f66 <dir_sdi+0x5c>
 8007f62:	2302      	movs	r3, #2
 8007f64:	e056      	b.n	8008014 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	61da      	str	r2, [r3, #28]
 8007f6e:	e02d      	b.n	8007fcc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	895b      	ldrh	r3, [r3, #10]
 8007f74:	461a      	mov	r2, r3
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	899b      	ldrh	r3, [r3, #12]
 8007f7a:	fb03 f302 	mul.w	r3, r3, r2
 8007f7e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f80:	e019      	b.n	8007fb6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6979      	ldr	r1, [r7, #20]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff fca3 	bl	80078d2 <get_fat>
 8007f8c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f94:	d101      	bne.n	8007f9a <dir_sdi+0x90>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e03c      	b.n	8008014 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d904      	bls.n	8007faa <dir_sdi+0xa0>
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d301      	bcc.n	8007fae <dir_sdi+0xa4>
 8007faa:	2302      	movs	r3, #2
 8007fac:	e032      	b.n	8008014 <dir_sdi+0x10a>
			ofs -= csz;
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d2e1      	bcs.n	8007f82 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007fbe:	6979      	ldr	r1, [r7, #20]
 8007fc0:	6938      	ldr	r0, [r7, #16]
 8007fc2:	f7ff fc67 	bl	8007894 <clust2sect>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <dir_sdi+0xd4>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e01a      	b.n	8008014 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	69da      	ldr	r2, [r3, #28]
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	899b      	ldrh	r3, [r3, #12]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fee:	441a      	add	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	899b      	ldrh	r3, [r3, #12]
 8007ffe:	461a      	mov	r2, r3
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	fbb3 f0f2 	udiv	r0, r3, r2
 8008006:	fb02 f200 	mul.w	r2, r2, r0
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	18ca      	adds	r2, r1, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	3320      	adds	r3, #32
 8008032:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <dir_next+0x28>
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008042:	d301      	bcc.n	8008048 <dir_next+0x2c>
 8008044:	2304      	movs	r3, #4
 8008046:	e0bb      	b.n	80081c0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	899b      	ldrh	r3, [r3, #12]
 800804c:	461a      	mov	r2, r3
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	fbb3 f1f2 	udiv	r1, r3, r2
 8008054:	fb02 f201 	mul.w	r2, r2, r1
 8008058:	1a9b      	subs	r3, r3, r2
 800805a:	2b00      	cmp	r3, #0
 800805c:	f040 809d 	bne.w	800819a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	69db      	ldr	r3, [r3, #28]
 8008064:	1c5a      	adds	r2, r3, #1
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10b      	bne.n	800808a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	095b      	lsrs	r3, r3, #5
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	8912      	ldrh	r2, [r2, #8]
 800807a:	4293      	cmp	r3, r2
 800807c:	f0c0 808d 	bcc.w	800819a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	61da      	str	r2, [r3, #28]
 8008086:	2304      	movs	r3, #4
 8008088:	e09a      	b.n	80081c0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	899b      	ldrh	r3, [r3, #12]
 800808e:	461a      	mov	r2, r3
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	fbb3 f3f2 	udiv	r3, r3, r2
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	8952      	ldrh	r2, [r2, #10]
 800809a:	3a01      	subs	r2, #1
 800809c:	4013      	ands	r3, r2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d17b      	bne.n	800819a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	4619      	mov	r1, r3
 80080aa:	4610      	mov	r0, r2
 80080ac:	f7ff fc11 	bl	80078d2 <get_fat>
 80080b0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d801      	bhi.n	80080bc <dir_next+0xa0>
 80080b8:	2302      	movs	r3, #2
 80080ba:	e081      	b.n	80081c0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c2:	d101      	bne.n	80080c8 <dir_next+0xac>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e07b      	b.n	80081c0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d359      	bcc.n	8008186 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	61da      	str	r2, [r3, #28]
 80080de:	2304      	movs	r3, #4
 80080e0:	e06e      	b.n	80081c0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	4619      	mov	r1, r3
 80080ea:	4610      	mov	r0, r2
 80080ec:	f7ff fe3d 	bl	8007d6a <create_chain>
 80080f0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <dir_next+0xe0>
 80080f8:	2307      	movs	r3, #7
 80080fa:	e061      	b.n	80081c0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d101      	bne.n	8008106 <dir_next+0xea>
 8008102:	2302      	movs	r3, #2
 8008104:	e05c      	b.n	80081c0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810c:	d101      	bne.n	8008112 <dir_next+0xf6>
 800810e:	2301      	movs	r3, #1
 8008110:	e056      	b.n	80081c0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f7ff fadc 	bl	80076d0 <sync_window>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <dir_next+0x106>
 800811e:	2301      	movs	r3, #1
 8008120:	e04e      	b.n	80081c0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	899b      	ldrh	r3, [r3, #12]
 800812c:	461a      	mov	r2, r3
 800812e:	2100      	movs	r1, #0
 8008130:	f7ff f905 	bl	800733e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008134:	2300      	movs	r3, #0
 8008136:	613b      	str	r3, [r7, #16]
 8008138:	6979      	ldr	r1, [r7, #20]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f7ff fbaa 	bl	8007894 <clust2sect>
 8008140:	4602      	mov	r2, r0
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	631a      	str	r2, [r3, #48]	; 0x30
 8008146:	e012      	b.n	800816e <dir_next+0x152>
						fs->wflag = 1;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2201      	movs	r2, #1
 800814c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff fabe 	bl	80076d0 <sync_window>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <dir_next+0x142>
 800815a:	2301      	movs	r3, #1
 800815c:	e030      	b.n	80081c0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	3301      	adds	r3, #1
 8008162:	613b      	str	r3, [r7, #16]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008168:	1c5a      	adds	r2, r3, #1
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	631a      	str	r2, [r3, #48]	; 0x30
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	895b      	ldrh	r3, [r3, #10]
 8008172:	461a      	mov	r2, r3
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	4293      	cmp	r3, r2
 8008178:	d3e6      	bcc.n	8008148 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	1ad2      	subs	r2, r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800818c:	6979      	ldr	r1, [r7, #20]
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f7ff fb80 	bl	8007894 <clust2sect>
 8008194:	4602      	mov	r2, r0
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	899b      	ldrh	r3, [r3, #12]
 80081aa:	461a      	mov	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80081b2:	fb02 f200 	mul.w	r2, r2, r0
 80081b6:	1a9b      	subs	r3, r3, r2
 80081b8:	18ca      	adds	r2, r1, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80081d8:	2100      	movs	r1, #0
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff fe95 	bl	8007f0a <dir_sdi>
 80081e0:	4603      	mov	r3, r0
 80081e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d12b      	bne.n	8008242 <dir_alloc+0x7a>
		n = 0;
 80081ea:	2300      	movs	r3, #0
 80081ec:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	4619      	mov	r1, r3
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7ff faaf 	bl	8007758 <move_window>
 80081fa:	4603      	mov	r3, r0
 80081fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d11d      	bne.n	8008240 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	2be5      	cmp	r3, #229	; 0xe5
 800820c:	d004      	beq.n	8008218 <dir_alloc+0x50>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d107      	bne.n	8008228 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	3301      	adds	r3, #1
 800821c:	613b      	str	r3, [r7, #16]
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d102      	bne.n	800822c <dir_alloc+0x64>
 8008226:	e00c      	b.n	8008242 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008228:	2300      	movs	r3, #0
 800822a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800822c:	2101      	movs	r1, #1
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff fef4 	bl	800801c <dir_next>
 8008234:	4603      	mov	r3, r0
 8008236:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d0d7      	beq.n	80081ee <dir_alloc+0x26>
 800823e:	e000      	b.n	8008242 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008240:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	2b04      	cmp	r3, #4
 8008246:	d101      	bne.n	800824c <dir_alloc+0x84>
 8008248:	2307      	movs	r3, #7
 800824a:	75fb      	strb	r3, [r7, #23]
	return res;
 800824c:	7dfb      	ldrb	r3, [r7, #23]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	331a      	adds	r3, #26
 8008264:	4618      	mov	r0, r3
 8008266:	f7fe ffc7 	bl	80071f8 <ld_word>
 800826a:	4603      	mov	r3, r0
 800826c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b03      	cmp	r3, #3
 8008274:	d109      	bne.n	800828a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	3314      	adds	r3, #20
 800827a:	4618      	mov	r0, r3
 800827c:	f7fe ffbc 	bl	80071f8 <ld_word>
 8008280:	4603      	mov	r3, r0
 8008282:	041b      	lsls	r3, r3, #16
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	4313      	orrs	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800828a:	68fb      	ldr	r3, [r7, #12]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	331a      	adds	r3, #26
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	b292      	uxth	r2, r2
 80082a8:	4611      	mov	r1, r2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe ffdf 	bl	800726e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d109      	bne.n	80082cc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f103 0214 	add.w	r2, r3, #20
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	0c1b      	lsrs	r3, r3, #16
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	4619      	mov	r1, r3
 80082c6:	4610      	mov	r0, r2
 80082c8:	f7fe ffd1 	bl	800726e <st_word>
	}
}
 80082cc:	bf00      	nop
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80082e2:	2100      	movs	r1, #0
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff fe10 	bl	8007f0a <dir_sdi>
 80082ea:	4603      	mov	r3, r0
 80082ec:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <dir_find+0x24>
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	e03e      	b.n	8008376 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	69db      	ldr	r3, [r3, #28]
 80082fc:	4619      	mov	r1, r3
 80082fe:	6938      	ldr	r0, [r7, #16]
 8008300:	f7ff fa2a 	bl	8007758 <move_window>
 8008304:	4603      	mov	r3, r0
 8008306:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d12f      	bne.n	800836e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008316:	7bfb      	ldrb	r3, [r7, #15]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <dir_find+0x4e>
 800831c:	2304      	movs	r3, #4
 800831e:	75fb      	strb	r3, [r7, #23]
 8008320:	e028      	b.n	8008374 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	330b      	adds	r3, #11
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800832e:	b2da      	uxtb	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	330b      	adds	r3, #11
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	f003 0308 	and.w	r3, r3, #8
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10a      	bne.n	800835a <dir_find+0x86>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a18      	ldr	r0, [r3, #32]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	3324      	adds	r3, #36	; 0x24
 800834c:	220b      	movs	r2, #11
 800834e:	4619      	mov	r1, r3
 8008350:	f7ff f80f 	bl	8007372 <mem_cmp>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00b      	beq.n	8008372 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800835a:	2100      	movs	r1, #0
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7ff fe5d 	bl	800801c <dir_next>
 8008362:	4603      	mov	r3, r0
 8008364:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008366:	7dfb      	ldrb	r3, [r7, #23]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d0c5      	beq.n	80082f8 <dir_find+0x24>
 800836c:	e002      	b.n	8008374 <dir_find+0xa0>
		if (res != FR_OK) break;
 800836e:	bf00      	nop
 8008370:	e000      	b.n	8008374 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008372:	bf00      	nop

	return res;
 8008374:	7dfb      	ldrb	r3, [r7, #23]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800838c:	2101      	movs	r1, #1
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7ff ff1a 	bl	80081c8 <dir_alloc>
 8008394:	4603      	mov	r3, r0
 8008396:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d11c      	bne.n	80083d8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	4619      	mov	r1, r3
 80083a4:	68b8      	ldr	r0, [r7, #8]
 80083a6:	f7ff f9d7 	bl	8007758 <move_window>
 80083aa:	4603      	mov	r3, r0
 80083ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d111      	bne.n	80083d8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	2220      	movs	r2, #32
 80083ba:	2100      	movs	r1, #0
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fe ffbe 	bl	800733e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a18      	ldr	r0, [r3, #32]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3324      	adds	r3, #36	; 0x24
 80083ca:	220b      	movs	r2, #11
 80083cc:	4619      	mov	r1, r3
 80083ce:	f7fe ff95 	bl	80072fc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2201      	movs	r2, #1
 80083d6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b088      	sub	sp, #32
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3324      	adds	r3, #36	; 0x24
 80083f8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80083fa:	220b      	movs	r2, #11
 80083fc:	2120      	movs	r1, #32
 80083fe:	68b8      	ldr	r0, [r7, #8]
 8008400:	f7fe ff9d 	bl	800733e <mem_set>
	si = i = 0; ni = 8;
 8008404:	2300      	movs	r3, #0
 8008406:	613b      	str	r3, [r7, #16]
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	617b      	str	r3, [r7, #20]
 800840c:	2308      	movs	r3, #8
 800840e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	617a      	str	r2, [r7, #20]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4413      	add	r3, r2
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800841e:	7ffb      	ldrb	r3, [r7, #31]
 8008420:	2b20      	cmp	r3, #32
 8008422:	d94e      	bls.n	80084c2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008424:	7ffb      	ldrb	r3, [r7, #31]
 8008426:	2b2f      	cmp	r3, #47	; 0x2f
 8008428:	d006      	beq.n	8008438 <create_name+0x54>
 800842a:	7ffb      	ldrb	r3, [r7, #31]
 800842c:	2b5c      	cmp	r3, #92	; 0x5c
 800842e:	d110      	bne.n	8008452 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008430:	e002      	b.n	8008438 <create_name+0x54>
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	3301      	adds	r3, #1
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	4413      	add	r3, r2
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2b2f      	cmp	r3, #47	; 0x2f
 8008442:	d0f6      	beq.n	8008432 <create_name+0x4e>
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	4413      	add	r3, r2
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b5c      	cmp	r3, #92	; 0x5c
 800844e:	d0f0      	beq.n	8008432 <create_name+0x4e>
			break;
 8008450:	e038      	b.n	80084c4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008452:	7ffb      	ldrb	r3, [r7, #31]
 8008454:	2b2e      	cmp	r3, #46	; 0x2e
 8008456:	d003      	beq.n	8008460 <create_name+0x7c>
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	429a      	cmp	r2, r3
 800845e:	d30c      	bcc.n	800847a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	2b0b      	cmp	r3, #11
 8008464:	d002      	beq.n	800846c <create_name+0x88>
 8008466:	7ffb      	ldrb	r3, [r7, #31]
 8008468:	2b2e      	cmp	r3, #46	; 0x2e
 800846a:	d001      	beq.n	8008470 <create_name+0x8c>
 800846c:	2306      	movs	r3, #6
 800846e:	e044      	b.n	80084fa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008470:	2308      	movs	r3, #8
 8008472:	613b      	str	r3, [r7, #16]
 8008474:	230b      	movs	r3, #11
 8008476:	61bb      	str	r3, [r7, #24]
			continue;
 8008478:	e022      	b.n	80084c0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800847a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800847e:	2b00      	cmp	r3, #0
 8008480:	da04      	bge.n	800848c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008482:	7ffb      	ldrb	r3, [r7, #31]
 8008484:	3b80      	subs	r3, #128	; 0x80
 8008486:	4a1f      	ldr	r2, [pc, #124]	; (8008504 <create_name+0x120>)
 8008488:	5cd3      	ldrb	r3, [r2, r3]
 800848a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800848c:	7ffb      	ldrb	r3, [r7, #31]
 800848e:	4619      	mov	r1, r3
 8008490:	481d      	ldr	r0, [pc, #116]	; (8008508 <create_name+0x124>)
 8008492:	f7fe ff95 	bl	80073c0 <chk_chr>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <create_name+0xbc>
 800849c:	2306      	movs	r3, #6
 800849e:	e02c      	b.n	80084fa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80084a0:	7ffb      	ldrb	r3, [r7, #31]
 80084a2:	2b60      	cmp	r3, #96	; 0x60
 80084a4:	d905      	bls.n	80084b2 <create_name+0xce>
 80084a6:	7ffb      	ldrb	r3, [r7, #31]
 80084a8:	2b7a      	cmp	r3, #122	; 0x7a
 80084aa:	d802      	bhi.n	80084b2 <create_name+0xce>
 80084ac:	7ffb      	ldrb	r3, [r7, #31]
 80084ae:	3b20      	subs	r3, #32
 80084b0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	1c5a      	adds	r2, r3, #1
 80084b6:	613a      	str	r2, [r7, #16]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	4413      	add	r3, r2
 80084bc:	7ffa      	ldrb	r2, [r7, #31]
 80084be:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80084c0:	e7a6      	b.n	8008410 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80084c2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	441a      	add	r2, r3
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <create_name+0xf4>
 80084d4:	2306      	movs	r3, #6
 80084d6:	e010      	b.n	80084fa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2be5      	cmp	r3, #229	; 0xe5
 80084de:	d102      	bne.n	80084e6 <create_name+0x102>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2205      	movs	r2, #5
 80084e4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80084e6:	7ffb      	ldrb	r3, [r7, #31]
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	d801      	bhi.n	80084f0 <create_name+0x10c>
 80084ec:	2204      	movs	r2, #4
 80084ee:	e000      	b.n	80084f2 <create_name+0x10e>
 80084f0:	2200      	movs	r2, #0
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	330b      	adds	r3, #11
 80084f6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80084f8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3720      	adds	r7, #32
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	0800a134 	.word	0x0800a134
 8008508:	0800a0cc 	.word	0x0800a0cc

0800850c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008520:	e002      	b.n	8008528 <follow_path+0x1c>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	3301      	adds	r3, #1
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	2b2f      	cmp	r3, #47	; 0x2f
 800852e:	d0f8      	beq.n	8008522 <follow_path+0x16>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b5c      	cmp	r3, #92	; 0x5c
 8008536:	d0f4      	beq.n	8008522 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	2200      	movs	r2, #0
 800853c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b1f      	cmp	r3, #31
 8008544:	d80a      	bhi.n	800855c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2280      	movs	r2, #128	; 0x80
 800854a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800854e:	2100      	movs	r1, #0
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff fcda 	bl	8007f0a <dir_sdi>
 8008556:	4603      	mov	r3, r0
 8008558:	75fb      	strb	r3, [r7, #23]
 800855a:	e048      	b.n	80085ee <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800855c:	463b      	mov	r3, r7
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff ff3f 	bl	80083e4 <create_name>
 8008566:	4603      	mov	r3, r0
 8008568:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800856a:	7dfb      	ldrb	r3, [r7, #23]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d139      	bne.n	80085e4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff feaf 	bl	80082d4 <dir_find>
 8008576:	4603      	mov	r3, r0
 8008578:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008580:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008582:	7dfb      	ldrb	r3, [r7, #23]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00a      	beq.n	800859e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	2b04      	cmp	r3, #4
 800858c:	d12c      	bne.n	80085e8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d127      	bne.n	80085e8 <follow_path+0xdc>
 8008598:	2305      	movs	r3, #5
 800859a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800859c:	e024      	b.n	80085e8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800859e:	7afb      	ldrb	r3, [r7, #11]
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d121      	bne.n	80085ec <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	799b      	ldrb	r3, [r3, #6]
 80085ac:	f003 0310 	and.w	r3, r3, #16
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d102      	bne.n	80085ba <follow_path+0xae>
				res = FR_NO_PATH; break;
 80085b4:	2305      	movs	r3, #5
 80085b6:	75fb      	strb	r3, [r7, #23]
 80085b8:	e019      	b.n	80085ee <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	8992      	ldrh	r2, [r2, #12]
 80085c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80085cc:	fb02 f200 	mul.w	r2, r2, r0
 80085d0:	1a9b      	subs	r3, r3, r2
 80085d2:	440b      	add	r3, r1
 80085d4:	4619      	mov	r1, r3
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f7ff fe3d 	bl	8008256 <ld_clust>
 80085dc:	4602      	mov	r2, r0
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80085e2:	e7bb      	b.n	800855c <follow_path+0x50>
			if (res != FR_OK) break;
 80085e4:	bf00      	nop
 80085e6:	e002      	b.n	80085ee <follow_path+0xe2>
				break;
 80085e8:	bf00      	nop
 80085ea:	e000      	b.n	80085ee <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80085ec:	bf00      	nop
			}
		}
	}

	return res;
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008600:	f04f 33ff 	mov.w	r3, #4294967295
 8008604:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d031      	beq.n	8008672 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	617b      	str	r3, [r7, #20]
 8008614:	e002      	b.n	800861c <get_ldnumber+0x24>
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	3301      	adds	r3, #1
 800861a:	617b      	str	r3, [r7, #20]
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	2b20      	cmp	r3, #32
 8008622:	d903      	bls.n	800862c <get_ldnumber+0x34>
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	2b3a      	cmp	r3, #58	; 0x3a
 800862a:	d1f4      	bne.n	8008616 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b3a      	cmp	r3, #58	; 0x3a
 8008632:	d11c      	bne.n	800866e <get_ldnumber+0x76>
			tp = *path;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	60fa      	str	r2, [r7, #12]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	3b30      	subs	r3, #48	; 0x30
 8008644:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b09      	cmp	r3, #9
 800864a:	d80e      	bhi.n	800866a <get_ldnumber+0x72>
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	429a      	cmp	r2, r3
 8008652:	d10a      	bne.n	800866a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d107      	bne.n	800866a <get_ldnumber+0x72>
					vol = (int)i;
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	3301      	adds	r3, #1
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	e002      	b.n	8008674 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800866e:	2300      	movs	r3, #0
 8008670:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008672:	693b      	ldr	r3, [r7, #16]
}
 8008674:	4618      	mov	r0, r3
 8008676:	371c      	adds	r7, #28
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	70da      	strb	r2, [r3, #3]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f04f 32ff 	mov.w	r2, #4294967295
 8008696:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff f85c 	bl	8007758 <move_window>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <check_fs+0x2a>
 80086a6:	2304      	movs	r3, #4
 80086a8:	e038      	b.n	800871c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3334      	adds	r3, #52	; 0x34
 80086ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fe fda0 	bl	80071f8 <ld_word>
 80086b8:	4603      	mov	r3, r0
 80086ba:	461a      	mov	r2, r3
 80086bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d001      	beq.n	80086c8 <check_fs+0x48>
 80086c4:	2303      	movs	r3, #3
 80086c6:	e029      	b.n	800871c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086ce:	2be9      	cmp	r3, #233	; 0xe9
 80086d0:	d009      	beq.n	80086e6 <check_fs+0x66>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086d8:	2beb      	cmp	r3, #235	; 0xeb
 80086da:	d11e      	bne.n	800871a <check_fs+0x9a>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80086e2:	2b90      	cmp	r3, #144	; 0x90
 80086e4:	d119      	bne.n	800871a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3334      	adds	r3, #52	; 0x34
 80086ea:	3336      	adds	r3, #54	; 0x36
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fe fd9b 	bl	8007228 <ld_dword>
 80086f2:	4603      	mov	r3, r0
 80086f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086f8:	4a0a      	ldr	r2, [pc, #40]	; (8008724 <check_fs+0xa4>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d101      	bne.n	8008702 <check_fs+0x82>
 80086fe:	2300      	movs	r3, #0
 8008700:	e00c      	b.n	800871c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3334      	adds	r3, #52	; 0x34
 8008706:	3352      	adds	r3, #82	; 0x52
 8008708:	4618      	mov	r0, r3
 800870a:	f7fe fd8d 	bl	8007228 <ld_dword>
 800870e:	4602      	mov	r2, r0
 8008710:	4b05      	ldr	r3, [pc, #20]	; (8008728 <check_fs+0xa8>)
 8008712:	429a      	cmp	r2, r3
 8008714:	d101      	bne.n	800871a <check_fs+0x9a>
 8008716:	2300      	movs	r3, #0
 8008718:	e000      	b.n	800871c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800871a:	2302      	movs	r3, #2
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	00544146 	.word	0x00544146
 8008728:	33544146 	.word	0x33544146

0800872c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b096      	sub	sp, #88	; 0x58
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	4613      	mov	r3, r2
 8008738:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7ff ff59 	bl	80085f8 <get_ldnumber>
 8008746:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874a:	2b00      	cmp	r3, #0
 800874c:	da01      	bge.n	8008752 <find_volume+0x26>
 800874e:	230b      	movs	r3, #11
 8008750:	e265      	b.n	8008c1e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008752:	4ab0      	ldr	r2, [pc, #704]	; (8008a14 <find_volume+0x2e8>)
 8008754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800875a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800875c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875e:	2b00      	cmp	r3, #0
 8008760:	d101      	bne.n	8008766 <find_volume+0x3a>
 8008762:	230c      	movs	r3, #12
 8008764:	e25b      	b.n	8008c1e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800876a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800876c:	79fb      	ldrb	r3, [r7, #7]
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01a      	beq.n	80087b2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877e:	785b      	ldrb	r3, [r3, #1]
 8008780:	4618      	mov	r0, r3
 8008782:	f7fe fc9b 	bl	80070bc <disk_status>
 8008786:	4603      	mov	r3, r0
 8008788:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800878c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10c      	bne.n	80087b2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d007      	beq.n	80087ae <find_volume+0x82>
 800879e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80087aa:	230a      	movs	r3, #10
 80087ac:	e237      	b.n	8008c1e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80087ae:	2300      	movs	r3, #0
 80087b0:	e235      	b.n	8008c1e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80087b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80087b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087be:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80087c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fc93 	bl	80070f0 <disk_initialize>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80087d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80087dc:	2303      	movs	r3, #3
 80087de:	e21e      	b.n	8008c1e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80087e0:	79fb      	ldrb	r3, [r7, #7]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d007      	beq.n	80087f6 <find_volume+0xca>
 80087e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087ea:	f003 0304 	and.w	r3, r3, #4
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80087f2:	230a      	movs	r3, #10
 80087f4:	e213      	b.n	8008c1e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80087f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f8:	7858      	ldrb	r0, [r3, #1]
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	330c      	adds	r3, #12
 80087fe:	461a      	mov	r2, r3
 8008800:	2102      	movs	r1, #2
 8008802:	f7fe fcdb 	bl	80071bc <disk_ioctl>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <find_volume+0xe4>
 800880c:	2301      	movs	r3, #1
 800880e:	e206      	b.n	8008c1e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008812:	899b      	ldrh	r3, [r3, #12]
 8008814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008818:	d80d      	bhi.n	8008836 <find_volume+0x10a>
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	899b      	ldrh	r3, [r3, #12]
 800881e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008822:	d308      	bcc.n	8008836 <find_volume+0x10a>
 8008824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008826:	899b      	ldrh	r3, [r3, #12]
 8008828:	461a      	mov	r2, r3
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	899b      	ldrh	r3, [r3, #12]
 800882e:	3b01      	subs	r3, #1
 8008830:	4013      	ands	r3, r2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <find_volume+0x10e>
 8008836:	2301      	movs	r3, #1
 8008838:	e1f1      	b.n	8008c1e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800883e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008840:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008842:	f7ff ff1d 	bl	8008680 <check_fs>
 8008846:	4603      	mov	r3, r0
 8008848:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800884c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008850:	2b02      	cmp	r3, #2
 8008852:	d14b      	bne.n	80088ec <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008854:	2300      	movs	r3, #0
 8008856:	643b      	str	r3, [r7, #64]	; 0x40
 8008858:	e01f      	b.n	800889a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800885a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008862:	011b      	lsls	r3, r3, #4
 8008864:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008868:	4413      	add	r3, r2
 800886a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	3304      	adds	r3, #4
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d006      	beq.n	8008884 <find_volume+0x158>
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	3308      	adds	r3, #8
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe fcd4 	bl	8007228 <ld_dword>
 8008880:	4602      	mov	r2, r0
 8008882:	e000      	b.n	8008886 <find_volume+0x15a>
 8008884:	2200      	movs	r2, #0
 8008886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800888e:	440b      	add	r3, r1
 8008890:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008896:	3301      	adds	r3, #1
 8008898:	643b      	str	r3, [r7, #64]	; 0x40
 800889a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889c:	2b03      	cmp	r3, #3
 800889e:	d9dc      	bls.n	800885a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80088a0:	2300      	movs	r3, #0
 80088a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80088a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <find_volume+0x184>
 80088aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ac:	3b01      	subs	r3, #1
 80088ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80088b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80088b8:	4413      	add	r3, r2
 80088ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80088be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80088c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d005      	beq.n	80088d2 <find_volume+0x1a6>
 80088c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088ca:	f7ff fed9 	bl	8008680 <check_fs>
 80088ce:	4603      	mov	r3, r0
 80088d0:	e000      	b.n	80088d4 <find_volume+0x1a8>
 80088d2:	2303      	movs	r3, #3
 80088d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80088d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d905      	bls.n	80088ec <find_volume+0x1c0>
 80088e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e2:	3301      	adds	r3, #1
 80088e4:	643b      	str	r3, [r7, #64]	; 0x40
 80088e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e8:	2b03      	cmp	r3, #3
 80088ea:	d9e1      	bls.n	80088b0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80088ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088f0:	2b04      	cmp	r3, #4
 80088f2:	d101      	bne.n	80088f8 <find_volume+0x1cc>
 80088f4:	2301      	movs	r3, #1
 80088f6:	e192      	b.n	8008c1e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80088f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d901      	bls.n	8008904 <find_volume+0x1d8>
 8008900:	230d      	movs	r3, #13
 8008902:	e18c      	b.n	8008c1e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008906:	3334      	adds	r3, #52	; 0x34
 8008908:	330b      	adds	r3, #11
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe fc74 	bl	80071f8 <ld_word>
 8008910:	4603      	mov	r3, r0
 8008912:	461a      	mov	r2, r3
 8008914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008916:	899b      	ldrh	r3, [r3, #12]
 8008918:	429a      	cmp	r2, r3
 800891a:	d001      	beq.n	8008920 <find_volume+0x1f4>
 800891c:	230d      	movs	r3, #13
 800891e:	e17e      	b.n	8008c1e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008922:	3334      	adds	r3, #52	; 0x34
 8008924:	3316      	adds	r3, #22
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe fc66 	bl	80071f8 <ld_word>
 800892c:	4603      	mov	r3, r0
 800892e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008932:	2b00      	cmp	r3, #0
 8008934:	d106      	bne.n	8008944 <find_volume+0x218>
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	3334      	adds	r3, #52	; 0x34
 800893a:	3324      	adds	r3, #36	; 0x24
 800893c:	4618      	mov	r0, r3
 800893e:	f7fe fc73 	bl	8007228 <ld_dword>
 8008942:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008948:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008952:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	789b      	ldrb	r3, [r3, #2]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d005      	beq.n	8008968 <find_volume+0x23c>
 800895c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895e:	789b      	ldrb	r3, [r3, #2]
 8008960:	2b02      	cmp	r3, #2
 8008962:	d001      	beq.n	8008968 <find_volume+0x23c>
 8008964:	230d      	movs	r3, #13
 8008966:	e15a      	b.n	8008c1e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896a:	789b      	ldrb	r3, [r3, #2]
 800896c:	461a      	mov	r2, r3
 800896e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008970:	fb02 f303 	mul.w	r3, r2, r3
 8008974:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800897c:	b29a      	uxth	r2, r3
 800897e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008980:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008984:	895b      	ldrh	r3, [r3, #10]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d008      	beq.n	800899c <find_volume+0x270>
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	895b      	ldrh	r3, [r3, #10]
 800898e:	461a      	mov	r2, r3
 8008990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008992:	895b      	ldrh	r3, [r3, #10]
 8008994:	3b01      	subs	r3, #1
 8008996:	4013      	ands	r3, r2
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <find_volume+0x274>
 800899c:	230d      	movs	r3, #13
 800899e:	e13e      	b.n	8008c1e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80089a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a2:	3334      	adds	r3, #52	; 0x34
 80089a4:	3311      	adds	r3, #17
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fe fc26 	bl	80071f8 <ld_word>
 80089ac:	4603      	mov	r3, r0
 80089ae:	461a      	mov	r2, r3
 80089b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80089b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b6:	891b      	ldrh	r3, [r3, #8]
 80089b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ba:	8992      	ldrh	r2, [r2, #12]
 80089bc:	0952      	lsrs	r2, r2, #5
 80089be:	b292      	uxth	r2, r2
 80089c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80089c4:	fb02 f201 	mul.w	r2, r2, r1
 80089c8:	1a9b      	subs	r3, r3, r2
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <find_volume+0x2a8>
 80089d0:	230d      	movs	r3, #13
 80089d2:	e124      	b.n	8008c1e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80089d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d6:	3334      	adds	r3, #52	; 0x34
 80089d8:	3313      	adds	r3, #19
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe fc0c 	bl	80071f8 <ld_word>
 80089e0:	4603      	mov	r3, r0
 80089e2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80089e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d106      	bne.n	80089f8 <find_volume+0x2cc>
 80089ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ec:	3334      	adds	r3, #52	; 0x34
 80089ee:	3320      	adds	r3, #32
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe fc19 	bl	8007228 <ld_dword>
 80089f6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80089f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fa:	3334      	adds	r3, #52	; 0x34
 80089fc:	330e      	adds	r3, #14
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe fbfa 	bl	80071f8 <ld_word>
 8008a04:	4603      	mov	r3, r0
 8008a06:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008a08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d104      	bne.n	8008a18 <find_volume+0x2ec>
 8008a0e:	230d      	movs	r3, #13
 8008a10:	e105      	b.n	8008c1e <find_volume+0x4f2>
 8008a12:	bf00      	nop
 8008a14:	200010c8 	.word	0x200010c8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008a18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a1c:	4413      	add	r3, r2
 8008a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a20:	8911      	ldrh	r1, [r2, #8]
 8008a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a24:	8992      	ldrh	r2, [r2, #12]
 8008a26:	0952      	lsrs	r2, r2, #5
 8008a28:	b292      	uxth	r2, r2
 8008a2a:	fbb1 f2f2 	udiv	r2, r1, r2
 8008a2e:	b292      	uxth	r2, r2
 8008a30:	4413      	add	r3, r2
 8008a32:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d201      	bcs.n	8008a40 <find_volume+0x314>
 8008a3c:	230d      	movs	r3, #13
 8008a3e:	e0ee      	b.n	8008c1e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a48:	8952      	ldrh	r2, [r2, #10]
 8008a4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <find_volume+0x32e>
 8008a56:	230d      	movs	r3, #13
 8008a58:	e0e1      	b.n	8008c1e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d802      	bhi.n	8008a70 <find_volume+0x344>
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d802      	bhi.n	8008a80 <find_volume+0x354>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	1c9a      	adds	r2, r3, #2
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a8c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008a8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a92:	441a      	add	r2, r3
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008a98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9c:	441a      	add	r2, r3
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008aa2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d11e      	bne.n	8008ae8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aac:	3334      	adds	r3, #52	; 0x34
 8008aae:	332a      	adds	r3, #42	; 0x2a
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fe fba1 	bl	80071f8 <ld_word>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <find_volume+0x394>
 8008abc:	230d      	movs	r3, #13
 8008abe:	e0ae      	b.n	8008c1e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac2:	891b      	ldrh	r3, [r3, #8]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <find_volume+0x3a0>
 8008ac8:	230d      	movs	r3, #13
 8008aca:	e0a8      	b.n	8008c1e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	3334      	adds	r3, #52	; 0x34
 8008ad0:	332c      	adds	r3, #44	; 0x2c
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe fba8 	bl	8007228 <ld_dword>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ae6:	e01f      	b.n	8008b28 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aea:	891b      	ldrh	r3, [r3, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <find_volume+0x3c8>
 8008af0:	230d      	movs	r3, #13
 8008af2:	e094      	b.n	8008c1e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008afa:	441a      	add	r2, r3
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008b00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d103      	bne.n	8008b10 <find_volume+0x3e4>
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	005b      	lsls	r3, r3, #1
 8008b0e:	e00a      	b.n	8008b26 <find_volume+0x3fa>
 8008b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b12:	699a      	ldr	r2, [r3, #24]
 8008b14:	4613      	mov	r3, r2
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	4413      	add	r3, r2
 8008b1a:	085a      	lsrs	r2, r3, #1
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008b26:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2a:	69da      	ldr	r2, [r3, #28]
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	899b      	ldrh	r3, [r3, #12]
 8008b30:	4619      	mov	r1, r3
 8008b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b34:	440b      	add	r3, r1
 8008b36:	3b01      	subs	r3, #1
 8008b38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b3a:	8989      	ldrh	r1, [r1, #12]
 8008b3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d201      	bcs.n	8008b48 <find_volume+0x41c>
 8008b44:	230d      	movs	r3, #13
 8008b46:	e06a      	b.n	8008c1e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4e:	615a      	str	r2, [r3, #20]
 8008b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b52:	695a      	ldr	r2, [r3, #20]
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	2280      	movs	r2, #128	; 0x80
 8008b5c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008b5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d149      	bne.n	8008bfa <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b68:	3334      	adds	r3, #52	; 0x34
 8008b6a:	3330      	adds	r3, #48	; 0x30
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fe fb43 	bl	80071f8 <ld_word>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d140      	bne.n	8008bfa <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b80:	f7fe fdea 	bl	8007758 <move_window>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d137      	bne.n	8008bfa <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b92:	3334      	adds	r3, #52	; 0x34
 8008b94:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fe fb2d 	bl	80071f8 <ld_word>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d127      	bne.n	8008bfa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	3334      	adds	r3, #52	; 0x34
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fe fb3a 	bl	8007228 <ld_dword>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	4b1c      	ldr	r3, [pc, #112]	; (8008c28 <find_volume+0x4fc>)
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d11e      	bne.n	8008bfa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	3334      	adds	r3, #52	; 0x34
 8008bc0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fe fb2f 	bl	8007228 <ld_dword>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	4b17      	ldr	r3, [pc, #92]	; (8008c2c <find_volume+0x500>)
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d113      	bne.n	8008bfa <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd4:	3334      	adds	r3, #52	; 0x34
 8008bd6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fe fb24 	bl	8007228 <ld_dword>
 8008be0:	4602      	mov	r2, r0
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be8:	3334      	adds	r3, #52	; 0x34
 8008bea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe fb1a 	bl	8007228 <ld_dword>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008c00:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008c02:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <find_volume+0x504>)
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	3301      	adds	r3, #1
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <find_volume+0x504>)
 8008c0c:	801a      	strh	r2, [r3, #0]
 8008c0e:	4b08      	ldr	r3, [pc, #32]	; (8008c30 <find_volume+0x504>)
 8008c10:	881a      	ldrh	r2, [r3, #0]
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008c16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c18:	f7fe fd36 	bl	8007688 <clear_lock>
#endif
	return FR_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3758      	adds	r7, #88	; 0x58
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	41615252 	.word	0x41615252
 8008c2c:	61417272 	.word	0x61417272
 8008c30:	200010cc 	.word	0x200010cc

08008c34 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008c3e:	2309      	movs	r3, #9
 8008c40:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01c      	beq.n	8008c82 <validate+0x4e>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d018      	beq.n	8008c82 <validate+0x4e>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d013      	beq.n	8008c82 <validate+0x4e>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	889a      	ldrh	r2, [r3, #4]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	88db      	ldrh	r3, [r3, #6]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d10c      	bne.n	8008c82 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	785b      	ldrb	r3, [r3, #1]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fa24 	bl	80070bc <disk_status>
 8008c74:	4603      	mov	r3, r0
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <validate+0x4e>
			res = FR_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d102      	bne.n	8008c8e <validate+0x5a>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	e000      	b.n	8008c90 <validate+0x5c>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	683a      	ldr	r2, [r7, #0]
 8008c92:	6013      	str	r3, [r2, #0]
	return res;
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	4613      	mov	r3, r2
 8008cac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008cb2:	f107 0310 	add.w	r3, r7, #16
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff fc9e 	bl	80085f8 <get_ldnumber>
 8008cbc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	da01      	bge.n	8008cc8 <f_mount+0x28>
 8008cc4:	230b      	movs	r3, #11
 8008cc6:	e02b      	b.n	8008d20 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008cc8:	4a17      	ldr	r2, [pc, #92]	; (8008d28 <f_mount+0x88>)
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cd0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008cd8:	69b8      	ldr	r0, [r7, #24]
 8008cda:	f7fe fcd5 	bl	8007688 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d002      	beq.n	8008cf0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	490d      	ldr	r1, [pc, #52]	; (8008d28 <f_mount+0x88>)
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <f_mount+0x66>
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d001      	beq.n	8008d0a <f_mount+0x6a>
 8008d06:	2300      	movs	r3, #0
 8008d08:	e00a      	b.n	8008d20 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008d0a:	f107 010c 	add.w	r1, r7, #12
 8008d0e:	f107 0308 	add.w	r3, r7, #8
 8008d12:	2200      	movs	r2, #0
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff fd09 	bl	800872c <find_volume>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3720      	adds	r7, #32
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	200010c8 	.word	0x200010c8

08008d2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b098      	sub	sp, #96	; 0x60
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	4613      	mov	r3, r2
 8008d38:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d101      	bne.n	8008d44 <f_open+0x18>
 8008d40:	2309      	movs	r3, #9
 8008d42:	e1bb      	b.n	80090bc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008d44:	79fb      	ldrb	r3, [r7, #7]
 8008d46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d4a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008d4c:	79fa      	ldrb	r2, [r7, #7]
 8008d4e:	f107 0110 	add.w	r1, r7, #16
 8008d52:	f107 0308 	add.w	r3, r7, #8
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7ff fce8 	bl	800872c <find_volume>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f040 819f 	bne.w	80090aa <f_open+0x37e>
		dj.obj.fs = fs;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	f107 0314 	add.w	r3, r7, #20
 8008d76:	4611      	mov	r1, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7ff fbc7 	bl	800850c <follow_path>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d11a      	bne.n	8008dc2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008d8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d90:	b25b      	sxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	da03      	bge.n	8008d9e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008d96:	2306      	movs	r3, #6
 8008d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008d9c:	e011      	b.n	8008dc2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	f023 0301 	bic.w	r3, r3, #1
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	bf14      	ite	ne
 8008da8:	2301      	movne	r3, #1
 8008daa:	2300      	moveq	r3, #0
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	461a      	mov	r2, r3
 8008db0:	f107 0314 	add.w	r3, r7, #20
 8008db4:	4611      	mov	r1, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe fb1e 	bl	80073f8 <chk_lock>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	f003 031c 	and.w	r3, r3, #28
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d07f      	beq.n	8008ecc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008dcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d017      	beq.n	8008e04 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008dd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	d10e      	bne.n	8008dfa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008ddc:	f7fe fb68 	bl	80074b0 <enq_lock>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d006      	beq.n	8008df4 <f_open+0xc8>
 8008de6:	f107 0314 	add.w	r3, r7, #20
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff fac7 	bl	800837e <dir_register>
 8008df0:	4603      	mov	r3, r0
 8008df2:	e000      	b.n	8008df6 <f_open+0xca>
 8008df4:	2312      	movs	r3, #18
 8008df6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	f043 0308 	orr.w	r3, r3, #8
 8008e00:	71fb      	strb	r3, [r7, #7]
 8008e02:	e010      	b.n	8008e26 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008e04:	7ebb      	ldrb	r3, [r7, #26]
 8008e06:	f003 0311 	and.w	r3, r3, #17
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <f_open+0xea>
					res = FR_DENIED;
 8008e0e:	2307      	movs	r3, #7
 8008e10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008e14:	e007      	b.n	8008e26 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008e16:	79fb      	ldrb	r3, [r7, #7]
 8008e18:	f003 0304 	and.w	r3, r3, #4
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <f_open+0xfa>
 8008e20:	2308      	movs	r3, #8
 8008e22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008e26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d168      	bne.n	8008f00 <f_open+0x1d4>
 8008e2e:	79fb      	ldrb	r3, [r7, #7]
 8008e30:	f003 0308 	and.w	r3, r3, #8
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d063      	beq.n	8008f00 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008e38:	f7fc f9d4 	bl	80051e4 <get_fattime>
 8008e3c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	330e      	adds	r3, #14
 8008e42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe fa2d 	bl	80072a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e4c:	3316      	adds	r3, #22
 8008e4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fe fa27 	bl	80072a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e58:	330b      	adds	r3, #11
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e62:	4611      	mov	r1, r2
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7ff f9f6 	bl	8008256 <ld_clust>
 8008e6a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e70:	2200      	movs	r2, #0
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7ff fa0e 	bl	8008294 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7a:	331c      	adds	r3, #28
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe fa10 	bl	80072a4 <st_dword>
					fs->wflag = 1;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	2201      	movs	r2, #1
 8008e88:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d037      	beq.n	8008f00 <f_open+0x1d4>
						dw = fs->winsect;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e94:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008e96:	f107 0314 	add.w	r3, r7, #20
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe fefe 	bl	8007ca0 <remove_chain>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008eaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d126      	bne.n	8008f00 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe fc4e 	bl	8007758 <move_window>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ec6:	3a01      	subs	r2, #1
 8008ec8:	611a      	str	r2, [r3, #16]
 8008eca:	e019      	b.n	8008f00 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d115      	bne.n	8008f00 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008ed4:	7ebb      	ldrb	r3, [r7, #26]
 8008ed6:	f003 0310 	and.w	r3, r3, #16
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008ede:	2304      	movs	r3, #4
 8008ee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ee4:	e00c      	b.n	8008f00 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008ee6:	79fb      	ldrb	r3, [r7, #7]
 8008ee8:	f003 0302 	and.w	r3, r3, #2
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d007      	beq.n	8008f00 <f_open+0x1d4>
 8008ef0:	7ebb      	ldrb	r3, [r7, #26]
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <f_open+0x1d4>
						res = FR_DENIED;
 8008efa:	2307      	movs	r3, #7
 8008efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008f00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d128      	bne.n	8008f5a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	f003 0308 	and.w	r3, r3, #8
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f18:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	f023 0301 	bic.w	r3, r3, #1
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	bf14      	ite	ne
 8008f32:	2301      	movne	r3, #1
 8008f34:	2300      	moveq	r3, #0
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	461a      	mov	r2, r3
 8008f3a:	f107 0314 	add.w	r3, r7, #20
 8008f3e:	4611      	mov	r1, r2
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fe fad7 	bl	80074f4 <inc_lock>
 8008f46:	4602      	mov	r2, r0
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d102      	bne.n	8008f5a <f_open+0x22e>
 8008f54:	2302      	movs	r3, #2
 8008f56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f040 80a3 	bne.w	80090aa <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f68:	4611      	mov	r1, r2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff f973 	bl	8008256 <ld_clust>
 8008f70:	4602      	mov	r2, r0
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f78:	331c      	adds	r3, #28
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe f954 	bl	8007228 <ld_dword>
 8008f80:	4602      	mov	r2, r0
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	88da      	ldrh	r2, [r3, #6]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	79fa      	ldrb	r2, [r7, #7]
 8008f9e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	3330      	adds	r3, #48	; 0x30
 8008fb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008fba:	2100      	movs	r1, #0
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fe f9be 	bl	800733e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	f003 0320 	and.w	r3, r3, #32
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d06e      	beq.n	80090aa <f_open+0x37e>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d06a      	beq.n	80090aa <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	68da      	ldr	r2, [r3, #12]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	895b      	ldrh	r3, [r3, #10]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	899b      	ldrh	r3, [r3, #12]
 8008fe6:	fb03 f302 	mul.w	r3, r3, r2
 8008fea:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ff8:	e016      	b.n	8009028 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe fc67 	bl	80078d2 <get_fat>
 8009004:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009008:	2b01      	cmp	r3, #1
 800900a:	d802      	bhi.n	8009012 <f_open+0x2e6>
 800900c:	2302      	movs	r3, #2
 800900e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009018:	d102      	bne.n	8009020 <f_open+0x2f4>
 800901a:	2301      	movs	r3, #1
 800901c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009020:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	657b      	str	r3, [r7, #84]	; 0x54
 8009028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800902c:	2b00      	cmp	r3, #0
 800902e:	d103      	bne.n	8009038 <f_open+0x30c>
 8009030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009034:	429a      	cmp	r2, r3
 8009036:	d8e0      	bhi.n	8008ffa <f_open+0x2ce>
				}
				fp->clust = clst;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800903c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800903e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009042:	2b00      	cmp	r3, #0
 8009044:	d131      	bne.n	80090aa <f_open+0x37e>
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	899b      	ldrh	r3, [r3, #12]
 800904a:	461a      	mov	r2, r3
 800904c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800904e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009052:	fb02 f201 	mul.w	r2, r2, r1
 8009056:	1a9b      	subs	r3, r3, r2
 8009058:	2b00      	cmp	r3, #0
 800905a:	d026      	beq.n	80090aa <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009060:	4618      	mov	r0, r3
 8009062:	f7fe fc17 	bl	8007894 <clust2sect>
 8009066:	6478      	str	r0, [r7, #68]	; 0x44
 8009068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800906a:	2b00      	cmp	r3, #0
 800906c:	d103      	bne.n	8009076 <f_open+0x34a>
						res = FR_INT_ERR;
 800906e:	2302      	movs	r3, #2
 8009070:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009074:	e019      	b.n	80090aa <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	899b      	ldrh	r3, [r3, #12]
 800907a:	461a      	mov	r2, r3
 800907c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800907e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009084:	441a      	add	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	7858      	ldrb	r0, [r3, #1]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a1a      	ldr	r2, [r3, #32]
 8009098:	2301      	movs	r3, #1
 800909a:	f7fe f84f 	bl	800713c <disk_read>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <f_open+0x37e>
 80090a4:	2301      	movs	r3, #1
 80090a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80090aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <f_open+0x38c>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80090b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3760      	adds	r7, #96	; 0x60
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08c      	sub	sp, #48	; 0x30
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2200      	movs	r2, #0
 80090da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f107 0210 	add.w	r2, r7, #16
 80090e2:	4611      	mov	r1, r2
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7ff fda5 	bl	8008c34 <validate>
 80090ea:	4603      	mov	r3, r0
 80090ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80090f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d107      	bne.n	8009108 <f_write+0x44>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	7d5b      	ldrb	r3, [r3, #21]
 80090fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009100:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <f_write+0x4a>
 8009108:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800910c:	e16a      	b.n	80093e4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	7d1b      	ldrb	r3, [r3, #20]
 8009112:	f003 0302 	and.w	r3, r3, #2
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <f_write+0x5a>
 800911a:	2307      	movs	r3, #7
 800911c:	e162      	b.n	80093e4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	699a      	ldr	r2, [r3, #24]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	441a      	add	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	429a      	cmp	r2, r3
 800912c:	f080 814c 	bcs.w	80093c8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	43db      	mvns	r3, r3
 8009136:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009138:	e146      	b.n	80093c8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	8992      	ldrh	r2, [r2, #12]
 8009142:	fbb3 f1f2 	udiv	r1, r3, r2
 8009146:	fb02 f201 	mul.w	r2, r2, r1
 800914a:	1a9b      	subs	r3, r3, r2
 800914c:	2b00      	cmp	r3, #0
 800914e:	f040 80f1 	bne.w	8009334 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	8992      	ldrh	r2, [r2, #12]
 800915a:	fbb3 f3f2 	udiv	r3, r3, r2
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	8952      	ldrh	r2, [r2, #10]
 8009162:	3a01      	subs	r2, #1
 8009164:	4013      	ands	r3, r2
 8009166:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d143      	bne.n	80091f6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10c      	bne.n	8009190 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	2b00      	cmp	r3, #0
 8009180:	d11a      	bne.n	80091b8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2100      	movs	r1, #0
 8009186:	4618      	mov	r0, r3
 8009188:	f7fe fdef 	bl	8007d6a <create_chain>
 800918c:	62b8      	str	r0, [r7, #40]	; 0x28
 800918e:	e013      	b.n	80091b8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009194:	2b00      	cmp	r3, #0
 8009196:	d007      	beq.n	80091a8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	4619      	mov	r1, r3
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f7fe fe7b 	bl	8007e9a <clmt_clust>
 80091a4:	62b8      	str	r0, [r7, #40]	; 0x28
 80091a6:	e007      	b.n	80091b8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	4619      	mov	r1, r3
 80091b0:	4610      	mov	r0, r2
 80091b2:	f7fe fdda 	bl	8007d6a <create_chain>
 80091b6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 8109 	beq.w	80093d2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80091c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d104      	bne.n	80091d0 <f_write+0x10c>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2202      	movs	r2, #2
 80091ca:	755a      	strb	r2, [r3, #21]
 80091cc:	2302      	movs	r3, #2
 80091ce:	e109      	b.n	80093e4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d6:	d104      	bne.n	80091e2 <f_write+0x11e>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2201      	movs	r2, #1
 80091dc:	755a      	strb	r2, [r3, #21]
 80091de:	2301      	movs	r3, #1
 80091e0:	e100      	b.n	80093e4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091e6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d102      	bne.n	80091f6 <f_write+0x132>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091f4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	7d1b      	ldrb	r3, [r3, #20]
 80091fa:	b25b      	sxtb	r3, r3
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	da18      	bge.n	8009232 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	7858      	ldrb	r0, [r3, #1]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6a1a      	ldr	r2, [r3, #32]
 800920e:	2301      	movs	r3, #1
 8009210:	f7fd ffb4 	bl	800717c <disk_write>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d004      	beq.n	8009224 <f_write+0x160>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2201      	movs	r2, #1
 800921e:	755a      	strb	r2, [r3, #21]
 8009220:	2301      	movs	r3, #1
 8009222:	e0df      	b.n	80093e4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	7d1b      	ldrb	r3, [r3, #20]
 8009228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800922c:	b2da      	uxtb	r2, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	69db      	ldr	r3, [r3, #28]
 8009238:	4619      	mov	r1, r3
 800923a:	4610      	mov	r0, r2
 800923c:	f7fe fb2a 	bl	8007894 <clust2sect>
 8009240:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d104      	bne.n	8009252 <f_write+0x18e>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2202      	movs	r2, #2
 800924c:	755a      	strb	r2, [r3, #21]
 800924e:	2302      	movs	r3, #2
 8009250:	e0c8      	b.n	80093e4 <f_write+0x320>
			sect += csect;
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	4413      	add	r3, r2
 8009258:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	899b      	ldrh	r3, [r3, #12]
 800925e:	461a      	mov	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	fbb3 f3f2 	udiv	r3, r3, r2
 8009266:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d043      	beq.n	80092f6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800926e:	69ba      	ldr	r2, [r7, #24]
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	4413      	add	r3, r2
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	8952      	ldrh	r2, [r2, #10]
 8009278:	4293      	cmp	r3, r2
 800927a:	d905      	bls.n	8009288 <f_write+0x1c4>
					cc = fs->csize - csect;
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	895b      	ldrh	r3, [r3, #10]
 8009280:	461a      	mov	r2, r3
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	7858      	ldrb	r0, [r3, #1]
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	69f9      	ldr	r1, [r7, #28]
 8009292:	f7fd ff73 	bl	800717c <disk_write>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d004      	beq.n	80092a6 <f_write+0x1e2>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2201      	movs	r2, #1
 80092a0:	755a      	strb	r2, [r3, #21]
 80092a2:	2301      	movs	r3, #1
 80092a4:	e09e      	b.n	80093e4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6a1a      	ldr	r2, [r3, #32]
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	6a3a      	ldr	r2, [r7, #32]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d918      	bls.n	80092e6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6a1a      	ldr	r2, [r3, #32]
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	8992      	ldrh	r2, [r2, #12]
 80092c6:	fb02 f303 	mul.w	r3, r2, r3
 80092ca:	69fa      	ldr	r2, [r7, #28]
 80092cc:	18d1      	adds	r1, r2, r3
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	899b      	ldrh	r3, [r3, #12]
 80092d2:	461a      	mov	r2, r3
 80092d4:	f7fe f812 	bl	80072fc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	7d1b      	ldrb	r3, [r3, #20]
 80092dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	899b      	ldrh	r3, [r3, #12]
 80092ea:	461a      	mov	r2, r3
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	fb02 f303 	mul.w	r3, r2, r3
 80092f2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80092f4:	e04b      	b.n	800938e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d016      	beq.n	800932e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	699a      	ldr	r2, [r3, #24]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009308:	429a      	cmp	r2, r3
 800930a:	d210      	bcs.n	800932e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	7858      	ldrb	r0, [r3, #1]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009316:	2301      	movs	r3, #1
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	f7fd ff0f 	bl	800713c <disk_read>
 800931e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009320:	2b00      	cmp	r3, #0
 8009322:	d004      	beq.n	800932e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2201      	movs	r2, #1
 8009328:	755a      	strb	r2, [r3, #21]
 800932a:	2301      	movs	r3, #1
 800932c:	e05a      	b.n	80093e4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	899b      	ldrh	r3, [r3, #12]
 8009338:	4618      	mov	r0, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	8992      	ldrh	r2, [r2, #12]
 8009342:	fbb3 f1f2 	udiv	r1, r3, r2
 8009346:	fb02 f201 	mul.w	r2, r2, r1
 800934a:	1a9b      	subs	r3, r3, r2
 800934c:	1ac3      	subs	r3, r0, r3
 800934e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	429a      	cmp	r2, r3
 8009356:	d901      	bls.n	800935c <f_write+0x298>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	8992      	ldrh	r2, [r2, #12]
 800936a:	fbb3 f0f2 	udiv	r0, r3, r2
 800936e:	fb02 f200 	mul.w	r2, r2, r0
 8009372:	1a9b      	subs	r3, r3, r2
 8009374:	440b      	add	r3, r1
 8009376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009378:	69f9      	ldr	r1, [r7, #28]
 800937a:	4618      	mov	r0, r3
 800937c:	f7fd ffbe 	bl	80072fc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	7d1b      	ldrb	r3, [r3, #20]
 8009384:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009388:	b2da      	uxtb	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800938e:	69fa      	ldr	r2, [r7, #28]
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	4413      	add	r3, r2
 8009394:	61fb      	str	r3, [r7, #28]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939c:	441a      	add	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	619a      	str	r2, [r3, #24]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	68da      	ldr	r2, [r3, #12]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	bf38      	it	cc
 80093ae:	461a      	movcc	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	60da      	str	r2, [r3, #12]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ba:	441a      	add	r2, r3
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	601a      	str	r2, [r3, #0]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f47f aeb5 	bne.w	800913a <f_write+0x76>
 80093d0:	e000      	b.n	80093d4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80093d2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	7d1b      	ldrb	r3, [r3, #20]
 80093d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3730      	adds	r7, #48	; 0x30
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f107 0208 	add.w	r2, r7, #8
 80093fa:	4611      	mov	r1, r2
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7ff fc19 	bl	8008c34 <validate>
 8009402:	4603      	mov	r3, r0
 8009404:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d168      	bne.n	80094de <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	7d1b      	ldrb	r3, [r3, #20]
 8009410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009414:	2b00      	cmp	r3, #0
 8009416:	d062      	beq.n	80094de <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	7d1b      	ldrb	r3, [r3, #20]
 800941c:	b25b      	sxtb	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	da15      	bge.n	800944e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	7858      	ldrb	r0, [r3, #1]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a1a      	ldr	r2, [r3, #32]
 8009430:	2301      	movs	r3, #1
 8009432:	f7fd fea3 	bl	800717c <disk_write>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <f_sync+0x54>
 800943c:	2301      	movs	r3, #1
 800943e:	e04f      	b.n	80094e0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	7d1b      	ldrb	r3, [r3, #20]
 8009444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009448:	b2da      	uxtb	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800944e:	f7fb fec9 	bl	80051e4 <get_fattime>
 8009452:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945a:	4619      	mov	r1, r3
 800945c:	4610      	mov	r0, r2
 800945e:	f7fe f97b 	bl	8007758 <move_window>
 8009462:	4603      	mov	r3, r0
 8009464:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009466:	7dfb      	ldrb	r3, [r7, #23]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d138      	bne.n	80094de <f_sync+0xf2>
					dir = fp->dir_ptr;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009470:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	330b      	adds	r3, #11
 8009476:	781a      	ldrb	r2, [r3, #0]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	330b      	adds	r3, #11
 800947c:	f042 0220 	orr.w	r2, r2, #32
 8009480:	b2d2      	uxtb	r2, r2
 8009482:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6818      	ldr	r0, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	461a      	mov	r2, r3
 800948e:	68f9      	ldr	r1, [r7, #12]
 8009490:	f7fe ff00 	bl	8008294 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f103 021c 	add.w	r2, r3, #28
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	4619      	mov	r1, r3
 80094a0:	4610      	mov	r0, r2
 80094a2:	f7fd feff 	bl	80072a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3316      	adds	r3, #22
 80094aa:	6939      	ldr	r1, [r7, #16]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fd fef9 	bl	80072a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3312      	adds	r3, #18
 80094b6:	2100      	movs	r1, #0
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fd fed8 	bl	800726e <st_word>
					fs->wflag = 1;
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2201      	movs	r2, #1
 80094c2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe f974 	bl	80077b4 <sync_fs>
 80094cc:	4603      	mov	r3, r0
 80094ce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	7d1b      	ldrb	r3, [r3, #20]
 80094d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80094de:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3718      	adds	r7, #24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff ff7b 	bl	80093ec <f_sync>
 80094f6:	4603      	mov	r3, r0
 80094f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d118      	bne.n	8009532 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f107 0208 	add.w	r2, r7, #8
 8009506:	4611      	mov	r1, r2
 8009508:	4618      	mov	r0, r3
 800950a:	f7ff fb93 	bl	8008c34 <validate>
 800950e:	4603      	mov	r3, r0
 8009510:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10c      	bne.n	8009532 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	4618      	mov	r0, r3
 800951e:	f7fe f877 	bl	8007610 <dec_lock>
 8009522:	4603      	mov	r3, r0
 8009524:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d102      	bne.n	8009532 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009532:	7bfb      	ldrb	r3, [r7, #15]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800954a:	2301      	movs	r3, #1
 800954c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009552:	4b1f      	ldr	r3, [pc, #124]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 8009554:	7a5b      	ldrb	r3, [r3, #9]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	d131      	bne.n	80095c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800955c:	4b1c      	ldr	r3, [pc, #112]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 800955e:	7a5b      	ldrb	r3, [r3, #9]
 8009560:	b2db      	uxtb	r3, r3
 8009562:	461a      	mov	r2, r3
 8009564:	4b1a      	ldr	r3, [pc, #104]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 8009566:	2100      	movs	r1, #0
 8009568:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800956a:	4b19      	ldr	r3, [pc, #100]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 800956c:	7a5b      	ldrb	r3, [r3, #9]
 800956e:	b2db      	uxtb	r3, r3
 8009570:	4a17      	ldr	r2, [pc, #92]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800957a:	4b15      	ldr	r3, [pc, #84]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 800957c:	7a5b      	ldrb	r3, [r3, #9]
 800957e:	b2db      	uxtb	r3, r3
 8009580:	461a      	mov	r2, r3
 8009582:	4b13      	ldr	r3, [pc, #76]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 8009584:	4413      	add	r3, r2
 8009586:	79fa      	ldrb	r2, [r7, #7]
 8009588:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800958a:	4b11      	ldr	r3, [pc, #68]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 800958c:	7a5b      	ldrb	r3, [r3, #9]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	b2d1      	uxtb	r1, r2
 8009594:	4a0e      	ldr	r2, [pc, #56]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 8009596:	7251      	strb	r1, [r2, #9]
 8009598:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800959a:	7dbb      	ldrb	r3, [r7, #22]
 800959c:	3330      	adds	r3, #48	; 0x30
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	3301      	adds	r3, #1
 80095a8:	223a      	movs	r2, #58	; 0x3a
 80095aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	3302      	adds	r3, #2
 80095b0:	222f      	movs	r2, #47	; 0x2f
 80095b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	3303      	adds	r3, #3
 80095b8:	2200      	movs	r2, #0
 80095ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80095c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	371c      	adds	r7, #28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	200010f0 	.word	0x200010f0

080095d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80095de:	2200      	movs	r2, #0
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff ffaa 	bl	800953c <FATFS_LinkDriverEx>
 80095e8:	4603      	mov	r3, r0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
	...

080095f4 <__errno>:
 80095f4:	4b01      	ldr	r3, [pc, #4]	; (80095fc <__errno+0x8>)
 80095f6:	6818      	ldr	r0, [r3, #0]
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	2000000c 	.word	0x2000000c

08009600 <__libc_init_array>:
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	4e0d      	ldr	r6, [pc, #52]	; (8009638 <__libc_init_array+0x38>)
 8009604:	4c0d      	ldr	r4, [pc, #52]	; (800963c <__libc_init_array+0x3c>)
 8009606:	1ba4      	subs	r4, r4, r6
 8009608:	10a4      	asrs	r4, r4, #2
 800960a:	2500      	movs	r5, #0
 800960c:	42a5      	cmp	r5, r4
 800960e:	d109      	bne.n	8009624 <__libc_init_array+0x24>
 8009610:	4e0b      	ldr	r6, [pc, #44]	; (8009640 <__libc_init_array+0x40>)
 8009612:	4c0c      	ldr	r4, [pc, #48]	; (8009644 <__libc_init_array+0x44>)
 8009614:	f000 fc3a 	bl	8009e8c <_init>
 8009618:	1ba4      	subs	r4, r4, r6
 800961a:	10a4      	asrs	r4, r4, #2
 800961c:	2500      	movs	r5, #0
 800961e:	42a5      	cmp	r5, r4
 8009620:	d105      	bne.n	800962e <__libc_init_array+0x2e>
 8009622:	bd70      	pop	{r4, r5, r6, pc}
 8009624:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009628:	4798      	blx	r3
 800962a:	3501      	adds	r5, #1
 800962c:	e7ee      	b.n	800960c <__libc_init_array+0xc>
 800962e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009632:	4798      	blx	r3
 8009634:	3501      	adds	r5, #1
 8009636:	e7f2      	b.n	800961e <__libc_init_array+0x1e>
 8009638:	0800a1f0 	.word	0x0800a1f0
 800963c:	0800a1f0 	.word	0x0800a1f0
 8009640:	0800a1f0 	.word	0x0800a1f0
 8009644:	0800a1f4 	.word	0x0800a1f4

08009648 <memset>:
 8009648:	4402      	add	r2, r0
 800964a:	4603      	mov	r3, r0
 800964c:	4293      	cmp	r3, r2
 800964e:	d100      	bne.n	8009652 <memset+0xa>
 8009650:	4770      	bx	lr
 8009652:	f803 1b01 	strb.w	r1, [r3], #1
 8009656:	e7f9      	b.n	800964c <memset+0x4>

08009658 <sniprintf>:
 8009658:	b40c      	push	{r2, r3}
 800965a:	b530      	push	{r4, r5, lr}
 800965c:	4b17      	ldr	r3, [pc, #92]	; (80096bc <sniprintf+0x64>)
 800965e:	1e0c      	subs	r4, r1, #0
 8009660:	b09d      	sub	sp, #116	; 0x74
 8009662:	681d      	ldr	r5, [r3, #0]
 8009664:	da08      	bge.n	8009678 <sniprintf+0x20>
 8009666:	238b      	movs	r3, #139	; 0x8b
 8009668:	602b      	str	r3, [r5, #0]
 800966a:	f04f 30ff 	mov.w	r0, #4294967295
 800966e:	b01d      	add	sp, #116	; 0x74
 8009670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009674:	b002      	add	sp, #8
 8009676:	4770      	bx	lr
 8009678:	f44f 7302 	mov.w	r3, #520	; 0x208
 800967c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009680:	bf14      	ite	ne
 8009682:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009686:	4623      	moveq	r3, r4
 8009688:	9304      	str	r3, [sp, #16]
 800968a:	9307      	str	r3, [sp, #28]
 800968c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009690:	9002      	str	r0, [sp, #8]
 8009692:	9006      	str	r0, [sp, #24]
 8009694:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009698:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800969a:	ab21      	add	r3, sp, #132	; 0x84
 800969c:	a902      	add	r1, sp, #8
 800969e:	4628      	mov	r0, r5
 80096a0:	9301      	str	r3, [sp, #4]
 80096a2:	f000 f867 	bl	8009774 <_svfiprintf_r>
 80096a6:	1c43      	adds	r3, r0, #1
 80096a8:	bfbc      	itt	lt
 80096aa:	238b      	movlt	r3, #139	; 0x8b
 80096ac:	602b      	strlt	r3, [r5, #0]
 80096ae:	2c00      	cmp	r4, #0
 80096b0:	d0dd      	beq.n	800966e <sniprintf+0x16>
 80096b2:	9b02      	ldr	r3, [sp, #8]
 80096b4:	2200      	movs	r2, #0
 80096b6:	701a      	strb	r2, [r3, #0]
 80096b8:	e7d9      	b.n	800966e <sniprintf+0x16>
 80096ba:	bf00      	nop
 80096bc:	2000000c 	.word	0x2000000c

080096c0 <__ssputs_r>:
 80096c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c4:	688e      	ldr	r6, [r1, #8]
 80096c6:	429e      	cmp	r6, r3
 80096c8:	4682      	mov	sl, r0
 80096ca:	460c      	mov	r4, r1
 80096cc:	4690      	mov	r8, r2
 80096ce:	4699      	mov	r9, r3
 80096d0:	d837      	bhi.n	8009742 <__ssputs_r+0x82>
 80096d2:	898a      	ldrh	r2, [r1, #12]
 80096d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096d8:	d031      	beq.n	800973e <__ssputs_r+0x7e>
 80096da:	6825      	ldr	r5, [r4, #0]
 80096dc:	6909      	ldr	r1, [r1, #16]
 80096de:	1a6f      	subs	r7, r5, r1
 80096e0:	6965      	ldr	r5, [r4, #20]
 80096e2:	2302      	movs	r3, #2
 80096e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80096ec:	f109 0301 	add.w	r3, r9, #1
 80096f0:	443b      	add	r3, r7
 80096f2:	429d      	cmp	r5, r3
 80096f4:	bf38      	it	cc
 80096f6:	461d      	movcc	r5, r3
 80096f8:	0553      	lsls	r3, r2, #21
 80096fa:	d530      	bpl.n	800975e <__ssputs_r+0x9e>
 80096fc:	4629      	mov	r1, r5
 80096fe:	f000 fb2b 	bl	8009d58 <_malloc_r>
 8009702:	4606      	mov	r6, r0
 8009704:	b950      	cbnz	r0, 800971c <__ssputs_r+0x5c>
 8009706:	230c      	movs	r3, #12
 8009708:	f8ca 3000 	str.w	r3, [sl]
 800970c:	89a3      	ldrh	r3, [r4, #12]
 800970e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009712:	81a3      	strh	r3, [r4, #12]
 8009714:	f04f 30ff 	mov.w	r0, #4294967295
 8009718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800971c:	463a      	mov	r2, r7
 800971e:	6921      	ldr	r1, [r4, #16]
 8009720:	f000 faa8 	bl	8009c74 <memcpy>
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800972a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800972e:	81a3      	strh	r3, [r4, #12]
 8009730:	6126      	str	r6, [r4, #16]
 8009732:	6165      	str	r5, [r4, #20]
 8009734:	443e      	add	r6, r7
 8009736:	1bed      	subs	r5, r5, r7
 8009738:	6026      	str	r6, [r4, #0]
 800973a:	60a5      	str	r5, [r4, #8]
 800973c:	464e      	mov	r6, r9
 800973e:	454e      	cmp	r6, r9
 8009740:	d900      	bls.n	8009744 <__ssputs_r+0x84>
 8009742:	464e      	mov	r6, r9
 8009744:	4632      	mov	r2, r6
 8009746:	4641      	mov	r1, r8
 8009748:	6820      	ldr	r0, [r4, #0]
 800974a:	f000 fa9e 	bl	8009c8a <memmove>
 800974e:	68a3      	ldr	r3, [r4, #8]
 8009750:	1b9b      	subs	r3, r3, r6
 8009752:	60a3      	str	r3, [r4, #8]
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	441e      	add	r6, r3
 8009758:	6026      	str	r6, [r4, #0]
 800975a:	2000      	movs	r0, #0
 800975c:	e7dc      	b.n	8009718 <__ssputs_r+0x58>
 800975e:	462a      	mov	r2, r5
 8009760:	f000 fb54 	bl	8009e0c <_realloc_r>
 8009764:	4606      	mov	r6, r0
 8009766:	2800      	cmp	r0, #0
 8009768:	d1e2      	bne.n	8009730 <__ssputs_r+0x70>
 800976a:	6921      	ldr	r1, [r4, #16]
 800976c:	4650      	mov	r0, sl
 800976e:	f000 faa5 	bl	8009cbc <_free_r>
 8009772:	e7c8      	b.n	8009706 <__ssputs_r+0x46>

08009774 <_svfiprintf_r>:
 8009774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009778:	461d      	mov	r5, r3
 800977a:	898b      	ldrh	r3, [r1, #12]
 800977c:	061f      	lsls	r7, r3, #24
 800977e:	b09d      	sub	sp, #116	; 0x74
 8009780:	4680      	mov	r8, r0
 8009782:	460c      	mov	r4, r1
 8009784:	4616      	mov	r6, r2
 8009786:	d50f      	bpl.n	80097a8 <_svfiprintf_r+0x34>
 8009788:	690b      	ldr	r3, [r1, #16]
 800978a:	b96b      	cbnz	r3, 80097a8 <_svfiprintf_r+0x34>
 800978c:	2140      	movs	r1, #64	; 0x40
 800978e:	f000 fae3 	bl	8009d58 <_malloc_r>
 8009792:	6020      	str	r0, [r4, #0]
 8009794:	6120      	str	r0, [r4, #16]
 8009796:	b928      	cbnz	r0, 80097a4 <_svfiprintf_r+0x30>
 8009798:	230c      	movs	r3, #12
 800979a:	f8c8 3000 	str.w	r3, [r8]
 800979e:	f04f 30ff 	mov.w	r0, #4294967295
 80097a2:	e0c8      	b.n	8009936 <_svfiprintf_r+0x1c2>
 80097a4:	2340      	movs	r3, #64	; 0x40
 80097a6:	6163      	str	r3, [r4, #20]
 80097a8:	2300      	movs	r3, #0
 80097aa:	9309      	str	r3, [sp, #36]	; 0x24
 80097ac:	2320      	movs	r3, #32
 80097ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097b2:	2330      	movs	r3, #48	; 0x30
 80097b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097b8:	9503      	str	r5, [sp, #12]
 80097ba:	f04f 0b01 	mov.w	fp, #1
 80097be:	4637      	mov	r7, r6
 80097c0:	463d      	mov	r5, r7
 80097c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80097c6:	b10b      	cbz	r3, 80097cc <_svfiprintf_r+0x58>
 80097c8:	2b25      	cmp	r3, #37	; 0x25
 80097ca:	d13e      	bne.n	800984a <_svfiprintf_r+0xd6>
 80097cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80097d0:	d00b      	beq.n	80097ea <_svfiprintf_r+0x76>
 80097d2:	4653      	mov	r3, sl
 80097d4:	4632      	mov	r2, r6
 80097d6:	4621      	mov	r1, r4
 80097d8:	4640      	mov	r0, r8
 80097da:	f7ff ff71 	bl	80096c0 <__ssputs_r>
 80097de:	3001      	adds	r0, #1
 80097e0:	f000 80a4 	beq.w	800992c <_svfiprintf_r+0x1b8>
 80097e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e6:	4453      	add	r3, sl
 80097e8:	9309      	str	r3, [sp, #36]	; 0x24
 80097ea:	783b      	ldrb	r3, [r7, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 809d 	beq.w	800992c <_svfiprintf_r+0x1b8>
 80097f2:	2300      	movs	r3, #0
 80097f4:	f04f 32ff 	mov.w	r2, #4294967295
 80097f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097fc:	9304      	str	r3, [sp, #16]
 80097fe:	9307      	str	r3, [sp, #28]
 8009800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009804:	931a      	str	r3, [sp, #104]	; 0x68
 8009806:	462f      	mov	r7, r5
 8009808:	2205      	movs	r2, #5
 800980a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800980e:	4850      	ldr	r0, [pc, #320]	; (8009950 <_svfiprintf_r+0x1dc>)
 8009810:	f7f6 fd06 	bl	8000220 <memchr>
 8009814:	9b04      	ldr	r3, [sp, #16]
 8009816:	b9d0      	cbnz	r0, 800984e <_svfiprintf_r+0xda>
 8009818:	06d9      	lsls	r1, r3, #27
 800981a:	bf44      	itt	mi
 800981c:	2220      	movmi	r2, #32
 800981e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009822:	071a      	lsls	r2, r3, #28
 8009824:	bf44      	itt	mi
 8009826:	222b      	movmi	r2, #43	; 0x2b
 8009828:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800982c:	782a      	ldrb	r2, [r5, #0]
 800982e:	2a2a      	cmp	r2, #42	; 0x2a
 8009830:	d015      	beq.n	800985e <_svfiprintf_r+0xea>
 8009832:	9a07      	ldr	r2, [sp, #28]
 8009834:	462f      	mov	r7, r5
 8009836:	2000      	movs	r0, #0
 8009838:	250a      	movs	r5, #10
 800983a:	4639      	mov	r1, r7
 800983c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009840:	3b30      	subs	r3, #48	; 0x30
 8009842:	2b09      	cmp	r3, #9
 8009844:	d94d      	bls.n	80098e2 <_svfiprintf_r+0x16e>
 8009846:	b1b8      	cbz	r0, 8009878 <_svfiprintf_r+0x104>
 8009848:	e00f      	b.n	800986a <_svfiprintf_r+0xf6>
 800984a:	462f      	mov	r7, r5
 800984c:	e7b8      	b.n	80097c0 <_svfiprintf_r+0x4c>
 800984e:	4a40      	ldr	r2, [pc, #256]	; (8009950 <_svfiprintf_r+0x1dc>)
 8009850:	1a80      	subs	r0, r0, r2
 8009852:	fa0b f000 	lsl.w	r0, fp, r0
 8009856:	4318      	orrs	r0, r3
 8009858:	9004      	str	r0, [sp, #16]
 800985a:	463d      	mov	r5, r7
 800985c:	e7d3      	b.n	8009806 <_svfiprintf_r+0x92>
 800985e:	9a03      	ldr	r2, [sp, #12]
 8009860:	1d11      	adds	r1, r2, #4
 8009862:	6812      	ldr	r2, [r2, #0]
 8009864:	9103      	str	r1, [sp, #12]
 8009866:	2a00      	cmp	r2, #0
 8009868:	db01      	blt.n	800986e <_svfiprintf_r+0xfa>
 800986a:	9207      	str	r2, [sp, #28]
 800986c:	e004      	b.n	8009878 <_svfiprintf_r+0x104>
 800986e:	4252      	negs	r2, r2
 8009870:	f043 0302 	orr.w	r3, r3, #2
 8009874:	9207      	str	r2, [sp, #28]
 8009876:	9304      	str	r3, [sp, #16]
 8009878:	783b      	ldrb	r3, [r7, #0]
 800987a:	2b2e      	cmp	r3, #46	; 0x2e
 800987c:	d10c      	bne.n	8009898 <_svfiprintf_r+0x124>
 800987e:	787b      	ldrb	r3, [r7, #1]
 8009880:	2b2a      	cmp	r3, #42	; 0x2a
 8009882:	d133      	bne.n	80098ec <_svfiprintf_r+0x178>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	1d1a      	adds	r2, r3, #4
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	9203      	str	r2, [sp, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	bfb8      	it	lt
 8009890:	f04f 33ff 	movlt.w	r3, #4294967295
 8009894:	3702      	adds	r7, #2
 8009896:	9305      	str	r3, [sp, #20]
 8009898:	4d2e      	ldr	r5, [pc, #184]	; (8009954 <_svfiprintf_r+0x1e0>)
 800989a:	7839      	ldrb	r1, [r7, #0]
 800989c:	2203      	movs	r2, #3
 800989e:	4628      	mov	r0, r5
 80098a0:	f7f6 fcbe 	bl	8000220 <memchr>
 80098a4:	b138      	cbz	r0, 80098b6 <_svfiprintf_r+0x142>
 80098a6:	2340      	movs	r3, #64	; 0x40
 80098a8:	1b40      	subs	r0, r0, r5
 80098aa:	fa03 f000 	lsl.w	r0, r3, r0
 80098ae:	9b04      	ldr	r3, [sp, #16]
 80098b0:	4303      	orrs	r3, r0
 80098b2:	3701      	adds	r7, #1
 80098b4:	9304      	str	r3, [sp, #16]
 80098b6:	7839      	ldrb	r1, [r7, #0]
 80098b8:	4827      	ldr	r0, [pc, #156]	; (8009958 <_svfiprintf_r+0x1e4>)
 80098ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098be:	2206      	movs	r2, #6
 80098c0:	1c7e      	adds	r6, r7, #1
 80098c2:	f7f6 fcad 	bl	8000220 <memchr>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d038      	beq.n	800993c <_svfiprintf_r+0x1c8>
 80098ca:	4b24      	ldr	r3, [pc, #144]	; (800995c <_svfiprintf_r+0x1e8>)
 80098cc:	bb13      	cbnz	r3, 8009914 <_svfiprintf_r+0x1a0>
 80098ce:	9b03      	ldr	r3, [sp, #12]
 80098d0:	3307      	adds	r3, #7
 80098d2:	f023 0307 	bic.w	r3, r3, #7
 80098d6:	3308      	adds	r3, #8
 80098d8:	9303      	str	r3, [sp, #12]
 80098da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098dc:	444b      	add	r3, r9
 80098de:	9309      	str	r3, [sp, #36]	; 0x24
 80098e0:	e76d      	b.n	80097be <_svfiprintf_r+0x4a>
 80098e2:	fb05 3202 	mla	r2, r5, r2, r3
 80098e6:	2001      	movs	r0, #1
 80098e8:	460f      	mov	r7, r1
 80098ea:	e7a6      	b.n	800983a <_svfiprintf_r+0xc6>
 80098ec:	2300      	movs	r3, #0
 80098ee:	3701      	adds	r7, #1
 80098f0:	9305      	str	r3, [sp, #20]
 80098f2:	4619      	mov	r1, r3
 80098f4:	250a      	movs	r5, #10
 80098f6:	4638      	mov	r0, r7
 80098f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098fc:	3a30      	subs	r2, #48	; 0x30
 80098fe:	2a09      	cmp	r2, #9
 8009900:	d903      	bls.n	800990a <_svfiprintf_r+0x196>
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0c8      	beq.n	8009898 <_svfiprintf_r+0x124>
 8009906:	9105      	str	r1, [sp, #20]
 8009908:	e7c6      	b.n	8009898 <_svfiprintf_r+0x124>
 800990a:	fb05 2101 	mla	r1, r5, r1, r2
 800990e:	2301      	movs	r3, #1
 8009910:	4607      	mov	r7, r0
 8009912:	e7f0      	b.n	80098f6 <_svfiprintf_r+0x182>
 8009914:	ab03      	add	r3, sp, #12
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	4622      	mov	r2, r4
 800991a:	4b11      	ldr	r3, [pc, #68]	; (8009960 <_svfiprintf_r+0x1ec>)
 800991c:	a904      	add	r1, sp, #16
 800991e:	4640      	mov	r0, r8
 8009920:	f3af 8000 	nop.w
 8009924:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009928:	4681      	mov	r9, r0
 800992a:	d1d6      	bne.n	80098da <_svfiprintf_r+0x166>
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	065b      	lsls	r3, r3, #25
 8009930:	f53f af35 	bmi.w	800979e <_svfiprintf_r+0x2a>
 8009934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009936:	b01d      	add	sp, #116	; 0x74
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	ab03      	add	r3, sp, #12
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	4622      	mov	r2, r4
 8009942:	4b07      	ldr	r3, [pc, #28]	; (8009960 <_svfiprintf_r+0x1ec>)
 8009944:	a904      	add	r1, sp, #16
 8009946:	4640      	mov	r0, r8
 8009948:	f000 f882 	bl	8009a50 <_printf_i>
 800994c:	e7ea      	b.n	8009924 <_svfiprintf_r+0x1b0>
 800994e:	bf00      	nop
 8009950:	0800a1b4 	.word	0x0800a1b4
 8009954:	0800a1ba 	.word	0x0800a1ba
 8009958:	0800a1be 	.word	0x0800a1be
 800995c:	00000000 	.word	0x00000000
 8009960:	080096c1 	.word	0x080096c1

08009964 <_printf_common>:
 8009964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009968:	4691      	mov	r9, r2
 800996a:	461f      	mov	r7, r3
 800996c:	688a      	ldr	r2, [r1, #8]
 800996e:	690b      	ldr	r3, [r1, #16]
 8009970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009974:	4293      	cmp	r3, r2
 8009976:	bfb8      	it	lt
 8009978:	4613      	movlt	r3, r2
 800997a:	f8c9 3000 	str.w	r3, [r9]
 800997e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009982:	4606      	mov	r6, r0
 8009984:	460c      	mov	r4, r1
 8009986:	b112      	cbz	r2, 800998e <_printf_common+0x2a>
 8009988:	3301      	adds	r3, #1
 800998a:	f8c9 3000 	str.w	r3, [r9]
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	0699      	lsls	r1, r3, #26
 8009992:	bf42      	ittt	mi
 8009994:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009998:	3302      	addmi	r3, #2
 800999a:	f8c9 3000 	strmi.w	r3, [r9]
 800999e:	6825      	ldr	r5, [r4, #0]
 80099a0:	f015 0506 	ands.w	r5, r5, #6
 80099a4:	d107      	bne.n	80099b6 <_printf_common+0x52>
 80099a6:	f104 0a19 	add.w	sl, r4, #25
 80099aa:	68e3      	ldr	r3, [r4, #12]
 80099ac:	f8d9 2000 	ldr.w	r2, [r9]
 80099b0:	1a9b      	subs	r3, r3, r2
 80099b2:	42ab      	cmp	r3, r5
 80099b4:	dc28      	bgt.n	8009a08 <_printf_common+0xa4>
 80099b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80099ba:	6822      	ldr	r2, [r4, #0]
 80099bc:	3300      	adds	r3, #0
 80099be:	bf18      	it	ne
 80099c0:	2301      	movne	r3, #1
 80099c2:	0692      	lsls	r2, r2, #26
 80099c4:	d42d      	bmi.n	8009a22 <_printf_common+0xbe>
 80099c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099ca:	4639      	mov	r1, r7
 80099cc:	4630      	mov	r0, r6
 80099ce:	47c0      	blx	r8
 80099d0:	3001      	adds	r0, #1
 80099d2:	d020      	beq.n	8009a16 <_printf_common+0xb2>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	68e5      	ldr	r5, [r4, #12]
 80099d8:	f8d9 2000 	ldr.w	r2, [r9]
 80099dc:	f003 0306 	and.w	r3, r3, #6
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	bf08      	it	eq
 80099e4:	1aad      	subeq	r5, r5, r2
 80099e6:	68a3      	ldr	r3, [r4, #8]
 80099e8:	6922      	ldr	r2, [r4, #16]
 80099ea:	bf0c      	ite	eq
 80099ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099f0:	2500      	movne	r5, #0
 80099f2:	4293      	cmp	r3, r2
 80099f4:	bfc4      	itt	gt
 80099f6:	1a9b      	subgt	r3, r3, r2
 80099f8:	18ed      	addgt	r5, r5, r3
 80099fa:	f04f 0900 	mov.w	r9, #0
 80099fe:	341a      	adds	r4, #26
 8009a00:	454d      	cmp	r5, r9
 8009a02:	d11a      	bne.n	8009a3a <_printf_common+0xd6>
 8009a04:	2000      	movs	r0, #0
 8009a06:	e008      	b.n	8009a1a <_printf_common+0xb6>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	4652      	mov	r2, sl
 8009a0c:	4639      	mov	r1, r7
 8009a0e:	4630      	mov	r0, r6
 8009a10:	47c0      	blx	r8
 8009a12:	3001      	adds	r0, #1
 8009a14:	d103      	bne.n	8009a1e <_printf_common+0xba>
 8009a16:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1e:	3501      	adds	r5, #1
 8009a20:	e7c3      	b.n	80099aa <_printf_common+0x46>
 8009a22:	18e1      	adds	r1, r4, r3
 8009a24:	1c5a      	adds	r2, r3, #1
 8009a26:	2030      	movs	r0, #48	; 0x30
 8009a28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a2c:	4422      	add	r2, r4
 8009a2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a36:	3302      	adds	r3, #2
 8009a38:	e7c5      	b.n	80099c6 <_printf_common+0x62>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	4622      	mov	r2, r4
 8009a3e:	4639      	mov	r1, r7
 8009a40:	4630      	mov	r0, r6
 8009a42:	47c0      	blx	r8
 8009a44:	3001      	adds	r0, #1
 8009a46:	d0e6      	beq.n	8009a16 <_printf_common+0xb2>
 8009a48:	f109 0901 	add.w	r9, r9, #1
 8009a4c:	e7d8      	b.n	8009a00 <_printf_common+0x9c>
	...

08009a50 <_printf_i>:
 8009a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a54:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009a58:	460c      	mov	r4, r1
 8009a5a:	7e09      	ldrb	r1, [r1, #24]
 8009a5c:	b085      	sub	sp, #20
 8009a5e:	296e      	cmp	r1, #110	; 0x6e
 8009a60:	4617      	mov	r7, r2
 8009a62:	4606      	mov	r6, r0
 8009a64:	4698      	mov	r8, r3
 8009a66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a68:	f000 80b3 	beq.w	8009bd2 <_printf_i+0x182>
 8009a6c:	d822      	bhi.n	8009ab4 <_printf_i+0x64>
 8009a6e:	2963      	cmp	r1, #99	; 0x63
 8009a70:	d036      	beq.n	8009ae0 <_printf_i+0x90>
 8009a72:	d80a      	bhi.n	8009a8a <_printf_i+0x3a>
 8009a74:	2900      	cmp	r1, #0
 8009a76:	f000 80b9 	beq.w	8009bec <_printf_i+0x19c>
 8009a7a:	2958      	cmp	r1, #88	; 0x58
 8009a7c:	f000 8083 	beq.w	8009b86 <_printf_i+0x136>
 8009a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009a88:	e032      	b.n	8009af0 <_printf_i+0xa0>
 8009a8a:	2964      	cmp	r1, #100	; 0x64
 8009a8c:	d001      	beq.n	8009a92 <_printf_i+0x42>
 8009a8e:	2969      	cmp	r1, #105	; 0x69
 8009a90:	d1f6      	bne.n	8009a80 <_printf_i+0x30>
 8009a92:	6820      	ldr	r0, [r4, #0]
 8009a94:	6813      	ldr	r3, [r2, #0]
 8009a96:	0605      	lsls	r5, r0, #24
 8009a98:	f103 0104 	add.w	r1, r3, #4
 8009a9c:	d52a      	bpl.n	8009af4 <_printf_i+0xa4>
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6011      	str	r1, [r2, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	da03      	bge.n	8009aae <_printf_i+0x5e>
 8009aa6:	222d      	movs	r2, #45	; 0x2d
 8009aa8:	425b      	negs	r3, r3
 8009aaa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009aae:	486f      	ldr	r0, [pc, #444]	; (8009c6c <_printf_i+0x21c>)
 8009ab0:	220a      	movs	r2, #10
 8009ab2:	e039      	b.n	8009b28 <_printf_i+0xd8>
 8009ab4:	2973      	cmp	r1, #115	; 0x73
 8009ab6:	f000 809d 	beq.w	8009bf4 <_printf_i+0x1a4>
 8009aba:	d808      	bhi.n	8009ace <_printf_i+0x7e>
 8009abc:	296f      	cmp	r1, #111	; 0x6f
 8009abe:	d020      	beq.n	8009b02 <_printf_i+0xb2>
 8009ac0:	2970      	cmp	r1, #112	; 0x70
 8009ac2:	d1dd      	bne.n	8009a80 <_printf_i+0x30>
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	f043 0320 	orr.w	r3, r3, #32
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	e003      	b.n	8009ad6 <_printf_i+0x86>
 8009ace:	2975      	cmp	r1, #117	; 0x75
 8009ad0:	d017      	beq.n	8009b02 <_printf_i+0xb2>
 8009ad2:	2978      	cmp	r1, #120	; 0x78
 8009ad4:	d1d4      	bne.n	8009a80 <_printf_i+0x30>
 8009ad6:	2378      	movs	r3, #120	; 0x78
 8009ad8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009adc:	4864      	ldr	r0, [pc, #400]	; (8009c70 <_printf_i+0x220>)
 8009ade:	e055      	b.n	8009b8c <_printf_i+0x13c>
 8009ae0:	6813      	ldr	r3, [r2, #0]
 8009ae2:	1d19      	adds	r1, r3, #4
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6011      	str	r1, [r2, #0]
 8009ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009af0:	2301      	movs	r3, #1
 8009af2:	e08c      	b.n	8009c0e <_printf_i+0x1be>
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6011      	str	r1, [r2, #0]
 8009af8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009afc:	bf18      	it	ne
 8009afe:	b21b      	sxthne	r3, r3
 8009b00:	e7cf      	b.n	8009aa2 <_printf_i+0x52>
 8009b02:	6813      	ldr	r3, [r2, #0]
 8009b04:	6825      	ldr	r5, [r4, #0]
 8009b06:	1d18      	adds	r0, r3, #4
 8009b08:	6010      	str	r0, [r2, #0]
 8009b0a:	0628      	lsls	r0, r5, #24
 8009b0c:	d501      	bpl.n	8009b12 <_printf_i+0xc2>
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	e002      	b.n	8009b18 <_printf_i+0xc8>
 8009b12:	0668      	lsls	r0, r5, #25
 8009b14:	d5fb      	bpl.n	8009b0e <_printf_i+0xbe>
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	4854      	ldr	r0, [pc, #336]	; (8009c6c <_printf_i+0x21c>)
 8009b1a:	296f      	cmp	r1, #111	; 0x6f
 8009b1c:	bf14      	ite	ne
 8009b1e:	220a      	movne	r2, #10
 8009b20:	2208      	moveq	r2, #8
 8009b22:	2100      	movs	r1, #0
 8009b24:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b28:	6865      	ldr	r5, [r4, #4]
 8009b2a:	60a5      	str	r5, [r4, #8]
 8009b2c:	2d00      	cmp	r5, #0
 8009b2e:	f2c0 8095 	blt.w	8009c5c <_printf_i+0x20c>
 8009b32:	6821      	ldr	r1, [r4, #0]
 8009b34:	f021 0104 	bic.w	r1, r1, #4
 8009b38:	6021      	str	r1, [r4, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d13d      	bne.n	8009bba <_printf_i+0x16a>
 8009b3e:	2d00      	cmp	r5, #0
 8009b40:	f040 808e 	bne.w	8009c60 <_printf_i+0x210>
 8009b44:	4665      	mov	r5, ip
 8009b46:	2a08      	cmp	r2, #8
 8009b48:	d10b      	bne.n	8009b62 <_printf_i+0x112>
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	07db      	lsls	r3, r3, #31
 8009b4e:	d508      	bpl.n	8009b62 <_printf_i+0x112>
 8009b50:	6923      	ldr	r3, [r4, #16]
 8009b52:	6862      	ldr	r2, [r4, #4]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	bfde      	ittt	le
 8009b58:	2330      	movle	r3, #48	; 0x30
 8009b5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b62:	ebac 0305 	sub.w	r3, ip, r5
 8009b66:	6123      	str	r3, [r4, #16]
 8009b68:	f8cd 8000 	str.w	r8, [sp]
 8009b6c:	463b      	mov	r3, r7
 8009b6e:	aa03      	add	r2, sp, #12
 8009b70:	4621      	mov	r1, r4
 8009b72:	4630      	mov	r0, r6
 8009b74:	f7ff fef6 	bl	8009964 <_printf_common>
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d14d      	bne.n	8009c18 <_printf_i+0x1c8>
 8009b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b80:	b005      	add	sp, #20
 8009b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b86:	4839      	ldr	r0, [pc, #228]	; (8009c6c <_printf_i+0x21c>)
 8009b88:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009b8c:	6813      	ldr	r3, [r2, #0]
 8009b8e:	6821      	ldr	r1, [r4, #0]
 8009b90:	1d1d      	adds	r5, r3, #4
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6015      	str	r5, [r2, #0]
 8009b96:	060a      	lsls	r2, r1, #24
 8009b98:	d50b      	bpl.n	8009bb2 <_printf_i+0x162>
 8009b9a:	07ca      	lsls	r2, r1, #31
 8009b9c:	bf44      	itt	mi
 8009b9e:	f041 0120 	orrmi.w	r1, r1, #32
 8009ba2:	6021      	strmi	r1, [r4, #0]
 8009ba4:	b91b      	cbnz	r3, 8009bae <_printf_i+0x15e>
 8009ba6:	6822      	ldr	r2, [r4, #0]
 8009ba8:	f022 0220 	bic.w	r2, r2, #32
 8009bac:	6022      	str	r2, [r4, #0]
 8009bae:	2210      	movs	r2, #16
 8009bb0:	e7b7      	b.n	8009b22 <_printf_i+0xd2>
 8009bb2:	064d      	lsls	r5, r1, #25
 8009bb4:	bf48      	it	mi
 8009bb6:	b29b      	uxthmi	r3, r3
 8009bb8:	e7ef      	b.n	8009b9a <_printf_i+0x14a>
 8009bba:	4665      	mov	r5, ip
 8009bbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bc0:	fb02 3311 	mls	r3, r2, r1, r3
 8009bc4:	5cc3      	ldrb	r3, [r0, r3]
 8009bc6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009bca:	460b      	mov	r3, r1
 8009bcc:	2900      	cmp	r1, #0
 8009bce:	d1f5      	bne.n	8009bbc <_printf_i+0x16c>
 8009bd0:	e7b9      	b.n	8009b46 <_printf_i+0xf6>
 8009bd2:	6813      	ldr	r3, [r2, #0]
 8009bd4:	6825      	ldr	r5, [r4, #0]
 8009bd6:	6961      	ldr	r1, [r4, #20]
 8009bd8:	1d18      	adds	r0, r3, #4
 8009bda:	6010      	str	r0, [r2, #0]
 8009bdc:	0628      	lsls	r0, r5, #24
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	d501      	bpl.n	8009be6 <_printf_i+0x196>
 8009be2:	6019      	str	r1, [r3, #0]
 8009be4:	e002      	b.n	8009bec <_printf_i+0x19c>
 8009be6:	066a      	lsls	r2, r5, #25
 8009be8:	d5fb      	bpl.n	8009be2 <_printf_i+0x192>
 8009bea:	8019      	strh	r1, [r3, #0]
 8009bec:	2300      	movs	r3, #0
 8009bee:	6123      	str	r3, [r4, #16]
 8009bf0:	4665      	mov	r5, ip
 8009bf2:	e7b9      	b.n	8009b68 <_printf_i+0x118>
 8009bf4:	6813      	ldr	r3, [r2, #0]
 8009bf6:	1d19      	adds	r1, r3, #4
 8009bf8:	6011      	str	r1, [r2, #0]
 8009bfa:	681d      	ldr	r5, [r3, #0]
 8009bfc:	6862      	ldr	r2, [r4, #4]
 8009bfe:	2100      	movs	r1, #0
 8009c00:	4628      	mov	r0, r5
 8009c02:	f7f6 fb0d 	bl	8000220 <memchr>
 8009c06:	b108      	cbz	r0, 8009c0c <_printf_i+0x1bc>
 8009c08:	1b40      	subs	r0, r0, r5
 8009c0a:	6060      	str	r0, [r4, #4]
 8009c0c:	6863      	ldr	r3, [r4, #4]
 8009c0e:	6123      	str	r3, [r4, #16]
 8009c10:	2300      	movs	r3, #0
 8009c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c16:	e7a7      	b.n	8009b68 <_printf_i+0x118>
 8009c18:	6923      	ldr	r3, [r4, #16]
 8009c1a:	462a      	mov	r2, r5
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	4630      	mov	r0, r6
 8009c20:	47c0      	blx	r8
 8009c22:	3001      	adds	r0, #1
 8009c24:	d0aa      	beq.n	8009b7c <_printf_i+0x12c>
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	079b      	lsls	r3, r3, #30
 8009c2a:	d413      	bmi.n	8009c54 <_printf_i+0x204>
 8009c2c:	68e0      	ldr	r0, [r4, #12]
 8009c2e:	9b03      	ldr	r3, [sp, #12]
 8009c30:	4298      	cmp	r0, r3
 8009c32:	bfb8      	it	lt
 8009c34:	4618      	movlt	r0, r3
 8009c36:	e7a3      	b.n	8009b80 <_printf_i+0x130>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	464a      	mov	r2, r9
 8009c3c:	4639      	mov	r1, r7
 8009c3e:	4630      	mov	r0, r6
 8009c40:	47c0      	blx	r8
 8009c42:	3001      	adds	r0, #1
 8009c44:	d09a      	beq.n	8009b7c <_printf_i+0x12c>
 8009c46:	3501      	adds	r5, #1
 8009c48:	68e3      	ldr	r3, [r4, #12]
 8009c4a:	9a03      	ldr	r2, [sp, #12]
 8009c4c:	1a9b      	subs	r3, r3, r2
 8009c4e:	42ab      	cmp	r3, r5
 8009c50:	dcf2      	bgt.n	8009c38 <_printf_i+0x1e8>
 8009c52:	e7eb      	b.n	8009c2c <_printf_i+0x1dc>
 8009c54:	2500      	movs	r5, #0
 8009c56:	f104 0919 	add.w	r9, r4, #25
 8009c5a:	e7f5      	b.n	8009c48 <_printf_i+0x1f8>
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1ac      	bne.n	8009bba <_printf_i+0x16a>
 8009c60:	7803      	ldrb	r3, [r0, #0]
 8009c62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c6a:	e76c      	b.n	8009b46 <_printf_i+0xf6>
 8009c6c:	0800a1c5 	.word	0x0800a1c5
 8009c70:	0800a1d6 	.word	0x0800a1d6

08009c74 <memcpy>:
 8009c74:	b510      	push	{r4, lr}
 8009c76:	1e43      	subs	r3, r0, #1
 8009c78:	440a      	add	r2, r1
 8009c7a:	4291      	cmp	r1, r2
 8009c7c:	d100      	bne.n	8009c80 <memcpy+0xc>
 8009c7e:	bd10      	pop	{r4, pc}
 8009c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c88:	e7f7      	b.n	8009c7a <memcpy+0x6>

08009c8a <memmove>:
 8009c8a:	4288      	cmp	r0, r1
 8009c8c:	b510      	push	{r4, lr}
 8009c8e:	eb01 0302 	add.w	r3, r1, r2
 8009c92:	d807      	bhi.n	8009ca4 <memmove+0x1a>
 8009c94:	1e42      	subs	r2, r0, #1
 8009c96:	4299      	cmp	r1, r3
 8009c98:	d00a      	beq.n	8009cb0 <memmove+0x26>
 8009c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c9e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009ca2:	e7f8      	b.n	8009c96 <memmove+0xc>
 8009ca4:	4283      	cmp	r3, r0
 8009ca6:	d9f5      	bls.n	8009c94 <memmove+0xa>
 8009ca8:	1881      	adds	r1, r0, r2
 8009caa:	1ad2      	subs	r2, r2, r3
 8009cac:	42d3      	cmn	r3, r2
 8009cae:	d100      	bne.n	8009cb2 <memmove+0x28>
 8009cb0:	bd10      	pop	{r4, pc}
 8009cb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cb6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009cba:	e7f7      	b.n	8009cac <memmove+0x22>

08009cbc <_free_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	2900      	cmp	r1, #0
 8009cc2:	d045      	beq.n	8009d50 <_free_r+0x94>
 8009cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cc8:	1f0c      	subs	r4, r1, #4
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	bfb8      	it	lt
 8009cce:	18e4      	addlt	r4, r4, r3
 8009cd0:	f000 f8d2 	bl	8009e78 <__malloc_lock>
 8009cd4:	4a1f      	ldr	r2, [pc, #124]	; (8009d54 <_free_r+0x98>)
 8009cd6:	6813      	ldr	r3, [r2, #0]
 8009cd8:	4610      	mov	r0, r2
 8009cda:	b933      	cbnz	r3, 8009cea <_free_r+0x2e>
 8009cdc:	6063      	str	r3, [r4, #4]
 8009cde:	6014      	str	r4, [r2, #0]
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ce6:	f000 b8c8 	b.w	8009e7a <__malloc_unlock>
 8009cea:	42a3      	cmp	r3, r4
 8009cec:	d90c      	bls.n	8009d08 <_free_r+0x4c>
 8009cee:	6821      	ldr	r1, [r4, #0]
 8009cf0:	1862      	adds	r2, r4, r1
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	bf04      	itt	eq
 8009cf6:	681a      	ldreq	r2, [r3, #0]
 8009cf8:	685b      	ldreq	r3, [r3, #4]
 8009cfa:	6063      	str	r3, [r4, #4]
 8009cfc:	bf04      	itt	eq
 8009cfe:	1852      	addeq	r2, r2, r1
 8009d00:	6022      	streq	r2, [r4, #0]
 8009d02:	6004      	str	r4, [r0, #0]
 8009d04:	e7ec      	b.n	8009ce0 <_free_r+0x24>
 8009d06:	4613      	mov	r3, r2
 8009d08:	685a      	ldr	r2, [r3, #4]
 8009d0a:	b10a      	cbz	r2, 8009d10 <_free_r+0x54>
 8009d0c:	42a2      	cmp	r2, r4
 8009d0e:	d9fa      	bls.n	8009d06 <_free_r+0x4a>
 8009d10:	6819      	ldr	r1, [r3, #0]
 8009d12:	1858      	adds	r0, r3, r1
 8009d14:	42a0      	cmp	r0, r4
 8009d16:	d10b      	bne.n	8009d30 <_free_r+0x74>
 8009d18:	6820      	ldr	r0, [r4, #0]
 8009d1a:	4401      	add	r1, r0
 8009d1c:	1858      	adds	r0, r3, r1
 8009d1e:	4282      	cmp	r2, r0
 8009d20:	6019      	str	r1, [r3, #0]
 8009d22:	d1dd      	bne.n	8009ce0 <_free_r+0x24>
 8009d24:	6810      	ldr	r0, [r2, #0]
 8009d26:	6852      	ldr	r2, [r2, #4]
 8009d28:	605a      	str	r2, [r3, #4]
 8009d2a:	4401      	add	r1, r0
 8009d2c:	6019      	str	r1, [r3, #0]
 8009d2e:	e7d7      	b.n	8009ce0 <_free_r+0x24>
 8009d30:	d902      	bls.n	8009d38 <_free_r+0x7c>
 8009d32:	230c      	movs	r3, #12
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	e7d3      	b.n	8009ce0 <_free_r+0x24>
 8009d38:	6820      	ldr	r0, [r4, #0]
 8009d3a:	1821      	adds	r1, r4, r0
 8009d3c:	428a      	cmp	r2, r1
 8009d3e:	bf04      	itt	eq
 8009d40:	6811      	ldreq	r1, [r2, #0]
 8009d42:	6852      	ldreq	r2, [r2, #4]
 8009d44:	6062      	str	r2, [r4, #4]
 8009d46:	bf04      	itt	eq
 8009d48:	1809      	addeq	r1, r1, r0
 8009d4a:	6021      	streq	r1, [r4, #0]
 8009d4c:	605c      	str	r4, [r3, #4]
 8009d4e:	e7c7      	b.n	8009ce0 <_free_r+0x24>
 8009d50:	bd38      	pop	{r3, r4, r5, pc}
 8009d52:	bf00      	nop
 8009d54:	200010fc 	.word	0x200010fc

08009d58 <_malloc_r>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	1ccd      	adds	r5, r1, #3
 8009d5c:	f025 0503 	bic.w	r5, r5, #3
 8009d60:	3508      	adds	r5, #8
 8009d62:	2d0c      	cmp	r5, #12
 8009d64:	bf38      	it	cc
 8009d66:	250c      	movcc	r5, #12
 8009d68:	2d00      	cmp	r5, #0
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	db01      	blt.n	8009d72 <_malloc_r+0x1a>
 8009d6e:	42a9      	cmp	r1, r5
 8009d70:	d903      	bls.n	8009d7a <_malloc_r+0x22>
 8009d72:	230c      	movs	r3, #12
 8009d74:	6033      	str	r3, [r6, #0]
 8009d76:	2000      	movs	r0, #0
 8009d78:	bd70      	pop	{r4, r5, r6, pc}
 8009d7a:	f000 f87d 	bl	8009e78 <__malloc_lock>
 8009d7e:	4a21      	ldr	r2, [pc, #132]	; (8009e04 <_malloc_r+0xac>)
 8009d80:	6814      	ldr	r4, [r2, #0]
 8009d82:	4621      	mov	r1, r4
 8009d84:	b991      	cbnz	r1, 8009dac <_malloc_r+0x54>
 8009d86:	4c20      	ldr	r4, [pc, #128]	; (8009e08 <_malloc_r+0xb0>)
 8009d88:	6823      	ldr	r3, [r4, #0]
 8009d8a:	b91b      	cbnz	r3, 8009d94 <_malloc_r+0x3c>
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f000 f863 	bl	8009e58 <_sbrk_r>
 8009d92:	6020      	str	r0, [r4, #0]
 8009d94:	4629      	mov	r1, r5
 8009d96:	4630      	mov	r0, r6
 8009d98:	f000 f85e 	bl	8009e58 <_sbrk_r>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	d124      	bne.n	8009dea <_malloc_r+0x92>
 8009da0:	230c      	movs	r3, #12
 8009da2:	6033      	str	r3, [r6, #0]
 8009da4:	4630      	mov	r0, r6
 8009da6:	f000 f868 	bl	8009e7a <__malloc_unlock>
 8009daa:	e7e4      	b.n	8009d76 <_malloc_r+0x1e>
 8009dac:	680b      	ldr	r3, [r1, #0]
 8009dae:	1b5b      	subs	r3, r3, r5
 8009db0:	d418      	bmi.n	8009de4 <_malloc_r+0x8c>
 8009db2:	2b0b      	cmp	r3, #11
 8009db4:	d90f      	bls.n	8009dd6 <_malloc_r+0x7e>
 8009db6:	600b      	str	r3, [r1, #0]
 8009db8:	50cd      	str	r5, [r1, r3]
 8009dba:	18cc      	adds	r4, r1, r3
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f000 f85c 	bl	8009e7a <__malloc_unlock>
 8009dc2:	f104 000b 	add.w	r0, r4, #11
 8009dc6:	1d23      	adds	r3, r4, #4
 8009dc8:	f020 0007 	bic.w	r0, r0, #7
 8009dcc:	1ac3      	subs	r3, r0, r3
 8009dce:	d0d3      	beq.n	8009d78 <_malloc_r+0x20>
 8009dd0:	425a      	negs	r2, r3
 8009dd2:	50e2      	str	r2, [r4, r3]
 8009dd4:	e7d0      	b.n	8009d78 <_malloc_r+0x20>
 8009dd6:	428c      	cmp	r4, r1
 8009dd8:	684b      	ldr	r3, [r1, #4]
 8009dda:	bf16      	itet	ne
 8009ddc:	6063      	strne	r3, [r4, #4]
 8009dde:	6013      	streq	r3, [r2, #0]
 8009de0:	460c      	movne	r4, r1
 8009de2:	e7eb      	b.n	8009dbc <_malloc_r+0x64>
 8009de4:	460c      	mov	r4, r1
 8009de6:	6849      	ldr	r1, [r1, #4]
 8009de8:	e7cc      	b.n	8009d84 <_malloc_r+0x2c>
 8009dea:	1cc4      	adds	r4, r0, #3
 8009dec:	f024 0403 	bic.w	r4, r4, #3
 8009df0:	42a0      	cmp	r0, r4
 8009df2:	d005      	beq.n	8009e00 <_malloc_r+0xa8>
 8009df4:	1a21      	subs	r1, r4, r0
 8009df6:	4630      	mov	r0, r6
 8009df8:	f000 f82e 	bl	8009e58 <_sbrk_r>
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d0cf      	beq.n	8009da0 <_malloc_r+0x48>
 8009e00:	6025      	str	r5, [r4, #0]
 8009e02:	e7db      	b.n	8009dbc <_malloc_r+0x64>
 8009e04:	200010fc 	.word	0x200010fc
 8009e08:	20001100 	.word	0x20001100

08009e0c <_realloc_r>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	4607      	mov	r7, r0
 8009e10:	4614      	mov	r4, r2
 8009e12:	460e      	mov	r6, r1
 8009e14:	b921      	cbnz	r1, 8009e20 <_realloc_r+0x14>
 8009e16:	4611      	mov	r1, r2
 8009e18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e1c:	f7ff bf9c 	b.w	8009d58 <_malloc_r>
 8009e20:	b922      	cbnz	r2, 8009e2c <_realloc_r+0x20>
 8009e22:	f7ff ff4b 	bl	8009cbc <_free_r>
 8009e26:	4625      	mov	r5, r4
 8009e28:	4628      	mov	r0, r5
 8009e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e2c:	f000 f826 	bl	8009e7c <_malloc_usable_size_r>
 8009e30:	42a0      	cmp	r0, r4
 8009e32:	d20f      	bcs.n	8009e54 <_realloc_r+0x48>
 8009e34:	4621      	mov	r1, r4
 8009e36:	4638      	mov	r0, r7
 8009e38:	f7ff ff8e 	bl	8009d58 <_malloc_r>
 8009e3c:	4605      	mov	r5, r0
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d0f2      	beq.n	8009e28 <_realloc_r+0x1c>
 8009e42:	4631      	mov	r1, r6
 8009e44:	4622      	mov	r2, r4
 8009e46:	f7ff ff15 	bl	8009c74 <memcpy>
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4638      	mov	r0, r7
 8009e4e:	f7ff ff35 	bl	8009cbc <_free_r>
 8009e52:	e7e9      	b.n	8009e28 <_realloc_r+0x1c>
 8009e54:	4635      	mov	r5, r6
 8009e56:	e7e7      	b.n	8009e28 <_realloc_r+0x1c>

08009e58 <_sbrk_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4c06      	ldr	r4, [pc, #24]	; (8009e74 <_sbrk_r+0x1c>)
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4605      	mov	r5, r0
 8009e60:	4608      	mov	r0, r1
 8009e62:	6023      	str	r3, [r4, #0]
 8009e64:	f7f7 f89c 	bl	8000fa0 <_sbrk>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d102      	bne.n	8009e72 <_sbrk_r+0x1a>
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	b103      	cbz	r3, 8009e72 <_sbrk_r+0x1a>
 8009e70:	602b      	str	r3, [r5, #0]
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	20004bdc 	.word	0x20004bdc

08009e78 <__malloc_lock>:
 8009e78:	4770      	bx	lr

08009e7a <__malloc_unlock>:
 8009e7a:	4770      	bx	lr

08009e7c <_malloc_usable_size_r>:
 8009e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e80:	1f18      	subs	r0, r3, #4
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bfbc      	itt	lt
 8009e86:	580b      	ldrlt	r3, [r1, r0]
 8009e88:	18c0      	addlt	r0, r0, r3
 8009e8a:	4770      	bx	lr

08009e8c <_init>:
 8009e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8e:	bf00      	nop
 8009e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e92:	bc08      	pop	{r3}
 8009e94:	469e      	mov	lr, r3
 8009e96:	4770      	bx	lr

08009e98 <_fini>:
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	bf00      	nop
 8009e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9e:	bc08      	pop	{r3}
 8009ea0:	469e      	mov	lr, r3
 8009ea2:	4770      	bx	lr
